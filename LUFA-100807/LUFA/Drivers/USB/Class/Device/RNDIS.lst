   1               		.file	"RNDIS.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.RNDIS_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	RNDIS_Device_ProcessControlRequest
  13               	RNDIS_Device_ProcessControlRequest:
  14               	.LFB65:
  15               		.file 1 "../../LUFA/Drivers/USB/Class/Device/RNDIS.c"
   1:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** /*
   2:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****               
   5:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** */
   8:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
   9:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** /*
  10:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  12:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  21:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** */
  30:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  31:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #include "../../HighLevel/USBMode.h"
  33:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #if defined(USB_CAN_BE_DEVICE)
  34:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  35:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_RNDIS_CLASS_DEVICE_C
  36:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_RNDIS_DRIVER
  37:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #include "RNDIS.h"
  38:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  39:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static const uint32_t PROGMEM AdapterSupportedOIDList[]  =
  40:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
  41:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_SUPPORTED_LIST,
  42:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_PHYSICAL_MEDIUM,
  43:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_HARDWARE_STATUS,
  44:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_SUPPORTED,
  45:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_IN_USE,
  46:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_FRAME_SIZE,
  47:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_TOTAL_SIZE,
  48:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_LINK_SPEED,
  49:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_TRANSMIT_BLOCK_SIZE,
  50:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RECEIVE_BLOCK_SIZE,
  51:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_VENDOR_ID,
  52:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_VENDOR_DESCRIPTION,
  53:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_CURRENT_PACKET_FILTER,
  54:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_TOTAL_SIZE,
  55:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_CONNECT_STATUS,
  56:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_XMIT_OK,
  57:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_OK,
  58:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_XMIT_ERROR,
  59:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_ERROR,
  60:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_NO_BUFFER,
  61:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_PERMANENT_ADDRESS,
  62:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_CURRENT_ADDRESS,
  63:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_MULTICAST_LIST,
  64:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_MAXIMUM_LIST_SIZE,
  65:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_RCV_ERROR_ALIGNMENT,
  66:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_XMIT_ONE_COLLISION,
  67:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_XMIT_MORE_COLLISIONS,
  68:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	};
  69:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  70:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_ProcessControlRequest(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
  71:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
  16               		.loc 1 71 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
  40               	.LBB55:
  41               	.LBB56:
  42               		.file 2 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****               
   5:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  48:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  50:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  51:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  53:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  55:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  
  56:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  59:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  63:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  66:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  72:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  74:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  75:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  78:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  84:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  88:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
  92:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  97:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 102:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 109:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 114:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 121:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 128:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 133:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 140:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 150:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 155:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 161:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 167:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 181:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 188:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 204:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 205:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 211:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 230:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 231:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 237:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 247:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 248:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 261:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 269:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 270:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 279:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 285:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 286:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 298:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 300:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 302:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 303:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 311:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 314:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 315:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 323:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 325:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 326:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 332:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 334:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 335:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 342:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 344:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 358:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 360:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 361:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 368:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 370:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 371:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 380:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 382:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 383:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 393:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 395:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 396:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 406:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 407:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 408:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 417:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 419:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 420:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 429:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  43               		.loc 2 429 0
  44 000a 8091 E800 		lds r24,232
  45               	.LVL1:
  46               	.LBE56:
  47               	.LBE55:
  72:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_IsSETUPReceived()))
  48               		.loc 1 72 0
  49 000e 83FF      		sbrs r24,3
  50 0010 00C0      		rjmp .L1
  73:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
  74:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  
  75:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_ControlRequest.wIndex != RNDISInterfaceInfo->Config.ControlInterfaceNumber)
  51               		.loc 1 75 0
  52 0012 8881      		ld r24,Y
  53 0014 90E0      		ldi r25,0
  54 0016 2091 0000 		lds r18,USB_ControlRequest+4
  55 001a 3091 0000 		lds r19,USB_ControlRequest+4+1
  56 001e 2817      		cp r18,r24
  57 0020 3907      		cpc r19,r25
  58 0022 01F0      		breq .+2
  59 0024 00C0      		rjmp .L1
  76:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
  77:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  78:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (USB_ControlRequest.bRequest)
  60               		.loc 1 78 0
  61 0026 8091 0000 		lds r24,USB_ControlRequest+1
  62 002a 8823      		tst r24
  63 002c 01F0      		breq .L3
  64 002e 8130      		cpi r24,lo8(1)
  65 0030 01F4      		brne .+2
  66 0032 00C0      		rjmp .L4
  67 0034 00C0      		rjmp .L1
  68               	.L3:
  79:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
  80:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REQ_SendEncapsulatedCommand:
  81:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  69               		.loc 1 81 0
  70 0036 8091 0000 		lds r24,USB_ControlRequest
  71 003a 8132      		cpi r24,lo8(33)
  72 003c 01F0      		breq .+2
  73 003e 00C0      		rjmp .L1
  74               	.LBB57:
  75               	.LBB58:
 430:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 431:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 432:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 442:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
  76               		.loc 2 442 0
  77 0040 8091 E800 		lds r24,232
  78 0044 877F      		andi r24,lo8(-9)
  79 0046 8093 E800 		sts 232,r24
  80               	.LBE58:
  81               	.LBE57:
  82:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
  83:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearSETUP();
  84:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  85:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_Read_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, USB_ControlReques
  82               		.loc 1 85 0
  83 004a 6091 0000 		lds r22,USB_ControlRequest+6
  84 004e 7091 0000 		lds r23,USB_ControlRequest+6+1
  85 0052 CE01      		movw r24,r28
  86 0054 4596      		adiw r24,21
  87 0056 0E94 0000 		call Endpoint_Read_Control_Stream_LE
  88               	.LVL2:
  89               	.LBB59:
  90               	.LBB60:
  86:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				RNDIS_Device_ProcessRNDISControlMessage(RNDISInterfaceInfo);
  87:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearIN();
  88:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
  89:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
  90:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
  91:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REQ_GetEncapsulatedResponse:
  92:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  93:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
  94:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearSETUP();
  95:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  96:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RND
  97:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  98:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				if (!(MessageHeader->MessageLength))
  99:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				{
 100:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					RNDISInterfaceInfo->State.RNDISMessageBuffer[0] = 0;
 101:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					MessageHeader->MessageLength = 1;
 102:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				}
 103:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 104:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_Write_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, MessageHeader->M
 105:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearOUT();
 106:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 107:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				MessageHeader->MessageLength = 0;
 108:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 109:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	
 110:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 111:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 112:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 113:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 114:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** bool RNDIS_Device_ConfigureEndpoints(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 115:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 116:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 117:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 119:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 120:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         RNDISInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOI
 121:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 122:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 123:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 124:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 126:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 127:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 RNDISInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_B
 128:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 129:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 130:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 131:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_IN
 133:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 134:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 RNDISInterfaceInfo->Config.NotificationEndpointDoubleBank ? ENDPO
 135:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 136:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 137:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 138:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 139:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	return true;
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 141:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 142:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_USBTask(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 143:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 144:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 145:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
 146:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 147:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RNDISM
 148:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 149:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber);
 150:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.ResponseReady)
 152:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 153:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		USB_Request_Header_t Notification = (USB_Request_Header_t)
 154:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 155:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE),
 156:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.bRequest      = NOTIF_ResponseAvailable,
 157:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wValue        = 0,
 158:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wIndex        = 0,
 159:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wLength       = 0,
 160:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			};
 161:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 162:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NO_STREAM_CALLBACK);
 163:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 164:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_ClearIN();
 165:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 166:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		RNDISInterfaceInfo->State.ResponseReady = false;
 167:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 168:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if ((RNDISInterfaceInfo->State.CurrRNDISState == RNDIS_Data_Initialized) && !(MessageHeader->Messa
 170:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 171:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		RNDIS_Packet_Message_t RNDISPacketHeader;
 172:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 173:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber);
 174:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		if (Endpoint_IsOUTReceived() && !(RNDISInterfaceInfo->State.FrameIN.FrameInBuffer))
 176:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 177:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Read_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NO_STREAM_CALLBACK);
 178:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 179:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (RNDISPacketHeader.DataLength > ETHERNET_FRAME_SIZE_MAX)
 180:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 181:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_StallTransaction();
 182:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				return;
 183:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 184:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 185:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Read_Stream_LE(RNDISInterfaceInfo->State.FrameIN.FrameData, RNDISPacketHeader.DataLengt
 186:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 187:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearOUT();
 188:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 189:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameIN.FrameLength = RNDISPacketHeader.DataLength;
 190:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 191:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameIN.FrameInBuffer = true;
 192:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 193:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 194:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataINEndpointNumber);
 195:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.FrameOUT.FrameInBuffer)
 197:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 198:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memset(&RNDISPacketHeader, 0, sizeof(RNDIS_Packet_Message_t));
 199:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 200:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageType   = REMOTE_NDIS_PACKET_MSG;
 201:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageLength = (sizeof(RNDIS_Packet_Message_t) + RNDISInterfaceInfo->State.Fr
 202:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataOffset    = (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_
 203:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataLength    = RNDISInterfaceInfo->State.FrameOUT.FrameLength;
 204:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 205:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NO_STREAM_CALLBACK)
 206:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(RNDISInterfaceInfo->State.FrameOUT.FrameData, RNDISPacketHeader.DataLen
 207:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearIN();
 208:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 209:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameOUT.FrameInBuffer = false;
 210:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 211:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 212:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }							
 213:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 214:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_ProcessRNDISControlMessage(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo
 215:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 216:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	/* Note: Only a single buffer is used for both the received message and its response to save SRAM.
 217:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	         this, response bytes should be filled in order so that they do not clobber unread data in
 218:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 219:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RNDISM
 220:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 221:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (MessageHeader->MessageType)
  91               		.loc 1 221 0
  92 005a 4D89      		ldd r20,Y+21
  93 005c 5E89      		ldd r21,Y+22
  94 005e 6F89      		ldd r22,Y+23
  95 0060 788D      		ldd r23,Y+24
  96 0062 4430      		cpi r20,4
  97 0064 5105      		cpc r21,__zero_reg__
  98 0066 6105      		cpc r22,__zero_reg__
  99 0068 7105      		cpc r23,__zero_reg__
 100 006a 01F4      		brne .+2
 101 006c 00C0      		rjmp .L6
 102 006e 00F4      		brsh .L7
 103 0070 4230      		cpi r20,2
 104 0072 5105      		cpc r21,__zero_reg__
 105 0074 6105      		cpc r22,__zero_reg__
 106 0076 7105      		cpc r23,__zero_reg__
 107 0078 01F0      		breq .L8
 108 007a 4330      		cpi r20,3
 109 007c 5105      		cpc r21,__zero_reg__
 110 007e 6105      		cpc r22,__zero_reg__
 111 0080 7105      		cpc r23,__zero_reg__
 112 0082 01F0      		breq .+2
 113 0084 00C0      		rjmp .L5
 114               	.LBB61:
 222:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 223:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_INITIALIZE_MSG:
 224:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 225:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 226:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Initialize_Message_t*  INITIALIZE_Message  =
 227:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			               (RNDIS_Initialize_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 228:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Initialize_Complete_t* INITIALIZE_Response =
 229:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			               (RNDIS_Initialize_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 230:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 231:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageType           = REMOTE_NDIS_INITIALIZE_CMPLT;
 232:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageLength         = sizeof(RNDIS_Initialize_Complete_t);
 233:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->RequestId             = INITIALIZE_Message->RequestId;
 234:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Status                = REMOTE_NDIS_STATUS_SUCCESS;
 235:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 236:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MajorVersion          = REMOTE_NDIS_VERSION_MAJOR;
 237:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MinorVersion          = REMOTE_NDIS_VERSION_MINOR;			
 238:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->DeviceFlags           = REMOTE_NDIS_DF_CONNECTIONLESS;
 239:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Medium                = REMOTE_NDIS_MEDIUM_802_3;
 240:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxPacketsPerTransfer = 1;
 241:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxTransferSize       = (sizeof(RNDIS_Packet_Message_t) + ETHERNET_FRAME_SI
 242:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->PacketAlignmentFactor = 0;
 243:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListOffset          = 0;
 244:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListSize            = 0;
 245:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 246:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = RNDIS_Initialized;
 247:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 248:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 249:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_HALT_MSG:
 250:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = false;
 115               		.loc 1 250 0
 116 0086 FE01      		movw r30,r28
 117 0088 EB56      		subi r30,107
 118 008a FF4F      		sbci r31,-1
 119 008c 1082      		st Z,__zero_reg__
 251:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			MessageHeader->MessageLength = 0;
 120               		.loc 1 251 0
 121 008e 198E      		std Y+25,__zero_reg__
 122 0090 1A8E      		std Y+26,__zero_reg__
 123 0092 1B8E      		std Y+27,__zero_reg__
 124 0094 1C8E      		std Y+28,__zero_reg__
 252:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 253:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = RNDIS_Uninitialized;
 125               		.loc 1 253 0
 126 0096 CA56      		subi r28,106
 127 0098 DF4F      		sbci r29,-1
 128               	.LVL3:
 129 009a 1882      		st Y,__zero_reg__
 130 009c 00C0      		rjmp .L5
 131               	.LVL4:
 132               	.L7:
 133               	.LBE61:
 221:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 134               		.loc 1 221 0
 135 009e 4630      		cpi r20,6
 136 00a0 5105      		cpc r21,__zero_reg__
 137 00a2 6105      		cpc r22,__zero_reg__
 138 00a4 7105      		cpc r23,__zero_reg__
 139 00a6 01F4      		brne .+2
 140 00a8 00C0      		rjmp .L10
 141 00aa 00F4      		brsh .+2
 142 00ac 00C0      		rjmp .L11
 143 00ae 4830      		cpi r20,8
 144 00b0 5105      		cpc r21,__zero_reg__
 145 00b2 6105      		cpc r22,__zero_reg__
 146 00b4 7105      		cpc r23,__zero_reg__
 147 00b6 01F0      		breq .+2
 148 00b8 00C0      		rjmp .L5
 149               	.LBB68:
 254:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 255:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 256:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_QUERY_MSG:
 257:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 258:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 259:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Query_Message_t*  QUERY_Message  = (RNDIS_Query_Message_t*)&RNDISInterfaceInfo->State.RNDI
 260:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Query_Complete_t* QUERY_Response = (RNDIS_Query_Complete_t*)&RNDISInterfaceInfo->State.RND
 261:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint32_t                Query_Oid      = QUERY_Message->Oid;
 262:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 263:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void*     QueryData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_
 264:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                                    QUERY_Message->InformationBu
 265:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void*     ResponseData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Query_Comple
 266:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint16_t  ResponseSize;
 267:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 268:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageType   = REMOTE_NDIS_QUERY_CMPLT;
 269:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageLength = sizeof(RNDIS_Query_Complete_t);
 270:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 271:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (RNDIS_Device_ProcessNDISQuery(RNDISInterfaceInfo, Query_Oid, QueryData, QUERY_Message->Infor
 272:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                  ResponseData, &ResponseSize))
 273:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 274:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->Status                  = REMOTE_NDIS_STATUS_SUCCESS;
 275:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->MessageLength          += ResponseSize;
 276:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							
 277:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferLength = ResponseSize;
 278:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = (sizeof(RNDIS_Query_Complete_t) - sizeof(RNDIS_Messag
 279:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 280:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			else
 281:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{				
 282:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->Status                  = REMOTE_NDIS_STATUS_NOT_SUPPORTED;
 283:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 284:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferLength = 0;
 285:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = 0;
 286:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 287:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 288:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 289:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_SET_MSG:
 290:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 291:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 292:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Set_Message_t*  SET_Message  = (RNDIS_Set_Message_t*)&RNDISInterfaceInfo->State.RNDISMessa
 293:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Set_Complete_t* SET_Response = (RNDIS_Set_Complete_t*)&RNDISInterfaceInfo->State.RNDISMess
 294:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint32_t              SET_Oid      = SET_Message->Oid;
 295:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 296:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageType   = REMOTE_NDIS_SET_CMPLT;
 297:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageLength = sizeof(RNDIS_Set_Complete_t);
 298:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->RequestId     = SET_Message->RequestId;
 299:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 300:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void* SetData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_t) +
 301:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                              SET_Message->InformationBufferOffs
 302:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 303:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->Status = RNDIS_Device_ProcessNDISSet(RNDISInterfaceInfo, SET_Oid, SetData,
 304:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   SET_Message->InformationBufferLength) ?
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   REMOTE_NDIS_STATUS_SUCCESS : REMOTE_NDIS_STAT
 306:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 307:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_RESET_MSG:
 308:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 309:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 310:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Reset_Complete_t* RESET_Response = (RNDIS_Reset_Complete_t*)&RNDISInterfaceInfo->State.RND
 311:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 312:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageType     = REMOTE_NDIS_RESET_CMPLT;
 313:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageLength   = sizeof(RNDIS_Reset_Complete_t);
 314:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->Status          = REMOTE_NDIS_STATUS_SUCCESS;
 315:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->AddressingReset = 0;
 316:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 317:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 318:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_KEEPALIVE_MSG:
 319:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 150               		.loc 1 319 0
 151 00ba FE01      		movw r30,r28
 152 00bc EB56      		subi r30,107
 153 00be FF4F      		sbci r31,-1
 154 00c0 81E0      		ldi r24,lo8(1)
 155 00c2 8083      		st Z,r24
 156               	.LVL5:
 320:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 321:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_KeepAlive_Message_t*  KEEPALIVE_Message  =
 322:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                (RNDIS_KeepAlive_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 323:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_KeepAlive_Complete_t* KEEPALIVE_Response =
 324:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                (RNDIS_KeepAlive_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 325:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 326:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->MessageType   = REMOTE_NDIS_KEEPALIVE_CMPLT;
 157               		.loc 1 326 0
 158 00c4 48E0      		ldi r20,lo8(8)
 159 00c6 50E0      		ldi r21,0
 160 00c8 60E0      		ldi r22,0
 161 00ca 70E8      		ldi r23,lo8(-128)
 162 00cc 4D8B      		std Y+21,r20
 163 00ce 5E8B      		std Y+22,r21
 164 00d0 6F8B      		std Y+23,r22
 165 00d2 788F      		std Y+24,r23
 327:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->MessageLength = sizeof(RNDIS_KeepAlive_Complete_t);
 166               		.loc 1 327 0
 167 00d4 40E1      		ldi r20,lo8(16)
 168 00d6 50E0      		ldi r21,0
 169 00d8 60E0      		ldi r22,0
 170 00da 70E0      		ldi r23,0
 171 00dc 498F      		std Y+25,r20
 172 00de 5A8F      		std Y+26,r21
 173 00e0 6B8F      		std Y+27,r22
 174 00e2 7C8F      		std Y+28,r23
 175 00e4 00C0      		rjmp .L52
 176               	.LVL6:
 177               	.L8:
 224:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 178               		.loc 1 224 0
 179 00e6 FE01      		movw r30,r28
 180 00e8 EB56      		subi r30,107
 181 00ea FF4F      		sbci r31,-1
 182 00ec 21E0      		ldi r18,lo8(1)
 183 00ee 2083      		st Z,r18
 184               	.LVL7:
 231:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageLength         = sizeof(RNDIS_Initialize_Complete_t);
 185               		.loc 1 231 0
 186 00f0 82E0      		ldi r24,lo8(2)
 187 00f2 90E0      		ldi r25,0
 188 00f4 A0E0      		ldi r26,0
 189 00f6 B0E8      		ldi r27,lo8(-128)
 190 00f8 8D8B      		std Y+21,r24
 191 00fa 9E8B      		std Y+22,r25
 192 00fc AF8B      		std Y+23,r26
 193 00fe B88F      		std Y+24,r27
 232:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->RequestId             = INITIALIZE_Message->RequestId;
 194               		.loc 1 232 0
 195 0100 84E3      		ldi r24,lo8(52)
 196 0102 90E0      		ldi r25,0
 197 0104 A0E0      		ldi r26,0
 198 0106 B0E0      		ldi r27,0
 199 0108 898F      		std Y+25,r24
 200 010a 9A8F      		std Y+26,r25
 201 010c AB8F      		std Y+27,r26
 202 010e BC8F      		std Y+28,r27
 234:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 203               		.loc 1 234 0
 204 0110 19A2      		std Y+33,__zero_reg__
 205 0112 1AA2      		std Y+34,__zero_reg__
 206 0114 1BA2      		std Y+35,__zero_reg__
 207 0116 1CA2      		std Y+36,__zero_reg__
 236:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MinorVersion          = REMOTE_NDIS_VERSION_MINOR;			
 208               		.loc 1 236 0
 209 0118 41E0      		ldi r20,lo8(1)
 210 011a 50E0      		ldi r21,0
 211 011c 60E0      		ldi r22,0
 212 011e 70E0      		ldi r23,0
 213 0120 4DA3      		std Y+37,r20
 214 0122 5EA3      		std Y+38,r21
 215 0124 6FA3      		std Y+39,r22
 216 0126 78A7      		std Y+40,r23
 237:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->DeviceFlags           = REMOTE_NDIS_DF_CONNECTIONLESS;
 217               		.loc 1 237 0
 218 0128 19A6      		std Y+41,__zero_reg__
 219 012a 1AA6      		std Y+42,__zero_reg__
 220 012c 1BA6      		std Y+43,__zero_reg__
 221 012e 1CA6      		std Y+44,__zero_reg__
 238:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Medium                = REMOTE_NDIS_MEDIUM_802_3;
 222               		.loc 1 238 0
 223 0130 4DA7      		std Y+45,r20
 224 0132 5EA7      		std Y+46,r21
 225 0134 6FA7      		std Y+47,r22
 226 0136 78AB      		std Y+48,r23
 239:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxPacketsPerTransfer = 1;
 227               		.loc 1 239 0
 228 0138 19AA      		std Y+49,__zero_reg__
 229 013a 1AAA      		std Y+50,__zero_reg__
 230 013c 1BAA      		std Y+51,__zero_reg__
 231 013e 1CAA      		std Y+52,__zero_reg__
 240:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxTransferSize       = (sizeof(RNDIS_Packet_Message_t) + ETHERNET_FRAME_SI
 232               		.loc 1 240 0
 233 0140 4DAB      		std Y+53,r20
 234 0142 5EAB      		std Y+54,r21
 235 0144 6FAB      		std Y+55,r22
 236 0146 78AF      		std Y+56,r23
 241:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->PacketAlignmentFactor = 0;
 237               		.loc 1 241 0
 238 0148 88E0      		ldi r24,lo8(8)
 239 014a 96E0      		ldi r25,lo8(6)
 240 014c A0E0      		ldi r26,0
 241 014e B0E0      		ldi r27,0
 242 0150 89AF      		std Y+57,r24
 243 0152 9AAF      		std Y+58,r25
 244 0154 ABAF      		std Y+59,r26
 245 0156 BCAF      		std Y+60,r27
 242:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListOffset          = 0;
 246               		.loc 1 242 0
 247 0158 E855      		subi r30,88
 248 015a F109      		sbc r31,__zero_reg__
 249 015c 1082      		st Z,__zero_reg__
 250 015e 1182      		std Z+1,__zero_reg__
 251 0160 1282      		std Z+2,__zero_reg__
 252 0162 1382      		std Z+3,__zero_reg__
 243:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListSize            = 0;
 253               		.loc 1 243 0
 254 0164 3496      		adiw r30,4
 255 0166 1082      		st Z,__zero_reg__
 256 0168 1182      		std Z+1,__zero_reg__
 257 016a 1282      		std Z+2,__zero_reg__
 258 016c 1382      		std Z+3,__zero_reg__
 244:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 259               		.loc 1 244 0
 260 016e 3496      		adiw r30,4
 261 0170 1082      		st Z,__zero_reg__
 262 0172 1182      		std Z+1,__zero_reg__
 263 0174 1282      		std Z+2,__zero_reg__
 264 0176 1382      		std Z+3,__zero_reg__
 246:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 265               		.loc 1 246 0
 266 0178 CA56      		subi r28,106
 267 017a DF4F      		sbci r29,-1
 268               	.LVL8:
 269 017c 2883      		st Y,r18
 270 017e 00C0      		rjmp .L5
 271               	.LVL9:
 272               	.L6:
 257:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 273               		.loc 1 257 0
 274 0180 81E0      		ldi r24,lo8(1)
 275 0182 FE01      		movw r30,r28
 276 0184 EB56      		subi r30,107
 277 0186 FF4F      		sbci r31,-1
 278 0188 8083      		st Z,r24
 279               	.LVL10:
 261:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 280               		.loc 1 261 0
 281 018a 49A1      		ldd r20,Y+33
 282 018c 5AA1      		ldd r21,Y+34
 283 018e 6BA1      		ldd r22,Y+35
 284 0190 7CA1      		ldd r23,Y+36
 285               	.LVL11:
 265:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint16_t  ResponseSize;
 286               		.loc 1 265 0
 287 0192 CE01      		movw r24,r28
 288 0194 8D96      		adiw r24,45
 289               	.LVL12:
 268:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageLength = sizeof(RNDIS_Query_Complete_t);
 290               		.loc 1 268 0
 291 0196 04E0      		ldi r16,lo8(4)
 292 0198 10E0      		ldi r17,0
 293 019a 20E0      		ldi r18,0
 294 019c 30E8      		ldi r19,lo8(-128)
 295 019e 0D8B      		std Y+21,r16
 296 01a0 1E8B      		std Y+22,r17
 297 01a2 2F8B      		std Y+23,r18
 298 01a4 388F      		std Y+24,r19
 269:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 299               		.loc 1 269 0
 300 01a6 08E1      		ldi r16,lo8(24)
 301 01a8 10E0      		ldi r17,0
 302 01aa 20E0      		ldi r18,0
 303 01ac 30E0      		ldi r19,0
 304 01ae 098F      		std Y+25,r16
 305 01b0 1A8F      		std Y+26,r17
 306 01b2 2B8F      		std Y+27,r18
 307 01b4 3C8F      		std Y+28,r19
 308               	.LVL13:
 309               	.LBB62:
 310               	.LBB63:
 328:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->RequestId     = KEEPALIVE_Message->RequestId;
 329:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->Status        = REMOTE_NDIS_STATUS_SUCCESS;
 330:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 331:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 332:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 333:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 334:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 335:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static bool RNDIS_Device_ProcessNDISQuery(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 336:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           const uint32_t OId,
 337:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           void* const QueryData,
 338:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           const uint16_t QuerySize,
 339:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           void* ResponseData,
 340:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           uint16_t* const ResponseSize)
 341:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 342:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)QueryData;
 343:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)QuerySize;
 344:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (OId)
 311               		.loc 1 345 0
 312 01b6 4E30      		cpi r20,14
 313 01b8 21E0      		ldi r18,1
 314 01ba 5207      		cpc r21,r18
 315 01bc 6207      		cpc r22,r18
 316 01be 7105      		cpc r23,__zero_reg__
 317 01c0 01F4      		brne .+2
 318 01c2 00C0      		rjmp .L14
 319 01c4 00F0      		brlo .+2
 320 01c6 00C0      		rjmp .L15
 321 01c8 4630      		cpi r20,6
 322 01ca F1E0      		ldi r31,1
 323 01cc 5F07      		cpc r21,r31
 324 01ce 6F07      		cpc r22,r31
 325 01d0 7105      		cpc r23,__zero_reg__
 326 01d2 01F4      		brne .+2
 327 01d4 00C0      		rjmp .L16
 328 01d6 00F4      		brsh .L17
 329 01d8 4230      		cpi r20,2
 330 01da E1E0      		ldi r30,1
 331 01dc 5E07      		cpc r21,r30
 332 01de 6E07      		cpc r22,r30
 333 01e0 7105      		cpc r23,__zero_reg__
 334 01e2 01F4      		brne .+2
 335 01e4 00C0      		rjmp .L27
 336 01e6 00F4      		brsh .L19
 337 01e8 4130      		cpi r20,1
 338 01ea 5140      		sbci r21,1
 339 01ec 6140      		sbci r22,1
 340 01ee 7105      		cpc r23,__zero_reg__
 341 01f0 01F0      		breq .+2
 342 01f2 00C0      		rjmp .L13
 343               	.LVL14:
 346:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 347:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_SUPPORTED_LIST:
 348:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(AdapterSupportedOIDList);
 349:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 350:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy_P(ResponseData, AdapterSupportedOIDList, sizeof(AdapterSupportedOIDList));
 344               		.loc 1 350 0
 345 01f4 4CE6      		ldi r20,lo8(108)
 346 01f6 50E0      		ldi r21,0
 347               	.LVL15:
 348 01f8 60E0      		ldi r22,lo8(AdapterSupportedOIDList)
 349 01fa 70E0      		ldi r23,hi8(AdapterSupportedOIDList)
 350 01fc 0E94 0000 		call memcpy_P
 351               	.LVL16:
 348:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 352               		.loc 1 348 0
 353 0200 0CE6      		ldi r16,lo8(108)
 354 0202 10E0      		ldi r17,0
 355 0204 00C0      		rjmp .L34
 356               	.LVL17:
 357               	.L19:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 358               		.loc 1 345 0
 359 0206 4530      		cpi r20,5
 360 0208 5140      		sbci r21,1
 361 020a 6140      		sbci r22,1
 362 020c 7105      		cpc r23,__zero_reg__
 363               	.LVL18:
 364 020e 00F4      		brsh .+2
 365 0210 00C0      		rjmp .L27
 366 0212 00C0      		rjmp .L13
 367               	.LVL19:
 368               	.L17:
 369 0214 4C30      		cpi r20,12
 370 0216 E1E0      		ldi r30,1
 371 0218 5E07      		cpc r21,r30
 372 021a 6E07      		cpc r22,r30
 373 021c 7105      		cpc r23,__zero_reg__
 374 021e 00F4      		brsh .L22
 375 0220 4A30      		cpi r20,10
 376 0222 F1E0      		ldi r31,1
 377 0224 5F07      		cpc r21,r31
 378 0226 6F07      		cpc r22,r31
 379 0228 7105      		cpc r23,__zero_reg__
 380 022a 00F0      		brlo .+2
 381 022c 00C0      		rjmp .L16
 382 022e 4730      		cpi r20,7
 383 0230 5140      		sbci r21,1
 384 0232 6140      		sbci r22,1
 385 0234 7105      		cpc r23,__zero_reg__
 386 0236 01F0      		breq .+2
 387 0238 00C0      		rjmp .L13
 388               	.LVL20:
 351:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 352:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 353:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_PHYSICAL_MEDIUM:
 354:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 355:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 356:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate that the device is a true ethernet link */
 357:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0;
 358:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 359:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 360:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_HARDWARE_STATUS:
 361:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 362:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 363:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = NDIS_HardwareStatus_Ready;
 364:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 365:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 366:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_SUPPORTED:
 367:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_IN_USE:
 368:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 369:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 370:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = REMOTE_NDIS_MEDIUM_802_3;
 371:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 372:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 373:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_VENDOR_ID:
 374:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 375:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 376:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Vendor ID 0x0xFFFFFF is reserved for vendors who have not purchased a NDIS VID */
 377:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0x00FFFFFF;
 378:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 379:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 380:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MAXIMUM_FRAME_SIZE:
 381:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_TRANSMIT_BLOCK_SIZE:
 382:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RECEIVE_BLOCK_SIZE:
 383:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 384:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 385:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = ETHERNET_FRAME_SIZE_MAX;
 386:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 387:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 388:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_VENDOR_DESCRIPTION:
 389:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = (strlen(RNDISInterfaceInfo->Config.AdapterVendorDescription) + 1);
 390:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 391:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy(ResponseData, RNDISInterfaceInfo->Config.AdapterVendorDescription, *ResponseSize);
 392:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 393:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 394:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_CONNECT_STATUS:
 395:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 396:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 397:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = REMOTE_NDIS_MEDIA_STATE_CONNECTED;
 398:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 399:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 400:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_LINK_SPEED:
 401:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 402:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 403:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate 10Mb/s link speed */
 404:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 100000;
 389               		.loc 1 404 0
 390 023a 40EA      		ldi r20,lo8(-96)
 391 023c 56E8      		ldi r21,lo8(-122)
 392 023e 61E0      		ldi r22,lo8(1)
 393 0240 70E0      		ldi r23,0
 394               	.LVL21:
 395 0242 00C0      		rjmp .L54
 396               	.LVL22:
 397               	.L22:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 398               		.loc 1 345 0
 399 0244 4C30      		cpi r20,12
 400 0246 E1E0      		ldi r30,1
 401 0248 5E07      		cpc r21,r30
 402 024a 6E07      		cpc r22,r30
 403 024c 7105      		cpc r23,__zero_reg__
 404 024e 01F4      		brne .+2
 405 0250 00C0      		rjmp .L24
 406 0252 4D30      		cpi r20,13
 407 0254 5140      		sbci r21,1
 408 0256 6140      		sbci r22,1
 409 0258 7105      		cpc r23,__zero_reg__
 410 025a 01F0      		breq .+2
 411 025c 00C0      		rjmp .L13
 389:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 412               		.loc 1 389 0
 413 025e 6D85      		ldd r22,Y+13
 414 0260 7E85      		ldd r23,Y+14
 415 0262 FB01      		movw r30,r22
 416               		0:
 417 0264 0190      		ld __tmp_reg__,Z+
 418 0266 0020      		tst __tmp_reg__
 419 0268 01F4      		brne 0b
 420 026a 8F01      		movw r16,r30
 421 026c 061B      		sub r16,r22
 422 026e 170B      		sbc r17,r23
 423               	.LVL23:
 391:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 424               		.loc 1 391 0
 425 0270 A801      		movw r20,r16
 426               	.LVL24:
 427 0272 0E94 0000 		call memcpy
 428               	.LVL25:
 429 0276 00C0      		rjmp .L34
 430               	.LVL26:
 431               	.L15:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 432               		.loc 1 345 0
 433 0278 4630      		cpi r20,6
 434 027a 21E0      		ldi r18,1
 435 027c 5207      		cpc r21,r18
 436 027e 22E0      		ldi r18,2
 437 0280 6207      		cpc r22,r18
 438 0282 7105      		cpc r23,__zero_reg__
 439 0284 00F4      		brsh .L26
 440 0286 4130      		cpi r20,1
 441 0288 81E0      		ldi r24,1
 442 028a 5807      		cpc r21,r24
 443 028c 82E0      		ldi r24,2
 444 028e 6807      		cpc r22,r24
 445 0290 7105      		cpc r23,__zero_reg__
 446               	.LVL27:
 447 0292 00F0      		brlo .+2
 448 0294 00C0      		rjmp .L27
 449 0296 4431      		cpi r20,20
 450 0298 E1E0      		ldi r30,1
 451 029a 5E07      		cpc r21,r30
 452 029c 6E07      		cpc r22,r30
 453 029e 7105      		cpc r23,__zero_reg__
 454 02a0 01F4      		brne .+2
 455 02a2 00C0      		rjmp .L27
 456 02a4 4230      		cpi r20,2
 457 02a6 F2E0      		ldi r31,2
 458 02a8 5F07      		cpc r21,r31
 459 02aa F1E0      		ldi r31,1
 460 02ac 6F07      		cpc r22,r31
 461 02ae 7105      		cpc r23,__zero_reg__
 462 02b0 01F4      		brne .+2
 463 02b2 00C0      		rjmp .L27
 464 02b4 4131      		cpi r20,17
 465 02b6 5140      		sbci r21,1
 466 02b8 6140      		sbci r22,1
 467 02ba 7105      		cpc r23,__zero_reg__
 468 02bc 01F0      		breq .+2
 469 02be 00C0      		rjmp .L13
 470               	.LVL28:
 405:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 406:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 407:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_PERMANENT_ADDRESS:
 408:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_CURRENT_ADDRESS:
 409:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(MAC_Address_t);
 410:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 411:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy(ResponseData, &RNDISInterfaceInfo->Config.AdapterMACAddress, sizeof(MAC_Address_t));
 412:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 413:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 414:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_MAXIMUM_LIST_SIZE:
 415:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 416:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 417:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate only one multicast address supported */
 418:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 1;
 419:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 420:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 421:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 422:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 423:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 424:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = RNDISInterfaceInfo->State.CurrPacketFilter;
 425:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 426:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;			
 427:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_XMIT_OK:
 428:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_OK:
 429:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_XMIT_ERROR:
 430:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_ERROR:
 431:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_NO_BUFFER:
 432:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_RCV_ERROR_ALIGNMENT:
 433:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_XMIT_ONE_COLLISION:
 434:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_XMIT_MORE_COLLISIONS:
 435:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 436:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 437:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Unused statistic OIDs - always return 0 for each */
 438:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0;
 439:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 440:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 441:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MAXIMUM_TOTAL_SIZE:
 442:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 443:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 444:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate maximum overall buffer (Ethernet frame and RNDIS header) the adapter can handle */
 445:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = (RNDIS_MESSAGE_BUFFER_SIZE + ETHERNET_FRAME_SIZE_MAX);
 471               		.loc 1 445 0
 472 02c0 4CE5      		ldi r20,lo8(92)
 473 02c2 56E0      		ldi r21,lo8(6)
 474 02c4 60E0      		ldi r22,0
 475 02c6 70E0      		ldi r23,0
 476               	.LVL29:
 477 02c8 00C0      		rjmp .L54
 478               	.LVL30:
 479               	.L26:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 480               		.loc 1 345 0
 481 02ca 4430      		cpi r20,4
 482 02cc E1E0      		ldi r30,1
 483 02ce 5E07      		cpc r21,r30
 484 02d0 6E07      		cpc r22,r30
 485 02d2 7E07      		cpc r23,r30
 486 02d4 01F0      		breq .L31
 487 02d6 00F4      		brsh .L32
 488 02d8 4150      		subi r20,1
 489 02da 5140      		sbci r21,1
 490 02dc 6140      		sbci r22,1
 491 02de 7140      		sbci r23,1
 492               	.LVL31:
 493 02e0 4230      		cpi r20,2
 494 02e2 5105      		cpc r21,__zero_reg__
 495 02e4 6105      		cpc r22,__zero_reg__
 496 02e6 7105      		cpc r23,__zero_reg__
 497 02e8 00F0      		brlo .+2
 498 02ea 00C0      		rjmp .L13
 499               	.LVL32:
 411:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 500               		.loc 1 411 0
 501 02ec 26E0      		ldi r18,lo8(6)
 502 02ee FE01      		movw r30,r28
 503 02f0 3F96      		adiw r30,15
 504 02f2 DC01      		movw r26,r24
 505               		0:
 506 02f4 0190      		ld r0,Z+
 507 02f6 0D92      		st X+,r0
 508 02f8 2A95      		dec r18
 509 02fa 01F4      		brne 0b
 409:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 510               		.loc 1 409 0
 511 02fc 06E0      		ldi r16,lo8(6)
 512 02fe 10E0      		ldi r17,0
 513 0300 00C0      		rjmp .L34
 514               	.LVL33:
 515               	.L32:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 516               		.loc 1 345 0
 517 0302 4150      		subi r20,1
 518 0304 5140      		sbci r21,1
 519 0306 6240      		sbci r22,2
 520 0308 7140      		sbci r23,1
 521               	.LVL34:
 522 030a 4330      		cpi r20,3
 523 030c 5105      		cpc r21,__zero_reg__
 524 030e 6105      		cpc r22,__zero_reg__
 525 0310 7105      		cpc r23,__zero_reg__
 526 0312 00F0      		brlo .L27
 527 0314 00C0      		rjmp .L13
 528               	.LVL35:
 529               	.L24:
 377:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 530               		.loc 1 377 0
 531 0316 4FEF      		ldi r20,lo8(-1)
 532 0318 5FEF      		ldi r21,lo8(-1)
 533 031a 6FEF      		ldi r22,lo8(-1)
 534 031c 70E0      		ldi r23,0
 535               	.LVL36:
 536 031e 00C0      		rjmp .L54
 537               	.LVL37:
 538               	.L16:
 385:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 539               		.loc 1 385 0
 540 0320 4CED      		ldi r20,lo8(-36)
 541 0322 55E0      		ldi r21,lo8(5)
 542 0324 60E0      		ldi r22,0
 543 0326 70E0      		ldi r23,0
 544               	.LVL38:
 545 0328 00C0      		rjmp .L54
 546               	.LVL39:
 547               	.L31:
 418:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 548               		.loc 1 418 0
 549 032a 41E0      		ldi r20,lo8(1)
 550 032c 50E0      		ldi r21,0
 551 032e 60E0      		ldi r22,0
 552 0330 70E0      		ldi r23,0
 553               	.LVL40:
 554 0332 00C0      		rjmp .L54
 555               	.LVL41:
 556               	.L14:
 424:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 557               		.loc 1 424 0
 558 0334 FE01      		movw r30,r28
 559 0336 E956      		subi r30,105
 560 0338 FF4F      		sbci r31,-1
 561 033a 4081      		ld r20,Z
 562 033c 5181      		ldd r21,Z+1
 563 033e 6281      		ldd r22,Z+2
 564 0340 7381      		ldd r23,Z+3
 565               	.LVL42:
 566 0342 00C0      		rjmp .L54
 567               	.LVL43:
 568               	.L27:
 438:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 569               		.loc 1 438 0
 570 0344 1DA6      		std Y+45,__zero_reg__
 571 0346 1EA6      		std Y+46,__zero_reg__
 572 0348 1FA6      		std Y+47,__zero_reg__
 573 034a 18AA      		std Y+48,__zero_reg__
 574 034c 00C0      		rjmp .L53
 575               	.L54:
 576               		.loc 1 445 0
 577 034e 4DA7      		std Y+45,r20
 578 0350 5EA7      		std Y+46,r21
 579 0352 6FA7      		std Y+47,r22
 580 0354 78AB      		std Y+48,r23
 581               	.L53:
 442:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 582               		.loc 1 442 0
 583 0356 04E0      		ldi r16,lo8(4)
 584 0358 10E0      		ldi r17,0
 585 035a 00C0      		rjmp .L34
 586               	.LVL44:
 587               	.L11:
 588               	.LBE63:
 589               	.LBE62:
 290:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 590               		.loc 1 290 0
 591 035c 81E0      		ldi r24,lo8(1)
 592 035e FE01      		movw r30,r28
 593 0360 EB56      		subi r30,107
 594 0362 FF4F      		sbci r31,-1
 595 0364 8083      		st Z,r24
 596               	.LVL45:
 294:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 597               		.loc 1 294 0
 598 0366 49A1      		ldd r20,Y+33
 599 0368 5AA1      		ldd r21,Y+34
 600 036a 6BA1      		ldd r22,Y+35
 601 036c 7CA1      		ldd r23,Y+36
 602               	.LVL46:
 296:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageLength = sizeof(RNDIS_Set_Complete_t);
 603               		.loc 1 296 0
 604 036e 05E0      		ldi r16,lo8(5)
 605 0370 10E0      		ldi r17,0
 606 0372 20E0      		ldi r18,0
 607 0374 30E8      		ldi r19,lo8(-128)
 608 0376 0D8B      		std Y+21,r16
 609 0378 1E8B      		std Y+22,r17
 610 037a 2F8B      		std Y+23,r18
 611 037c 388F      		std Y+24,r19
 297:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->RequestId     = SET_Message->RequestId;
 612               		.loc 1 297 0
 613 037e 00E1      		ldi r16,lo8(16)
 614 0380 10E0      		ldi r17,0
 615 0382 20E0      		ldi r18,0
 616 0384 30E0      		ldi r19,0
 617 0386 098F      		std Y+25,r16
 618 0388 1A8F      		std Y+26,r17
 619 038a 2B8F      		std Y+27,r18
 620 038c 3C8F      		std Y+28,r19
 301:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 621               		.loc 1 301 0
 622 038e 09A5      		ldd r16,Y+41
 623 0390 1AA5      		ldd r17,Y+42
 624 0392 2BA5      		ldd r18,Y+43
 625 0394 3CA5      		ldd r19,Y+44
 626               	.LVL47:
 627               	.LBB64:
 628               	.LBB65:
 446:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 447:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 448:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		default:
 449:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return false;
 450:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 451:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 452:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 453:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static bool RNDIS_Device_ProcessNDISSet(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 454:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const uint32_t OId,
 455:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const void* SetData,
 456:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const uint16_t SetSize)
 457:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 458:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)SetSize;
 459:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 460:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (OId)
 629               		.loc 1 460 0
 630 0396 4E30      		cpi r20,14
 631 0398 F1E0      		ldi r31,1
 632 039a 5F07      		cpc r21,r31
 633 039c 6F07      		cpc r22,r31
 634 039e 7105      		cpc r23,__zero_reg__
 635 03a0 01F0      		breq .L36
 636 03a2 4330      		cpi r20,3
 637 03a4 5140      		sbci r21,1
 638 03a6 6140      		sbci r22,1
 639 03a8 7140      		sbci r23,1
 640 03aa 01F0      		breq .L37
 641               	.LBE65:
 642               	.LBE64:
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 643               		.loc 1 305 0
 644 03ac 4BEB      		ldi r20,lo8(-69)
 645 03ae 50E0      		ldi r21,0
 646 03b0 60E0      		ldi r22,0
 647 03b2 70EC      		ldi r23,lo8(-64)
 648               	.LVL48:
 649 03b4 00C0      		rjmp .L35
 650               	.LVL49:
 651               	.L36:
 300:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                              SET_Message->InformationBufferOffs
 652               		.loc 1 300 0
 653 03b6 B901      		movw r22,r18
 654 03b8 A801      		movw r20,r16
 655               	.LVL50:
 656 03ba 485F      		subi r20,-8
 657 03bc 5F4F      		sbci r21,-1
 658 03be 6F4F      		sbci r22,-1
 659 03c0 7F4F      		sbci r23,-1
 660               	.LBB67:
 661               	.LBB66:
 461:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 462:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 463:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrPacketFilter = *((uint32_t*)SetData);
 662               		.loc 1 463 0
 663 03c2 FE01      		movw r30,r28
 664 03c4 E40F      		add r30,r20
 665 03c6 F51F      		adc r31,r21
 666 03c8 4589      		ldd r20,Z+21
 667 03ca 5689      		ldd r21,Z+22
 668 03cc 6789      		ldd r22,Z+23
 669 03ce 708D      		ldd r23,Z+24
 670 03d0 FE01      		movw r30,r28
 671 03d2 E956      		subi r30,105
 672 03d4 FF4F      		sbci r31,-1
 673 03d6 4083      		st Z,r20
 674 03d8 5183      		std Z+1,r21
 675 03da 6283      		std Z+2,r22
 676 03dc 7383      		std Z+3,r23
 464:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = ((RNDISInterfaceInfo->State.CurrPacketFilter) ?
 677               		.loc 1 464 0
 678 03de 82E0      		ldi r24,lo8(2)
 679 03e0 3197      		sbiw r30,1
 680 03e2 8083      		st Z,r24
 681               	.L37:
 682               	.LBE66:
 683               	.LBE67:
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 684               		.loc 1 305 0
 685 03e4 40E0      		ldi r20,0
 686 03e6 50E0      		ldi r21,0
 687 03e8 BA01      		movw r22,r20
 688               	.L35:
 303:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   SET_Message->InformationBufferLength) ?
 689               		.loc 1 303 0
 690 03ea 49A3      		std Y+33,r20
 691 03ec 5AA3      		std Y+34,r21
 692 03ee 6BA3      		std Y+35,r22
 693 03f0 7CA3      		std Y+36,r23
 694               	.LVL51:
 695 03f2 00C0      		rjmp .L5
 696               	.LVL52:
 697               	.L10:
 308:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 698               		.loc 1 308 0
 699 03f4 FE01      		movw r30,r28
 700 03f6 EB56      		subi r30,107
 701 03f8 FF4F      		sbci r31,-1
 702 03fa 81E0      		ldi r24,lo8(1)
 703 03fc 8083      		st Z,r24
 704               	.LVL53:
 312:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageLength   = sizeof(RNDIS_Reset_Complete_t);
 705               		.loc 1 312 0
 706 03fe 46E0      		ldi r20,lo8(6)
 707 0400 50E0      		ldi r21,0
 708 0402 60E0      		ldi r22,0
 709 0404 70E8      		ldi r23,lo8(-128)
 710 0406 4D8B      		std Y+21,r20
 711 0408 5E8B      		std Y+22,r21
 712 040a 6F8B      		std Y+23,r22
 713 040c 788F      		std Y+24,r23
 313:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->Status          = REMOTE_NDIS_STATUS_SUCCESS;
 714               		.loc 1 313 0
 715 040e 40E1      		ldi r20,lo8(16)
 716 0410 50E0      		ldi r21,0
 717 0412 60E0      		ldi r22,0
 718 0414 70E0      		ldi r23,0
 719 0416 498F      		std Y+25,r20
 720 0418 5A8F      		std Y+26,r21
 721 041a 6B8F      		std Y+27,r22
 722 041c 7C8F      		std Y+28,r23
 314:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->AddressingReset = 0;
 723               		.loc 1 314 0
 724 041e 1D8E      		std Y+29,__zero_reg__
 725 0420 1E8E      		std Y+30,__zero_reg__
 726 0422 1F8E      		std Y+31,__zero_reg__
 727 0424 18A2      		std Y+32,__zero_reg__
 728               	.LVL54:
 729               	.L52:
 329:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 730               		.loc 1 329 0
 731 0426 19A2      		std Y+33,__zero_reg__
 732 0428 1AA2      		std Y+34,__zero_reg__
 733 042a 1BA2      		std Y+35,__zero_reg__
 734 042c 1CA2      		std Y+36,__zero_reg__
 735               	.LVL55:
 736               	.L5:
 737               	.LBE68:
 738               	.LBE60:
 739               	.LBE59:
 740               	.LBB71:
 741               	.LBB72:
 443:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 444:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 445:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 453:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 742               		.loc 2 454 0
 743 042e 8091 E800 		lds r24,232
 744 0432 8E77      		andi r24,lo8(126)
 745 0434 8093 E800 		sts 232,r24
 746 0438 00C0      		rjmp .L1
 747               	.LVL56:
 748               	.L4:
 749               	.LBE72:
 750               	.LBE71:
  92:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 751               		.loc 1 92 0
 752 043a 8091 0000 		lds r24,USB_ControlRequest
 753 043e 813A      		cpi r24,lo8(-95)
 754 0440 01F0      		breq .+2
 755 0442 00C0      		rjmp .L1
 756               	.LBB73:
 757               	.LBB74:
 758               	.LBB75:
 442:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 759               		.loc 2 442 0
 760 0444 8091 E800 		lds r24,232
 761 0448 877F      		andi r24,lo8(-9)
 762 044a 8093 E800 		sts 232,r24
 763               	.LVL57:
 764               	.LBE75:
 765               	.LBE74:
  98:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				{
 766               		.loc 1 98 0
 767 044e 498D      		ldd r20,Y+25
 768 0450 5A8D      		ldd r21,Y+26
 769 0452 6B8D      		ldd r22,Y+27
 770 0454 7C8D      		ldd r23,Y+28
 771 0456 452B      		or r20,r21
 772 0458 462B      		or r20,r22
 773 045a 472B      		or r20,r23
 774 045c 01F4      		brne .L38
 100:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					MessageHeader->MessageLength = 1;
 775               		.loc 1 100 0
 776 045e 1D8A      		std Y+21,__zero_reg__
 101:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				}
 777               		.loc 1 101 0
 778 0460 41E0      		ldi r20,lo8(1)
 779 0462 50E0      		ldi r21,0
 780 0464 60E0      		ldi r22,0
 781 0466 70E0      		ldi r23,0
 782 0468 498F      		std Y+25,r20
 783 046a 5A8F      		std Y+26,r21
 784 046c 6B8F      		std Y+27,r22
 785 046e 7C8F      		std Y+28,r23
 786               	.L38:
 104:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearOUT();
 787               		.loc 1 104 0
 788 0470 698D      		ldd r22,Y+25
 789 0472 7A8D      		ldd r23,Y+26
 790 0474 CE01      		movw r24,r28
 791 0476 4596      		adiw r24,21
 792 0478 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 793               	.LVL58:
 794               	.LBB76:
 795               	.LBB77:
 455:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 460:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 468:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 796               		.loc 2 469 0
 797 047c 8091 E800 		lds r24,232
 798 0480 8B77      		andi r24,lo8(123)
 799 0482 8093 E800 		sts 232,r24
 800               	.LBE77:
 801               	.LBE76:
 107:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 802               		.loc 1 107 0
 803 0486 198E      		std Y+25,__zero_reg__
 804 0488 1A8E      		std Y+26,__zero_reg__
 805 048a 1B8E      		std Y+27,__zero_reg__
 806 048c 1C8E      		std Y+28,__zero_reg__
 807 048e 00C0      		rjmp .L1
 808               	.LVL59:
 809               	.L34:
 810               	.LBE73:
 811               	.LBB78:
 812               	.LBB70:
 813               	.LBB69:
 274:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->MessageLength          += ResponseSize;
 814               		.loc 1 274 0
 815 0490 19A2      		std Y+33,__zero_reg__
 816 0492 1AA2      		std Y+34,__zero_reg__
 817 0494 1BA2      		std Y+35,__zero_reg__
 818 0496 1CA2      		std Y+36,__zero_reg__
 275:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							
 819               		.loc 1 275 0
 820 0498 20E0      		ldi r18,0
 821 049a 30E0      		ldi r19,0
 822 049c 498D      		ldd r20,Y+25
 823 049e 5A8D      		ldd r21,Y+26
 824 04a0 6B8D      		ldd r22,Y+27
 825 04a2 7C8D      		ldd r23,Y+28
 826 04a4 400F      		add r20,r16
 827 04a6 511F      		adc r21,r17
 828 04a8 621F      		adc r22,r18
 829 04aa 731F      		adc r23,r19
 830 04ac 498F      		std Y+25,r20
 831 04ae 5A8F      		std Y+26,r21
 832 04b0 6B8F      		std Y+27,r22
 833 04b2 7C8F      		std Y+28,r23
 277:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = (sizeof(RNDIS_Query_Complete_t) - sizeof(RNDIS_Messag
 834               		.loc 1 277 0
 835 04b4 0DA3      		std Y+37,r16
 836 04b6 1EA3      		std Y+38,r17
 837 04b8 2FA3      		std Y+39,r18
 838 04ba 38A7      		std Y+40,r19
 278:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 839               		.loc 1 278 0
 840 04bc 40E1      		ldi r20,lo8(16)
 841 04be 50E0      		ldi r21,0
 842 04c0 60E0      		ldi r22,0
 843 04c2 70E0      		ldi r23,0
 844 04c4 49A7      		std Y+41,r20
 845 04c6 5AA7      		std Y+42,r21
 846 04c8 6BA7      		std Y+43,r22
 847 04ca 7CA7      		std Y+44,r23
 848 04cc 00C0      		rjmp .L5
 849               	.LVL60:
 850               	.L13:
 282:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 851               		.loc 1 282 0
 852 04ce 4BEB      		ldi r20,lo8(-69)
 853 04d0 50E0      		ldi r21,0
 854 04d2 60E0      		ldi r22,0
 855 04d4 70EC      		ldi r23,lo8(-64)
 856 04d6 49A3      		std Y+33,r20
 857 04d8 5AA3      		std Y+34,r21
 858 04da 6BA3      		std Y+35,r22
 859 04dc 7CA3      		std Y+36,r23
 860               	.LVL61:
 284:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = 0;
 861               		.loc 1 284 0
 862 04de 1DA2      		std Y+37,__zero_reg__
 863 04e0 1EA2      		std Y+38,__zero_reg__
 864 04e2 1FA2      		std Y+39,__zero_reg__
 865 04e4 18A6      		std Y+40,__zero_reg__
 866               	.LVL62:
 285:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 867               		.loc 1 285 0
 868 04e6 19A6      		std Y+41,__zero_reg__
 869 04e8 1AA6      		std Y+42,__zero_reg__
 870 04ea 1BA6      		std Y+43,__zero_reg__
 871 04ec 1CA6      		std Y+44,__zero_reg__
 872               	.LVL63:
 873 04ee 00C0      		rjmp .L5
 874               	.LVL64:
 875               	.L1:
 876               	/* epilogue start */
 877               	.LBE69:
 878               	.LBE70:
 879               	.LBE78:
 112:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 880               		.loc 1 112 0
 881 04f0 DF91      		pop r29
 882 04f2 CF91      		pop r28
 883 04f4 1F91      		pop r17
 884 04f6 0F91      		pop r16
 885 04f8 0895      		ret
 886               		.cfi_endproc
 887               	.LFE65:
 889               		.section	.text.RNDIS_Device_ConfigureEndpoints,"ax",@progbits
 890               	.global	RNDIS_Device_ConfigureEndpoints
 892               	RNDIS_Device_ConfigureEndpoints:
 893               	.LFB66:
 115:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 894               		.loc 1 115 0
 895               		.cfi_startproc
 896               	.LVL65:
 897 0000 0F93      		push r16
 898               	.LCFI4:
 899               		.cfi_def_cfa_offset 3
 900               		.cfi_offset 16, -2
 901 0002 1F93      		push r17
 902               	.LCFI5:
 903               		.cfi_def_cfa_offset 4
 904               		.cfi_offset 17, -3
 905 0004 CF93      		push r28
 906               	.LCFI6:
 907               		.cfi_def_cfa_offset 5
 908               		.cfi_offset 28, -4
 909 0006 DF93      		push r29
 910               	.LCFI7:
 911               		.cfi_def_cfa_offset 6
 912               		.cfi_offset 29, -5
 913               	/* prologue: function */
 914               	/* frame size = 0 */
 915               	/* stack size = 4 */
 916               	.L__stack_usage = 4
 917 0008 EC01      		movw r28,r24
 116:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 918               		.loc 1 116 0
 919 000a FC01      		movw r30,r24
 920 000c 7596      		adiw r30,21
 921 000e 84E4      		ldi r24,lo8(68)
 922 0010 9CE0      		ldi r25,lo8(12)
 923               	.LVL66:
 924 0012 DF01      		movw r26,r30
 925 0014 9C01      		movw r18,r24
 926               		0:
 927 0016 1D92      		st X+,__zero_reg__
 928 0018 2150      		subi r18,1
 929 001a 3040      		sbci r19,0
 930 001c 01F4      		brne 0b
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 931               		.loc 1 118 0
 932 001e 2A81      		ldd r18,Y+2
 933 0020 3B81      		ldd r19,Y+3
 934 0022 8C81      		ldd r24,Y+4
 935 0024 8823      		tst r24
 936 0026 01F0      		breq .L63
 937 0028 14E0      		ldi r17,lo8(4)
 938 002a 00C0      		rjmp .L57
 939               	.L63:
 940 002c 10E0      		ldi r17,0
 941               	.L57:
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 942               		.loc 1 118 0 is_stmt 0 discriminator 3
 943 002e 0981      		ldd r16,Y+1
 944               	.LVL67:
 945               	.LBB97:
 946               	.LBB98:
 470:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 474:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 475:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 489:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 491:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 492:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 499:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 501:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 502:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 511:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 513:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 514:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 518:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 520:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 521:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 528:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 530:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 531:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 538:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 540:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 541:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 550:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
 551:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 552:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 553:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 562:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 563:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 564:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 565:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 566:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 567:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 568:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 569:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
 570:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void)
 571:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 572:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 573:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 574:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 575:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 576:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 577:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 578:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 579:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 580:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 581:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 582:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 583:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 584:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 585:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void)
 586:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 587:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 588:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 589:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 590:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 591:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 592:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 593:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 594:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 595:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 596:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 597:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 598:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 599:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 600:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 601:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 602:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 603:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 604:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 605:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 606:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 607:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void)
 608:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 609:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 610:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 611:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 612:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 613:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 614:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 615:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 616:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 617:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 618:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 619:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 620:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 621:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 622:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 623:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 624:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 625:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 626:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 627:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 628:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 629:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
 630:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 631:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 632:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 633:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 634:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 635:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in big endian format, for IN
 636:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 637:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 638:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 639:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 640:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 641:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 642:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 643:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word)
 644:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 645:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 646:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 647:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 648:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 649:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints.
 650:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 651:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 652:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 653:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void) ATTR_ALWAYS_INLINE;
 654:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void)
 655:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 656:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 657:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 658:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 659:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 660:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 661:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 662:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in little endian format, for OU
 663:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 664:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 665:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 666:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 667:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 668:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 669:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 670:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void)
 671:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 672:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 673:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 674:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 675:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 676:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 677:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 678:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 679:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 680:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 681:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 682:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 683:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 684:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 685:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 686:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in big endian format, for OUT
 687:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 688:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 689:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 690:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 691:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 692:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 693:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 694:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void)
 695:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 696:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 697:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 698:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 699:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 700:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 701:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 702:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 703:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 704:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 705:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 706:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 707:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 708:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 709:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 710:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in little endian format, for IN
 711:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 712:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 713:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 714:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 715:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 716:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 717:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 718:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord)
 719:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 720:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 721:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 722:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 723:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 724:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 725:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 726:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in big endian format, for IN
 727:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 728:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 729:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 730:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 731:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 732:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 733:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 734:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
 735:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 736:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 737:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 738:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 739:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 740:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 741:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 742:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards four bytes from the currently selected endpoint's bank, for OUT direction endpoints
 743:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 744:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 745:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 746:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void) ATTR_ALWAYS_INLINE;
 747:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void)
 748:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 749:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 750:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 751:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 752:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 753:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 754:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 755:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 756:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 757:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* External Variables: */
 758:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Global indicating the maximum packet size of the default control endpoint located at address
 759:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  0 in the device. This value is set to the value indicated in the device descriptor in the us
 760:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  project once the USB interface is initialized into device mode.
 761:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 762:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If space is an issue, it is possible to fix this to a static value by defining the control
 763:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint size in the FIXED_CONTROL_ENDPOINT_SIZE token passed to the compiler in the makefil
 764:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  via the -D switch. When a fixed control endpoint size is used, the size is no longer dynamic
 765:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  read from the descriptors at runtime and instead fixed to the given value. When used, it is
 766:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  important that the descriptor control endpoint size value matches the size given as the
 767:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  FIXED_CONTROL_ENDPOINT_SIZE token - it is recommended that the FIXED_CONTROL_ENDPOINT_SIZE t
 768:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  be used in the descriptors to ensure this.
 769:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 770:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This variable should be treated as read-only in the user application, and never manual
 771:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        changed in value.
 772:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 773:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 774:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				extern uint8_t USB_ControlEndpointSize;
 775:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 776:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define USB_ControlEndpointSize FIXED_CONTROL_ENDPOINT_SIZE
 777:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 778:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 779:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 780:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
 781:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM     , StreamCallbackPtr_t Callback
 782:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 783:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM
 784:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 785:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 786:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 787:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Endpoints should be allocated in ascending order by their address in the
 788:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  device (i.e. endpoint 1 should be configured before endpoint 2 and so on) to prevent fragmen
 789:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  of the USB FIFO memory.
 790:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 791:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The endpoint type may be one of the EP_TYPE_* macros listed in LowLevel.h and the direction
 792:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  may be either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT_DIR_IN.
 793:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 794:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The bank size must indicate the maximum packet size that the endpoint can handle. Different
 795:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint numbers can handle different maximum packet sizes - refer to the chosen USB AVR's
 796:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  datasheet to determine the maximum bank size for each endpoint.
 797:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 798:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The banking mode may be either \ref ENDPOINT_BANK_SINGLE or \ref ENDPOINT_BANK_DOUBLE.
 799:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 800:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 801:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 802:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 803:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 804:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will select the specified endpoint, and the endpoint will remain selected
 805:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        once the routine completes regardless of if the endpoint configuration succeeds.
 806:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 807:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 808:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 809:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint(const uint8_t  Number,
 810:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Type,
 811:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Direction,
 812:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint16_t Size,
 813:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Banks);
 814:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 815:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Spin-loops until the currently selected non-control endpoint is ready for the next packet of
 816:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  to be read or written to it.
 817:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 818:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be called on CONTROL type endpoints.
 819:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 820:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 821:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 822:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_WaitUntilReady_ErrorCodes_t enum.
 823:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 824:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_WaitUntilReady(void);
 825:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 826:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Completes the status stage of a control transfer on a CONTROL type endpoint automatically,
 827:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  with respect to the data direction. This is a convenience function which can be used to
 828:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  simplify user control request handling.
 829:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 830:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearStatusStage(void);
 831:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 832:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads and discards the given number of bytes from the endpoint from the given buffer,
 833:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 834:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 835:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 836:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the next
 837:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  packet is ready, allowing for early aborts of stream transfers.
 838:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 839:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 840:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 841:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 842:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 843:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 844:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 845:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 846:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 847:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to send via the currently selected endpoint.
 848:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 849:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 850:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 851:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 852:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Discard_Stream(uint16_t Length
 853:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM);
 854:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 855:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in little endian,
 856:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 857:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 858:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 859:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 860:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 861:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 862:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 863:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 864:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 865:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 866:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 867:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 868:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 869:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 870:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 871:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 872:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 873:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 874:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 875:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 876:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_LE(const void* Buffer,
 877:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 878:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 879:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 880:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_LE().
 881:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 882:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 883:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 884:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 885:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 886:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 887:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 888:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 889:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 890:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_LE(const void* Buffer,
 891:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 892:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 893:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 894:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_LE().
 895:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 896:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 897:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 898:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 899:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 900:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 901:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 902:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 903:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 904:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 905:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 906:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_LE(const void* Buffer,
 907:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 908:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 909:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 910:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in big endian,
 911:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 912:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 913:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 914:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 915:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 916:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 917:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 918:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 919:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 920:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 921:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 922:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 923:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 924:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 925:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 926:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 927:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 928:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 929:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 930:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 931:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_BE(const void* Buffer,
 932:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 933:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 934:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 935:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_BE().
 936:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 937:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 938:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 939:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 940:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 941:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 942:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 943:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 944:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 945:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_BE(const void* Buffer,
 946:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 947:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 948:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 949:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_BE().
 950:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 951:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 952:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 953:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 954:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 955:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 956:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 957:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 958:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 959:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 960:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 961:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_BE(const void* Buffer,
 962:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 963:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 964:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 965:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in little endian,
 966:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 967:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 968:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 969:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
 970:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
 971:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 972:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 973:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 974:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 975:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 976:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 977:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 978:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 979:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 980:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
 981:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 982:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 983:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 984:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 985:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 986:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_LE(void* Buffer,
 987:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
 988:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 989:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 990:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_LE().
 991:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 992:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 993:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 994:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
 995:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 996:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 997:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 998:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 999:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1000:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_LE(void* Buffer,
1001:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1002:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1003:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1004:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in big endian,
1005:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
1006:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
1007:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
1008:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
1009:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
1010:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1011:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
1012:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
1013:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
1014:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1015:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
1016:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1017:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1018:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1019:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
1020:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1021:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1022:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1023:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1024:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1025:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_BE(void* Buffer,
1026:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
1027:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1028:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1029:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_BE().
1030:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1031:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1032:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1033:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
1034:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1035:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1036:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1037:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1038:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1039:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_BE(void* Buffer,
1040:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1041:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1042:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1043:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in littl
1044:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1045:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1046:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1047:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1048:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1049:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1050:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1051:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1052:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1053:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1054:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1055:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1056:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1057:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1058:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1059:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1060:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1061:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1062:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1063:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1064:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_LE(const void* Buffer,
1065:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1066:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1067:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of Endpoint_Write_Control_Stream_LE.
1068:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1069:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1070:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1071:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1072:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1073:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1074:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1075:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1076:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1077:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1078:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1079:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1080:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1081:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1082:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1083:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1084:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1085:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_LE(const void* Buffer,
1086:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1087:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1088:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_LE().
1089:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1090:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1091:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1092:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1093:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1094:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1095:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1096:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1097:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1098:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1099:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1100:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1101:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1102:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1103:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1104:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1105:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1106:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1107:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1108:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_LE(const void* Buffer,
1109:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1110:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1111:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in big e
1112:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1113:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1114:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1115:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1116:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1117:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1118:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1119:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1120:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1121:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1122:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1123:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1124:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1125:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1126:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1127:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1128:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1129:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1130:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1131:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1132:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_BE(const void* Buffer,
1133:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1134:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1135:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1136:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1137:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1138:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1139:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1140:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1141:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1142:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1143:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1144:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1145:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1146:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1147:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1148:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1149:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1150:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1151:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1152:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1153:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_BE(const void* Buffer,
1154:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1155:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1156:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1157:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1158:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1159:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1160:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1161:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1162:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1163:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1164:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1165:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1166:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1167:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1168:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1169:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1170:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1171:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1172:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1173:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1174:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1175:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1176:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_BE(const void* Buffer,
1177:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1178:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1179:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in little en
1180:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1181:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1182:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1183:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1184:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1185:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1186:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1187:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1188:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1189:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1190:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1191:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1192:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1193:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1194:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1195:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1196:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1197:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1198:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1199:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1200:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_LE(void* Buffer,
1201:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1202:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1203:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_LE().
1204:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1205:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1206:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1207:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1208:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1209:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1210:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1211:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1212:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1213:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1214:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1215:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1216:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1217:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1218:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1219:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1220:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1221:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_LE(void* Buffer,
1222:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1223:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1224:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in big endia
1225:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1226:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1227:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1228:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1229:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1230:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1231:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1232:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1233:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1234:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1235:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1236:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1237:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1238:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1239:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1240:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1241:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1242:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1243:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1244:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1245:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_BE(void* Buffer,
1246:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1247:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1248:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_BE().
1249:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1250:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1251:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1252:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1253:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1254:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1255:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1256:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1257:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1258:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1259:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1260:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1261:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1262:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1263:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1264:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1265:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1266:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_BE(void* Buffer,
1267:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1268:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1269:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
1270:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
1271:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
1272:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(n)               _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## n)
1273:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(details)        _ENDPOINT_GET_MAXSIZE3(details)
1274:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(maxsize, db)    maxsize
1275:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1276:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK(n)            _ENDPOINT_GET_DOUBLEBANK2(ENDPOINT_DETAILS_EP ## 
1277:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK2(details)     _ENDPOINT_GET_DOUBLEBANK3(details)
1278:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK3(maxsize, db) db
1279:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1280:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
1281:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1282:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, true
1283:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  true
1284:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1285:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true
1286:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  true
1287:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  true
1288:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
1289:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1290:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  false
1291:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  false
1292:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1293:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true			
1294:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
1295:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1296:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define Endpoint_ConfigureEndpoint(Number, Type, Direction, Size, Banks)                        
1297:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                     (__builtin_constant_p(Size) ? Endpoint_ConfigureEndpointStatic((Number),   
1298:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Type),     
1299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Direction),
1300:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    Size, Banks)
1301:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                   Endpoint_ConfigureEndpointDynamic((Number),  
1302:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Type),    
1303:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Direction)
1304:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     Size, Banks
1305:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1306:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
1307:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			void    Endpoint_ClearEndpoints(void);
1308:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size);
1309:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			bool    Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
1310:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG0XData,
1311:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG1XData);			
1312:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1313:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
1314:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
1315:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
1316:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1317:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
1318:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
1319:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
1320:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
1321:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
1322:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
1323:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
1324:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				}
1325:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
1326:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
1327:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
1328:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1329:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpointStatic(const uint8_t Number,
1330:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Type,
1331:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Direction,
1332:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint16_t Size,
1333:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Banks)
1334:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1335:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
1336:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
1337:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
1338:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1339:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpointDynamic(const uint8_t Number,
1340:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Type,
1341:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Direction,
1342:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint16_t Size,
1343:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Banks)
1344:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
1346:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 947               		.loc 2 1346 0 is_stmt 1 discriminator 3
 948 0030 C901      		movw r24,r18
 949 0032 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 950               	.LVL68:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 951               		.loc 2 1345 0 discriminator 3
 952 0036 412F      		mov r20,r17
 953 0038 482B      		or r20,r24
 954 003a 4260      		ori r20,lo8(2)
 955 003c 61E8      		ldi r22,lo8(-127)
 956 003e 802F      		mov r24,r16
 957 0040 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 958               	.LVL69:
 959               	.LBE98:
 960               	.LBE97:
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 961               		.loc 1 118 0 discriminator 3
 962 0044 8823      		tst r24
 963 0046 01F0      		breq .L59
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 964               		.loc 1 125 0
 965 0048 2E81      		ldd r18,Y+6
 966 004a 3F81      		ldd r19,Y+7
 967 004c 8885      		ldd r24,Y+8
 968 004e 8823      		tst r24
 969 0050 01F0      		breq .L64
 970 0052 14E0      		ldi r17,lo8(4)
 971               	.LVL70:
 972 0054 00C0      		rjmp .L60
 973               	.LVL71:
 974               	.L64:
 975 0056 10E0      		ldi r17,0
 976               	.LVL72:
 977               	.L60:
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 978               		.loc 1 125 0 is_stmt 0 discriminator 3
 979 0058 0D81      		ldd r16,Y+5
 980               	.LVL73:
 981               	.LBB99:
 982               	.LBB100:
 983               		.loc 2 1346 0 is_stmt 1 discriminator 3
 984 005a C901      		movw r24,r18
 985 005c 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 986               	.LVL74:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 987               		.loc 2 1345 0 discriminator 3
 988 0060 412F      		mov r20,r17
 989 0062 482B      		or r20,r24
 990 0064 4260      		ori r20,lo8(2)
 991 0066 60E8      		ldi r22,lo8(-128)
 992 0068 802F      		mov r24,r16
 993 006a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 994               	.LVL75:
 995               	.LBE100:
 996               	.LBE99:
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 997               		.loc 1 125 0 discriminator 3
 998 006e 8823      		tst r24
 999 0070 01F0      		breq .L59
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 1000               		.loc 1 132 0
 1001 0072 2A85      		ldd r18,Y+10
 1002 0074 3B85      		ldd r19,Y+11
 1003 0076 8C85      		ldd r24,Y+12
 1004 0078 8823      		tst r24
 1005 007a 01F0      		breq .L65
 1006 007c 14E0      		ldi r17,lo8(4)
 1007               	.LVL76:
 1008 007e 00C0      		rjmp .L62
 1009               	.LVL77:
 1010               	.L65:
 1011 0080 10E0      		ldi r17,0
 1012               	.LVL78:
 1013               	.L62:
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 1014               		.loc 1 132 0 is_stmt 0 discriminator 3
 1015 0082 C985      		ldd r28,Y+9
 1016               	.LVL79:
 1017               	.LBB101:
 1018               	.LBB102:
 1019               		.loc 2 1346 0 is_stmt 1 discriminator 3
 1020 0084 C901      		movw r24,r18
 1021 0086 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 1022               	.LVL80:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 1023               		.loc 2 1345 0 discriminator 3
 1024 008a 412F      		mov r20,r17
 1025 008c 482B      		or r20,r24
 1026 008e 4260      		ori r20,lo8(2)
 1027 0090 61EC      		ldi r22,lo8(-63)
 1028 0092 8C2F      		mov r24,r28
 1029               	/* epilogue start */
 1030               	.LBE102:
 1031               	.LBE101:
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1032               		.loc 1 140 0 discriminator 3
 1033 0094 DF91      		pop r29
 1034 0096 CF91      		pop r28
 1035               	.LVL81:
 1036 0098 1F91      		pop r17
 1037               	.LVL82:
 1038 009a 0F91      		pop r16
 1039               	.LVL83:
 1040               	.LBB104:
 1041               	.LBB103:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 1042               		.loc 2 1345 0 discriminator 3
 1043 009c 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1044               	.LVL84:
 1045               	.L59:
 1046               	.LBE103:
 1047               	.LBE104:
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1048               		.loc 1 140 0
 1049 00a0 80E0      		ldi r24,0
 1050               	/* epilogue start */
 1051 00a2 DF91      		pop r29
 1052 00a4 CF91      		pop r28
 1053               	.LVL85:
 1054 00a6 1F91      		pop r17
 1055 00a8 0F91      		pop r16
 1056 00aa 0895      		ret
 1057               		.cfi_endproc
 1058               	.LFE66:
 1060               		.section	.rodata
 1061               	.LC0:
 1062 0000 A1        		.byte	-95
 1063 0001 01        		.byte	1
 1064 0002 0000      		.word	0
 1065 0004 0000      		.word	0
 1066 0006 0000      		.word	0
 1067               		.section	.text.RNDIS_Device_USBTask,"ax",@progbits
 1068               	.global	RNDIS_Device_USBTask
 1070               	RNDIS_Device_USBTask:
 1071               	.LFB67:
 143:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 1072               		.loc 1 143 0
 1073               		.cfi_startproc
 1074               	.LVL86:
 1075 0000 8F92      		push r8
 1076               	.LCFI8:
 1077               		.cfi_def_cfa_offset 3
 1078               		.cfi_offset 8, -2
 1079 0002 9F92      		push r9
 1080               	.LCFI9:
 1081               		.cfi_def_cfa_offset 4
 1082               		.cfi_offset 9, -3
 1083 0004 AF92      		push r10
 1084               	.LCFI10:
 1085               		.cfi_def_cfa_offset 5
 1086               		.cfi_offset 10, -4
 1087 0006 BF92      		push r11
 1088               	.LCFI11:
 1089               		.cfi_def_cfa_offset 6
 1090               		.cfi_offset 11, -5
 1091 0008 EF92      		push r14
 1092               	.LCFI12:
 1093               		.cfi_def_cfa_offset 7
 1094               		.cfi_offset 14, -6
 1095 000a FF92      		push r15
 1096               	.LCFI13:
 1097               		.cfi_def_cfa_offset 8
 1098               		.cfi_offset 15, -7
 1099 000c 0F93      		push r16
 1100               	.LCFI14:
 1101               		.cfi_def_cfa_offset 9
 1102               		.cfi_offset 16, -8
 1103 000e 1F93      		push r17
 1104               	.LCFI15:
 1105               		.cfi_def_cfa_offset 10
 1106               		.cfi_offset 17, -9
 1107 0010 CF93      		push r28
 1108               	.LCFI16:
 1109               		.cfi_def_cfa_offset 11
 1110               		.cfi_offset 28, -10
 1111 0012 DF93      		push r29
 1112               	.LCFI17:
 1113               		.cfi_def_cfa_offset 12
 1114               		.cfi_offset 29, -11
 1115 0014 CDB7      		in r28,__SP_L__
 1116 0016 DEB7      		in r29,__SP_H__
 1117               	.LCFI18:
 1118               		.cfi_def_cfa_register 28
 1119 0018 AC97      		sbiw r28,44
 1120               	.LCFI19:
 1121               		.cfi_def_cfa_offset 56
 1122 001a 0FB6      		in __tmp_reg__,__SREG__
 1123 001c F894      		cli
 1124 001e DEBF      		out __SP_H__,r29
 1125 0020 0FBE      		out __SREG__,__tmp_reg__
 1126 0022 CDBF      		out __SP_L__,r28
 1127               	/* prologue: function */
 1128               	/* frame size = 44 */
 1129               	/* stack size = 54 */
 1130               	.L__stack_usage = 54
 1131 0024 8C01      		movw r16,r24
 144:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
 1132               		.loc 1 144 0
 1133 0026 8EB3      		in r24,0x1e
 1134               	.LVL87:
 1135 0028 8430      		cpi r24,lo8(4)
 1136 002a 01F0      		breq .+2
 1137 002c 00C0      		rjmp .L69
 1138               	.LVL88:
 149:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1139               		.loc 1 149 0
 1140 002e F801      		movw r30,r16
 1141 0030 8185      		ldd r24,Z+9
 1142               	.LVL89:
 1143               	.LBB105:
 1144               	.LBB106:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1145               		.loc 2 299 0
 1146 0032 8093 E900 		sts 233,r24
 1147               	.LBE106:
 1148               	.LBE105:
 1149               	.LBB107:
 1150               	.LBB108:
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1151               		.loc 2 405 0
 1152 0036 8091 E800 		lds r24,232
 1153               	.LVL90:
 1154               	.LBE108:
 1155               	.LBE107:
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1156               		.loc 1 151 0
 1157 003a 80FF      		sbrs r24,0
 1158 003c 00C0      		rjmp .L72
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1159               		.loc 1 151 0 is_stmt 0 discriminator 1
 1160 003e 7801      		movw r14,r16
 1161 0040 F5E9      		ldi r31,-107
 1162 0042 EF0E      		add r14,r31
 1163 0044 F11C      		adc r15,__zero_reg__
 1164 0046 F701      		movw r30,r14
 1165 0048 8081      		ld r24,Z
 1166 004a 8823      		tst r24
 1167 004c 01F0      		breq .L72
 1168               	.LBB109:
 153:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 1169               		.loc 1 153 0 is_stmt 1
 1170 004e 88E0      		ldi r24,lo8(8)
 1171 0050 E0E0      		ldi r30,lo8(.LC0)
 1172 0052 F0E0      		ldi r31,hi8(.LC0)
 1173 0054 DE01      		movw r26,r28
 1174 0056 1196      		adiw r26,1
 1175               		0:
 1176 0058 0190      		ld r0,Z+
 1177 005a 0D92      		st X+,r0
 1178 005c 8A95      		dec r24
 1179 005e 01F4      		brne 0b
 162:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1180               		.loc 1 162 0
 1181 0060 40E0      		ldi r20,0
 1182 0062 50E0      		ldi r21,0
 1183 0064 68E0      		ldi r22,lo8(8)
 1184 0066 70E0      		ldi r23,0
 1185 0068 CE01      		movw r24,r28
 1186 006a 0196      		adiw r24,1
 1187 006c 0E94 0000 		call Endpoint_Write_Stream_LE
 1188               	.LVL91:
 1189               	.LBB110:
 1190               	.LBB111:
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1191               		.loc 2 454 0
 1192 0070 8091 E800 		lds r24,232
 1193 0074 8E77      		andi r24,lo8(126)
 1194 0076 8093 E800 		sts 232,r24
 1195               	.LBE111:
 1196               	.LBE110:
 166:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 1197               		.loc 1 166 0
 1198 007a F701      		movw r30,r14
 1199 007c 1082      		st Z,__zero_reg__
 1200               	.L72:
 1201               	.LBE109:
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1202               		.loc 1 169 0
 1203 007e F801      		movw r30,r16
 1204 0080 EA56      		subi r30,106
 1205 0082 FF4F      		sbci r31,-1
 1206 0084 8081      		ld r24,Z
 1207 0086 8230      		cpi r24,lo8(2)
 1208 0088 01F0      		breq .+2
 1209 008a 00C0      		rjmp .L69
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1210               		.loc 1 169 0 is_stmt 0 discriminator 1
 1211 008c F801      		movw r30,r16
 1212 008e 818D      		ldd r24,Z+25
 1213 0090 928D      		ldd r25,Z+26
 1214 0092 A38D      		ldd r26,Z+27
 1215 0094 B48D      		ldd r27,Z+28
 1216 0096 892B      		or r24,r25
 1217 0098 8A2B      		or r24,r26
 1218 009a 8B2B      		or r24,r27
 1219 009c 01F0      		breq .+2
 1220 009e 00C0      		rjmp .L69
 1221               	.LBB112:
 173:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1222               		.loc 1 173 0 is_stmt 1
 1223 00a0 8581      		ldd r24,Z+5
 1224               	.LVL92:
 1225               	.LBB113:
 1226               	.LBB114:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1227               		.loc 2 299 0
 1228 00a2 8093 E900 		sts 233,r24
 1229               	.LBE114:
 1230               	.LBE113:
 1231               	.LBB115:
 1232               	.LBB116:
 417:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1233               		.loc 2 417 0
 1234 00a6 8091 E800 		lds r24,232
 1235               	.LVL93:
 1236               	.LBE116:
 1237               	.LBE115:
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1238               		.loc 1 175 0
 1239 00aa 82FF      		sbrs r24,2
 1240 00ac 00C0      		rjmp .L74
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1241               		.loc 1 175 0 is_stmt 0 discriminator 1
 1242 00ae 7801      		movw r14,r16
 1243 00b0 F7E8      		ldi r31,-121
 1244 00b2 EF1A      		sub r14,r31
 1245 00b4 F9EF      		ldi r31,-7
 1246 00b6 FF0A      		sbc r15,r31
 1247 00b8 F701      		movw r30,r14
 1248 00ba 8081      		ld r24,Z
 1249 00bc 8111      		cpse r24,__zero_reg__
 1250 00be 00C0      		rjmp .L74
 177:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1251               		.loc 1 177 0 is_stmt 1
 1252 00c0 40E0      		ldi r20,0
 1253 00c2 50E0      		ldi r21,0
 1254 00c4 6CE2      		ldi r22,lo8(44)
 1255 00c6 70E0      		ldi r23,0
 1256 00c8 CE01      		movw r24,r28
 1257 00ca 0196      		adiw r24,1
 1258 00cc 0E94 0000 		call Endpoint_Read_Stream_LE
 1259               	.LVL94:
 179:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 1260               		.loc 1 179 0
 1261 00d0 6D85      		ldd r22,Y+13
 1262 00d2 7E85      		ldd r23,Y+14
 1263 00d4 8F85      		ldd r24,Y+15
 1264 00d6 9889      		ldd r25,Y+16
 1265 00d8 6D3D      		cpi r22,-35
 1266 00da F5E0      		ldi r31,5
 1267 00dc 7F07      		cpc r23,r31
 1268 00de 8105      		cpc r24,__zero_reg__
 1269 00e0 9105      		cpc r25,__zero_reg__
 1270 00e2 00F0      		brlo .L75
 1271               	.LBB117:
 1272               	.LBB118:
 489:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1273               		.loc 2 489 0
 1274 00e4 8091 EB00 		lds r24,235
 1275 00e8 8062      		ori r24,lo8(32)
 1276 00ea 8093 EB00 		sts 235,r24
 1277 00ee 00C0      		rjmp .L69
 1278               	.L75:
 1279               	.LBE118:
 1280               	.LBE117:
 185:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1281               		.loc 1 185 0
 1282 00f0 40E0      		ldi r20,0
 1283 00f2 50E0      		ldi r21,0
 1284 00f4 C801      		movw r24,r16
 1285 00f6 8556      		subi r24,101
 1286 00f8 9F4F      		sbci r25,-1
 1287 00fa 0E94 0000 		call Endpoint_Read_Stream_LE
 1288               	.LVL95:
 1289               	.LBB119:
 1290               	.LBB120:
 469:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1291               		.loc 2 469 0
 1292 00fe 8091 E800 		lds r24,232
 1293 0102 8B77      		andi r24,lo8(123)
 1294 0104 8093 E800 		sts 232,r24
 1295               	.LBE120:
 1296               	.LBE119:
 189:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1297               		.loc 1 189 0
 1298 0108 8D85      		ldd r24,Y+13
 1299 010a 9E85      		ldd r25,Y+14
 1300 010c F801      		movw r30,r16
 1301 010e E958      		subi r30,-119
 1302 0110 F94F      		sbci r31,-7
 1303 0112 9183      		std Z+1,r25
 1304 0114 8083      		st Z,r24
 191:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 1305               		.loc 1 191 0
 1306 0116 81E0      		ldi r24,lo8(1)
 1307 0118 F701      		movw r30,r14
 1308 011a 8083      		st Z,r24
 1309               	.L74:
 194:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 1310               		.loc 1 194 0
 1311 011c F801      		movw r30,r16
 1312 011e 8181      		ldd r24,Z+1
 1313               	.LVL96:
 1314               	.LBB121:
 1315               	.LBB122:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1316               		.loc 2 299 0
 1317 0120 8093 E900 		sts 233,r24
 1318               	.LBE122:
 1319               	.LBE121:
 1320               	.LBB123:
 1321               	.LBB124:
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1322               		.loc 2 405 0
 1323 0124 8091 E800 		lds r24,232
 1324               	.LVL97:
 1325               	.LBE124:
 1326               	.LBE123:
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1327               		.loc 1 196 0
 1328 0128 80FF      		sbrs r24,0
 1329 012a 00C0      		rjmp .L69
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1330               		.loc 1 196 0 is_stmt 0 discriminator 1
 1331 012c 7801      		movw r14,r16
 1332 012e F8EA      		ldi r31,-88
 1333 0130 EF1A      		sub r14,r31
 1334 0132 F3EF      		ldi r31,-13
 1335 0134 FF0A      		sbc r15,r31
 1336 0136 F701      		movw r30,r14
 1337 0138 8081      		ld r24,Z
 1338 013a 8823      		tst r24
 1339 013c 01F4      		brne .+2
 1340 013e 00C0      		rjmp .L69
 198:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1341               		.loc 1 198 0 is_stmt 1
 1342 0140 CE01      		movw r24,r28
 1343 0142 0196      		adiw r24,1
 1344 0144 2CE2      		ldi r18,lo8(44)
 1345 0146 FC01      		movw r30,r24
 1346               		0:
 1347 0148 1192      		st Z+,__zero_reg__
 1348 014a 2A95      		dec r18
 1349 014c 01F4      		brne 0b
 200:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageLength = (sizeof(RNDIS_Packet_Message_t) + RNDISInterfaceInfo->State.Fr
 1350               		.loc 1 200 0
 1351 014e 41E0      		ldi r20,lo8(1)
 1352 0150 50E0      		ldi r21,0
 1353 0152 60E0      		ldi r22,0
 1354 0154 70E0      		ldi r23,0
 1355 0156 4983      		std Y+1,r20
 1356 0158 5A83      		std Y+2,r21
 1357 015a 6B83      		std Y+3,r22
 1358 015c 7C83      		std Y+4,r23
 1359               	.LVL98:
 201:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataOffset    = (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_
 1360               		.loc 1 201 0
 1361 015e F801      		movw r30,r16
 1362 0160 EA5A      		subi r30,-86
 1363 0162 F34F      		sbci r31,-13
 1364 0164 4081      		ld r20,Z
 1365 0166 5181      		ldd r21,Z+1
 1366 0168 4A01      		movw r8,r20
 1367 016a FCE2      		ldi r31,44
 1368 016c 8F0E      		add r8,r31
 1369 016e 911C      		adc r9,__zero_reg__
 1370 0170 A12C      		mov r10,__zero_reg__
 1371 0172 B12C      		mov r11,__zero_reg__
 1372 0174 8D82      		std Y+5,r8
 1373 0176 9E82      		std Y+6,r9
 1374 0178 AF82      		std Y+7,r10
 1375 017a B886      		std Y+8,r11
 202:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataLength    = RNDISInterfaceInfo->State.FrameOUT.FrameLength;
 1376               		.loc 1 202 0
 1377 017c 24E2      		ldi r18,lo8(36)
 1378 017e 822E      		mov r8,r18
 1379 0180 912C      		mov r9,__zero_reg__
 1380 0182 A12C      		mov r10,__zero_reg__
 1381 0184 B12C      		mov r11,__zero_reg__
 1382 0186 8986      		std Y+9,r8
 1383 0188 9A86      		std Y+10,r9
 1384 018a AB86      		std Y+11,r10
 1385 018c BC86      		std Y+12,r11
 203:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1386               		.loc 1 203 0
 1387 018e 60E0      		ldi r22,0
 1388 0190 70E0      		ldi r23,0
 1389 0192 4D87      		std Y+13,r20
 1390 0194 5E87      		std Y+14,r21
 1391 0196 6F87      		std Y+15,r22
 1392 0198 788B      		std Y+16,r23
 205:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(RNDISInterfaceInfo->State.FrameOUT.FrameData, RNDISPacketHeader.DataLen
 1393               		.loc 1 205 0
 1394 019a 40E0      		ldi r20,0
 1395 019c 50E0      		ldi r21,0
 1396 019e 6CE2      		ldi r22,lo8(44)
 1397 01a0 70E0      		ldi r23,0
 1398 01a2 0E94 0000 		call Endpoint_Write_Stream_LE
 1399               	.LVL99:
 206:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearIN();
 1400               		.loc 1 206 0
 1401 01a6 6D85      		ldd r22,Y+13
 1402 01a8 7E85      		ldd r23,Y+14
 1403 01aa 40E0      		ldi r20,0
 1404 01ac 50E0      		ldi r21,0
 1405 01ae C801      		movw r24,r16
 1406 01b0 8658      		subi r24,-122
 1407 01b2 994F      		sbci r25,-7
 1408 01b4 0E94 0000 		call Endpoint_Write_Stream_LE
 1409               	.LVL100:
 1410               	.LBB125:
 1411               	.LBB126:
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1412               		.loc 2 454 0
 1413 01b8 8091 E800 		lds r24,232
 1414 01bc 8E77      		andi r24,lo8(126)
 1415 01be 8093 E800 		sts 232,r24
 1416               	.LBE126:
 1417               	.LBE125:
 209:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 1418               		.loc 1 209 0
 1419 01c2 F701      		movw r30,r14
 1420 01c4 1082      		st Z,__zero_reg__
 1421               	.LVL101:
 1422               	.L69:
 1423               	/* epilogue start */
 1424               	.LBE112:
 212:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1425               		.loc 1 212 0
 1426 01c6 AC96      		adiw r28,44
 1427 01c8 0FB6      		in __tmp_reg__,__SREG__
 1428 01ca F894      		cli
 1429 01cc DEBF      		out __SP_H__,r29
 1430 01ce 0FBE      		out __SREG__,__tmp_reg__
 1431 01d0 CDBF      		out __SP_L__,r28
 1432 01d2 DF91      		pop r29
 1433 01d4 CF91      		pop r28
 1434 01d6 1F91      		pop r17
 1435 01d8 0F91      		pop r16
 1436               	.LVL102:
 1437 01da FF90      		pop r15
 1438 01dc EF90      		pop r14
 1439 01de BF90      		pop r11
 1440 01e0 AF90      		pop r10
 1441 01e2 9F90      		pop r9
 1442 01e4 8F90      		pop r8
 1443 01e6 0895      		ret
 1444               		.cfi_endproc
 1445               	.LFE67:
 1447               		.section	.progmem.data,"a",@progbits
 1450               	AdapterSupportedOIDList:
 1451 0000 01        		.byte	1
 1452 0001 01        		.byte	1
 1453 0002 01        		.byte	1
 1454 0003 00        		.byte	0
 1455 0004 02        		.byte	2
 1456 0005 02        		.byte	2
 1457 0006 01        		.byte	1
 1458 0007 00        		.byte	0
 1459 0008 02        		.byte	2
 1460 0009 01        		.byte	1
 1461 000a 01        		.byte	1
 1462 000b 00        		.byte	0
 1463 000c 03        		.byte	3
 1464 000d 01        		.byte	1
 1465 000e 01        		.byte	1
 1466 000f 00        		.byte	0
 1467 0010 04        		.byte	4
 1468 0011 01        		.byte	1
 1469 0012 01        		.byte	1
 1470 0013 00        		.byte	0
 1471 0014 06        		.byte	6
 1472 0015 01        		.byte	1
 1473 0016 01        		.byte	1
 1474 0017 00        		.byte	0
 1475 0018 11        		.byte	17
 1476 0019 01        		.byte	1
 1477 001a 01        		.byte	1
 1478 001b 00        		.byte	0
 1479 001c 07        		.byte	7
 1480 001d 01        		.byte	1
 1481 001e 01        		.byte	1
 1482 001f 00        		.byte	0
 1483 0020 0A        		.byte	10
 1484 0021 01        		.byte	1
 1485 0022 01        		.byte	1
 1486 0023 00        		.byte	0
 1487 0024 0B        		.byte	11
 1488 0025 01        		.byte	1
 1489 0026 01        		.byte	1
 1490 0027 00        		.byte	0
 1491 0028 0C        		.byte	12
 1492 0029 01        		.byte	1
 1493 002a 01        		.byte	1
 1494 002b 00        		.byte	0
 1495 002c 0D        		.byte	13
 1496 002d 01        		.byte	1
 1497 002e 01        		.byte	1
 1498 002f 00        		.byte	0
 1499 0030 0E        		.byte	14
 1500 0031 01        		.byte	1
 1501 0032 01        		.byte	1
 1502 0033 00        		.byte	0
 1503 0034 11        		.byte	17
 1504 0035 01        		.byte	1
 1505 0036 01        		.byte	1
 1506 0037 00        		.byte	0
 1507 0038 14        		.byte	20
 1508 0039 01        		.byte	1
 1509 003a 01        		.byte	1
 1510 003b 00        		.byte	0
 1511 003c 01        		.byte	1
 1512 003d 01        		.byte	1
 1513 003e 02        		.byte	2
 1514 003f 00        		.byte	0
 1515 0040 02        		.byte	2
 1516 0041 01        		.byte	1
 1517 0042 02        		.byte	2
 1518 0043 00        		.byte	0
 1519 0044 03        		.byte	3
 1520 0045 01        		.byte	1
 1521 0046 02        		.byte	2
 1522 0047 00        		.byte	0
 1523 0048 04        		.byte	4
 1524 0049 01        		.byte	1
 1525 004a 02        		.byte	2
 1526 004b 00        		.byte	0
 1527 004c 05        		.byte	5
 1528 004d 01        		.byte	1
 1529 004e 02        		.byte	2
 1530 004f 00        		.byte	0
 1531 0050 01        		.byte	1
 1532 0051 01        		.byte	1
 1533 0052 01        		.byte	1
 1534 0053 01        		.byte	1
 1535 0054 02        		.byte	2
 1536 0055 01        		.byte	1
 1537 0056 01        		.byte	1
 1538 0057 01        		.byte	1
 1539 0058 03        		.byte	3
 1540 0059 01        		.byte	1
 1541 005a 01        		.byte	1
 1542 005b 01        		.byte	1
 1543 005c 04        		.byte	4
 1544 005d 01        		.byte	1
 1545 005e 01        		.byte	1
 1546 005f 01        		.byte	1
 1547 0060 01        		.byte	1
 1548 0061 01        		.byte	1
 1549 0062 02        		.byte	2
 1550 0063 01        		.byte	1
 1551 0064 02        		.byte	2
 1552 0065 01        		.byte	1
 1553 0066 02        		.byte	2
 1554 0067 01        		.byte	1
 1555 0068 03        		.byte	3
 1556 0069 01        		.byte	1
 1557 006a 02        		.byte	2
 1558 006b 01        		.byte	1
 1559               		.text
 1560               	.Letext0:
 1561               		.file 3 "/usr/lib/avr/include/stdint.h"
 1562               		.file 4 "/usr/lib/gcc/avr/4.8.1/include/stddef.h"
 1563               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/../HighLevel/StreamCallba
 1564               		.file 6 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/../HighLevel/StdRequestTy
 1565               		.file 7 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Device.h"
 1566               		.file 8 "../../LUFA/Drivers/USB/Class/Device/../Common/RNDIS.h"
 1567               		.file 9 "../../LUFA/Drivers/USB/Class/Device/RNDIS.h"
 1568               		.file 10 "/usr/lib/avr/include/avr/pgmspace.h"
 1569               		.file 11 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 RNDIS.c
     /tmp/ccAGPQLD.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccAGPQLD.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccAGPQLD.s:4      *ABS*:0000003f __SREG__
     /tmp/ccAGPQLD.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccAGPQLD.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccAGPQLD.s:13     .text.RNDIS_Device_ProcessControlRequest:00000000 RNDIS_Device_ProcessControlRequest
     /tmp/ccAGPQLD.s:1450   .progmem.data:00000000 AdapterSupportedOIDList
     /tmp/ccAGPQLD.s:892    .text.RNDIS_Device_ConfigureEndpoints:00000000 RNDIS_Device_ConfigureEndpoints
     /tmp/ccAGPQLD.s:1070   .text.RNDIS_Device_USBTask:00000000 RNDIS_Device_USBTask

UNDEFINED SYMBOLS
USB_ControlRequest
Endpoint_Read_Control_Stream_LE
memcpy_P
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_BytesToEPSizeMaskDynamic
Endpoint_ConfigureEndpoint_Prv
Endpoint_Write_Stream_LE
Endpoint_Read_Stream_LE
__do_copy_data
