   1               		.file	"Arduino-usbserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.RingBuffer_Insert,"ax",@progbits
  12               	RingBuffer_Insert:
  13               	.LFB71:
  14               		.file 1 "Lib/LightweightRingBuff.h"
   1:Lib/LightweightRingBuff.h **** /*
   2:Lib/LightweightRingBuff.h ****              LUFA Library
   3:Lib/LightweightRingBuff.h ****      Copyright (C) Dean Camera, 2010.
   4:Lib/LightweightRingBuff.h ****               
   5:Lib/LightweightRingBuff.h ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/LightweightRingBuff.h ****       www.fourwalledcubicle.com
   7:Lib/LightweightRingBuff.h **** */
   8:Lib/LightweightRingBuff.h **** 
   9:Lib/LightweightRingBuff.h **** /*
  10:Lib/LightweightRingBuff.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/LightweightRingBuff.h **** 
  12:Lib/LightweightRingBuff.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:Lib/LightweightRingBuff.h ****   software and its documentation for any purpose is hereby granted
  14:Lib/LightweightRingBuff.h ****   without fee, provided that the above copyright notice appear in 
  15:Lib/LightweightRingBuff.h ****   all copies and that both that the copyright notice and this
  16:Lib/LightweightRingBuff.h ****   permission notice and warranty disclaimer appear in supporting 
  17:Lib/LightweightRingBuff.h ****   documentation, and that the name of the author not be used in 
  18:Lib/LightweightRingBuff.h ****   advertising or publicity pertaining to distribution of the 
  19:Lib/LightweightRingBuff.h ****   software without specific, written prior permission.
  20:Lib/LightweightRingBuff.h **** 
  21:Lib/LightweightRingBuff.h ****   The author disclaim all warranties with regard to this
  22:Lib/LightweightRingBuff.h ****   software, including all implied warranties of merchantability
  23:Lib/LightweightRingBuff.h ****   and fitness.  In no event shall the author be liable for any
  24:Lib/LightweightRingBuff.h ****   special, indirect or consequential damages or any damages
  25:Lib/LightweightRingBuff.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/LightweightRingBuff.h ****   in an action of contract, negligence or other tortious action,
  27:Lib/LightweightRingBuff.h ****   arising out of or in connection with the use or performance of
  28:Lib/LightweightRingBuff.h ****   this software.
  29:Lib/LightweightRingBuff.h **** */
  30:Lib/LightweightRingBuff.h **** 
  31:Lib/LightweightRingBuff.h **** /** \file
  32:Lib/LightweightRingBuff.h ****  *
  33:Lib/LightweightRingBuff.h ****  *  Ultra lightweight ring buffer, for fast insertion/deletion.
  34:Lib/LightweightRingBuff.h ****  */
  35:Lib/LightweightRingBuff.h ****  
  36:Lib/LightweightRingBuff.h **** #ifndef _ULW_RING_BUFF_H_
  37:Lib/LightweightRingBuff.h **** #define _ULW_RING_BUFF_H_
  38:Lib/LightweightRingBuff.h **** 
  39:Lib/LightweightRingBuff.h **** 	/* Includes: */
  40:Lib/LightweightRingBuff.h **** 		#include <util/atomic.h>
  41:Lib/LightweightRingBuff.h **** 	
  42:Lib/LightweightRingBuff.h **** 		#include <stdint.h>
  43:Lib/LightweightRingBuff.h **** 		#include <stdbool.h>
  44:Lib/LightweightRingBuff.h **** 
  45:Lib/LightweightRingBuff.h **** 	/* Defines: */
  46:Lib/LightweightRingBuff.h **** 		/** Size of each ring buffer, in data elements - must be between 1 and 255. */
  47:Lib/LightweightRingBuff.h **** 		#define BUFFER_SIZE         128
  48:Lib/LightweightRingBuff.h **** 		
  49:Lib/LightweightRingBuff.h **** 		/** Maximum number of data elements to buffer before forcing a flush. 
  50:Lib/LightweightRingBuff.h **** 		 *  Must be less than BUFFER_SIZE
  51:Lib/LightweightRingBuff.h **** 		 */
  52:Lib/LightweightRingBuff.h **** 		#define BUFFER_NEARLY_FULL	96
  53:Lib/LightweightRingBuff.h **** 		
  54:Lib/LightweightRingBuff.h **** 		/** Type of data to store into the buffer. */
  55:Lib/LightweightRingBuff.h **** 		#define RingBuff_Data_t     uint8_t
  56:Lib/LightweightRingBuff.h **** 
  57:Lib/LightweightRingBuff.h **** 		/** Datatype which may be used to store the count of data stored in a buffer, retrieved
  58:Lib/LightweightRingBuff.h **** 		 *  via a call to \ref RingBuffer_GetCount().
  59:Lib/LightweightRingBuff.h **** 		 */
  60:Lib/LightweightRingBuff.h **** 		#if (BUFFER_SIZE <= 0xFF)
  61:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint8_t
  62:Lib/LightweightRingBuff.h **** 		#else
  63:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint16_t
  64:Lib/LightweightRingBuff.h **** 		#endif
  65:Lib/LightweightRingBuff.h **** 
  66:Lib/LightweightRingBuff.h **** 	/* Type Defines: */
  67:Lib/LightweightRingBuff.h **** 		/** Type define for a new ring buffer object. Buffers should be initialized via a call to
  68:Lib/LightweightRingBuff.h **** 		 *  \ref RingBuffer_InitBuffer() before use.
  69:Lib/LightweightRingBuff.h **** 		 */
  70:Lib/LightweightRingBuff.h **** 		typedef struct
  71:Lib/LightweightRingBuff.h **** 		{
  72:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t  Buffer[BUFFER_SIZE]; /**< Internal ring buffer data, referenced by the buffer p
  73:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* In; /**< Current storage location in the circular buffer */
  74:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* Out; /**< Current retrieval location in the circular buffer */
  75:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
  76:Lib/LightweightRingBuff.h **** 		} RingBuff_t;
  77:Lib/LightweightRingBuff.h **** 	
  78:Lib/LightweightRingBuff.h **** 	/* Inline Functions: */
  79:Lib/LightweightRingBuff.h **** 		/** Initializes a ring buffer ready for use. Buffers must be initialized via this function
  80:Lib/LightweightRingBuff.h **** 		 *  before any operations are called upon them. Already initialized buffers may be reset
  81:Lib/LightweightRingBuff.h **** 		 *  by re-initializing them using this function.
  82:Lib/LightweightRingBuff.h **** 		 *
  83:Lib/LightweightRingBuff.h **** 		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
  84:Lib/LightweightRingBuff.h **** 		 */
  85:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
  86:Lib/LightweightRingBuff.h **** 		{
  87:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  88:Lib/LightweightRingBuff.h **** 			{
  89:Lib/LightweightRingBuff.h **** 				Buffer->In  = Buffer->Buffer;
  90:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
  91:Lib/LightweightRingBuff.h **** 			}
  92:Lib/LightweightRingBuff.h **** 		}
  93:Lib/LightweightRingBuff.h **** 		
  94:Lib/LightweightRingBuff.h **** 		/** Retrieves the minimum number of bytes stored in a particular buffer. This value is computed
  95:Lib/LightweightRingBuff.h **** 		 *  by entering an atomic lock on the buffer while the IN and OUT locations are fetched, so that
  96:Lib/LightweightRingBuff.h **** 		 *  the buffer cannot be modified while the computation takes place. This value should be cached
  97:Lib/LightweightRingBuff.h **** 		 *  when reading out the contents of the buffer, so that as small a time as possible is spent
  98:Lib/LightweightRingBuff.h **** 		 *  in an atomic lock.
  99:Lib/LightweightRingBuff.h **** 		 *
 100:Lib/LightweightRingBuff.h **** 		 *  \note The value returned by this function is guaranteed to only be the minimum number of byte
 101:Lib/LightweightRingBuff.h **** 		 *        stored in the given buffer; this value may change as other threads write new data and s
 102:Lib/LightweightRingBuff.h **** 		 *        the returned number should be used only to determine how many successive reads may safe
 103:Lib/LightweightRingBuff.h **** 		 *        be performed on the buffer.
 104:Lib/LightweightRingBuff.h **** 		 *
 105:Lib/LightweightRingBuff.h **** 		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
 106:Lib/LightweightRingBuff.h **** 		 */
 107:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
 108:Lib/LightweightRingBuff.h **** 		{
 109:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
 110:Lib/LightweightRingBuff.h **** 			
 111:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 112:Lib/LightweightRingBuff.h **** 			{
 113:Lib/LightweightRingBuff.h **** 				Count = Buffer->Count;
 114:Lib/LightweightRingBuff.h **** 			}
 115:Lib/LightweightRingBuff.h **** 			
 116:Lib/LightweightRingBuff.h **** 			return Count;
 117:Lib/LightweightRingBuff.h **** 		}
 118:Lib/LightweightRingBuff.h **** 		
 119:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any free space. This should
 120:Lib/LightweightRingBuff.h **** 		 *  be tested before storing data to the buffer, to ensure that no data is lost due to a
 121:Lib/LightweightRingBuff.h **** 		 *  buffer overrun.
 122:Lib/LightweightRingBuff.h **** 		 *
 123:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 124:Lib/LightweightRingBuff.h **** 		 *
 125:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 126:Lib/LightweightRingBuff.h **** 		 */		 
 127:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsFull(RingBuff_t* const Buffer)
 128:Lib/LightweightRingBuff.h **** 		{
 129:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == BUFFER_SIZE);
 130:Lib/LightweightRingBuff.h **** 		}
 131:Lib/LightweightRingBuff.h **** 
 132:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any data. This should
 133:Lib/LightweightRingBuff.h **** 		 *  be tested before removing data from the buffer, to ensure that the buffer does not
 134:Lib/LightweightRingBuff.h **** 		 *  underflow.
 135:Lib/LightweightRingBuff.h **** 		 *
 136:Lib/LightweightRingBuff.h **** 		 *  If the data is to be removed in a loop, store the total number of bytes stored in the
 137:Lib/LightweightRingBuff.h **** 		 *  buffer (via a call to the \ref RingBuffer_GetCount() function) in a temporary variable
 138:Lib/LightweightRingBuff.h **** 		 *  to reduce the time spent in atomicity locks.
 139:Lib/LightweightRingBuff.h **** 		 *
 140:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 141:Lib/LightweightRingBuff.h **** 		 *
 142:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 143:Lib/LightweightRingBuff.h **** 		 */		 
 144:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
 145:Lib/LightweightRingBuff.h **** 		{
 146:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == 0);
 147:Lib/LightweightRingBuff.h **** 		}
 148:Lib/LightweightRingBuff.h **** 
 149:Lib/LightweightRingBuff.h **** 		/** Inserts an element into the ring buffer.
 150:Lib/LightweightRingBuff.h **** 		 *
 151:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may insert into a single buff
 152:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 153:Lib/LightweightRingBuff.h **** 		 *        threads.
 154:Lib/LightweightRingBuff.h **** 		 *
 155:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 156:Lib/LightweightRingBuff.h **** 		 *  \param[in]     Data    Data element to insert into the buffer
 157:Lib/LightweightRingBuff.h **** 		 */
 158:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
 159:Lib/LightweightRingBuff.h **** 		                                     const RingBuff_Data_t Data)
 160:Lib/LightweightRingBuff.h **** 		{
  15               		.loc 1 160 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
  22               		.loc 1 161 0
  23 0000 FC01      		movw r30,r24
  24 0002 E058      		subi r30,-128
  25 0004 FF4F      		sbci r31,-1
  26 0006 A081      		ld r26,Z
  27 0008 B181      		ldd r27,Z+1
  28 000a 6C93      		st X,r22
 162:Lib/LightweightRingBuff.h **** 			
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
  29               		.loc 1 163 0
  30 000c A081      		ld r26,Z
  31 000e B181      		ldd r27,Z+1
  32 0010 9D01      		movw r18,r26
  33 0012 2F5F      		subi r18,-1
  34 0014 3F4F      		sbci r19,-1
  35 0016 3183      		std Z+1,r19
  36 0018 2083      		st Z,r18
  37 001a 2E17      		cp r18,r30
  38 001c 3F07      		cpc r19,r31
  39 001e 01F4      		brne .L2
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
  40               		.loc 1 164 0
  41 0020 1296      		adiw r26,1+1
  42 0022 9C93      		st X,r25
  43 0024 8E93      		st -X,r24
  44 0026 1197      		sbiw r26,1
  45               	.L2:
  46               	.LBB31:
 165:Lib/LightweightRingBuff.h **** 
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  47               		.loc 1 166 0
  48 0028 2FB7      		in r18,__SREG__
  49               	.LVL1:
  50               	.LBB32:
  51               	.LBB33:
  52               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  53               		.loc 2 50 0
  54               	/* #APP */
  55               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  56 002a F894      		cli
  57               	 ;  0 "" 2
  58               	.LVL2:
  59               	/* #NOAPP */
  60               	.LBE33:
  61               	.LBE32:
 167:Lib/LightweightRingBuff.h **** 			{
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
  62               		.loc 1 168 0
  63 002c FC01      		movw r30,r24
  64 002e EC57      		subi r30,124
  65 0030 FF4F      		sbci r31,-1
  66 0032 8081      		ld r24,Z
  67               	.LVL3:
  68 0034 8F5F      		subi r24,lo8(-(1))
  69 0036 8083      		st Z,r24
  70               	.LVL4:
  71               	.LBB34:
  72               	.LBB35:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  73               		.loc 2 70 0
  74 0038 2FBF      		out __SREG__,r18
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  75               		.loc 2 71 0
  76 003a 0895      		ret
  77               	.LBE35:
  78               	.LBE34:
  79               	.LBE31:
  80               		.cfi_endproc
  81               	.LFE71:
  83               		.section	.text.RingBuffer_Remove,"ax",@progbits
  85               	RingBuffer_Remove:
  86               	.LFB72:
 169:Lib/LightweightRingBuff.h **** 			}
 170:Lib/LightweightRingBuff.h **** 		}
 171:Lib/LightweightRingBuff.h **** 
 172:Lib/LightweightRingBuff.h **** 		/** Removes an element from the ring buffer.
 173:Lib/LightweightRingBuff.h **** 		 *
 174:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may remove from a single buff
 175:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 176:Lib/LightweightRingBuff.h **** 		 *        threads.
 177:Lib/LightweightRingBuff.h **** 		 *
 178:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
 179:Lib/LightweightRingBuff.h **** 		 *
 180:Lib/LightweightRingBuff.h **** 		 *  \return Next data element stored in the buffer
 181:Lib/LightweightRingBuff.h **** 		 */
 182:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
 183:Lib/LightweightRingBuff.h **** 		{
  87               		.loc 1 183 0
  88               		.cfi_startproc
  89               	.LVL5:
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
  94               		.loc 1 184 0
  95 0000 DC01      		movw r26,r24
  96 0002 AE57      		subi r26,126
  97 0004 BF4F      		sbci r27,-1
  98 0006 ED91      		ld r30,X+
  99 0008 FC91      		ld r31,X
 100 000a 1197      		sbiw r26,1
 101 000c 4191      		ld r20,Z+
 102               	.LVL6:
 185:Lib/LightweightRingBuff.h **** 			
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 103               		.loc 1 186 0
 104 000e 1196      		adiw r26,1
 105 0010 FC93      		st X,r31
 106 0012 EE93      		st -X,r30
 107 0014 9C01      		movw r18,r24
 108 0016 2058      		subi r18,-128
 109 0018 3F4F      		sbci r19,-1
 110 001a E217      		cp r30,r18
 111 001c F307      		cpc r31,r19
 112 001e 01F4      		brne .L5
 187:Lib/LightweightRingBuff.h **** 			  Buffer->Out = Buffer->Buffer;
 113               		.loc 1 187 0
 114 0020 8D93      		st X+,r24
 115 0022 9C93      		st X,r25
 116               	.L5:
 117               	.LBB36:
 188:Lib/LightweightRingBuff.h **** 
 189:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 118               		.loc 1 189 0
 119 0024 2FB7      		in r18,__SREG__
 120               	.LVL7:
 121               	.LBB37:
 122               	.LBB38:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 123               		.loc 2 50 0
 124               	/* #APP */
 125               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 126 0026 F894      		cli
 127               	 ;  0 "" 2
 128               	.LVL8:
 129               	/* #NOAPP */
 130               	.LBE38:
 131               	.LBE37:
 190:Lib/LightweightRingBuff.h **** 			{
 191:Lib/LightweightRingBuff.h **** 				Buffer->Count--;
 132               		.loc 1 191 0
 133 0028 FC01      		movw r30,r24
 134 002a EC57      		subi r30,124
 135 002c FF4F      		sbci r31,-1
 136 002e 9081      		ld r25,Z
 137 0030 9150      		subi r25,lo8(-(-1))
 138 0032 9083      		st Z,r25
 139               	.LVL9:
 140               	.LBB39:
 141               	.LBB40:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 142               		.loc 2 70 0
 143 0034 2FBF      		out __SREG__,r18
 144               		.loc 2 71 0
 145               	.LBE40:
 146               	.LBE39:
 147               	.LBE36:
 192:Lib/LightweightRingBuff.h **** 			}
 193:Lib/LightweightRingBuff.h **** 			
 194:Lib/LightweightRingBuff.h **** 			return Data;
 195:Lib/LightweightRingBuff.h **** 		}
 148               		.loc 1 195 0
 149 0036 842F      		mov r24,r20
 150               	.LVL10:
 151 0038 0895      		ret
 152               		.cfi_endproc
 153               	.LFE72:
 155               		.section	.text.setResetPin,"ax",@progbits
 156               	.global	setResetPin
 158               	setResetPin:
 159               	.LFB85:
 160               		.file 3 "Arduino-usbserial.c"
   1:Arduino-usbserial.c **** /*
   2:Arduino-usbserial.c ****              LUFA Library
   3:Arduino-usbserial.c ****      Copyright (C) Dean Camera, 2010.
   4:Arduino-usbserial.c ****               
   5:Arduino-usbserial.c ****   dean [at] fourwalledcubicle [dot] com
   6:Arduino-usbserial.c ****       www.fourwalledcubicle.com
   7:Arduino-usbserial.c **** */
   8:Arduino-usbserial.c **** 
   9:Arduino-usbserial.c **** /*
  10:Arduino-usbserial.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Arduino-usbserial.c **** 
  12:Arduino-usbserial.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Arduino-usbserial.c ****   software and its documentation for any purpose is hereby granted
  14:Arduino-usbserial.c ****   without fee, provided that the above copyright notice appear in 
  15:Arduino-usbserial.c ****   all copies and that both that the copyright notice and this
  16:Arduino-usbserial.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Arduino-usbserial.c ****   documentation, and that the name of the author not be used in 
  18:Arduino-usbserial.c ****   advertising or publicity pertaining to distribution of the 
  19:Arduino-usbserial.c ****   software without specific, written prior permission.
  20:Arduino-usbserial.c **** 
  21:Arduino-usbserial.c ****   The author disclaim all warranties with regard to this
  22:Arduino-usbserial.c ****   software, including all implied warranties of merchantability
  23:Arduino-usbserial.c ****   and fitness.  In no event shall the author be liable for any
  24:Arduino-usbserial.c ****   special, indirect or consequential damages or any damages
  25:Arduino-usbserial.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Arduino-usbserial.c ****   in an action of contract, negligence or other tortious action,
  27:Arduino-usbserial.c ****   arising out of or in connection with the use or performance of
  28:Arduino-usbserial.c ****   this software.
  29:Arduino-usbserial.c **** */
  30:Arduino-usbserial.c **** 
  31:Arduino-usbserial.c **** /** \file
  32:Arduino-usbserial.c ****  *
  33:Arduino-usbserial.c ****  *  Main source file for the Arduino-usbserial project. This file contains the main tasks of
  34:Arduino-usbserial.c ****  *  the project and is responsible for the initial application hardware configuration.
  35:Arduino-usbserial.c ****  */
  36:Arduino-usbserial.c **** 
  37:Arduino-usbserial.c **** #include "Arduino-usbserial.h"
  38:Arduino-usbserial.c **** 
  39:Arduino-usbserial.c **** /** Circular buffer to hold data from the host before it is sent to the device via the serial port.
  40:Arduino-usbserial.c **** RingBuff_t USBtoUSART_Buffer;
  41:Arduino-usbserial.c **** 
  42:Arduino-usbserial.c **** /** Circular buffer to hold data from the serial port before it is sent to the host. */
  43:Arduino-usbserial.c **** RingBuff_t USARTtoUSB_Buffer;
  44:Arduino-usbserial.c **** 
  45:Arduino-usbserial.c **** /** Pulse generation counters to keep track of the number of milliseconds remaining for each pulse 
  46:Arduino-usbserial.c **** volatile struct
  47:Arduino-usbserial.c **** {
  48:Arduino-usbserial.c **** 	uint8_t TxLEDPulse; /**< Milliseconds remaining for data Tx LED pulse */
  49:Arduino-usbserial.c **** 	uint8_t RxLEDPulse; /**< Milliseconds remaining for data Rx LED pulse */
  50:Arduino-usbserial.c **** 	uint8_t PingPongLEDPulse; /**< Milliseconds remaining for enumeration Tx/Rx ping-pong LED pulse */
  51:Arduino-usbserial.c **** } PulseMSRemaining;
  52:Arduino-usbserial.c **** 
  53:Arduino-usbserial.c **** /** LUFA CDC Class driver interface configuration and state information. This structure is
  54:Arduino-usbserial.c ****  *  passed to all CDC Class driver functions, so that multiple instances of the same class
  55:Arduino-usbserial.c ****  *  within a device can be differentiated from one another.
  56:Arduino-usbserial.c ****  */
  57:Arduino-usbserial.c **** USB_ClassInfo_CDC_Device_t VirtualSerial_CDC_Interface =
  58:Arduino-usbserial.c **** 	{
  59:Arduino-usbserial.c **** 		.Config = 
  60:Arduino-usbserial.c **** 			{
  61:Arduino-usbserial.c **** 				.ControlInterfaceNumber         = 0,
  62:Arduino-usbserial.c **** 
  63:Arduino-usbserial.c **** 				.DataINEndpointNumber           = CDC_TX_EPNUM,
  64:Arduino-usbserial.c **** 				.DataINEndpointSize             = CDC_TXRX_EPSIZE,
  65:Arduino-usbserial.c **** 				.DataINEndpointDoubleBank       = false,
  66:Arduino-usbserial.c **** 
  67:Arduino-usbserial.c **** 				.DataOUTEndpointNumber          = CDC_RX_EPNUM,
  68:Arduino-usbserial.c **** 				.DataOUTEndpointSize            = CDC_TXRX_EPSIZE,
  69:Arduino-usbserial.c **** 				.DataOUTEndpointDoubleBank      = false,
  70:Arduino-usbserial.c **** 
  71:Arduino-usbserial.c **** 				.NotificationEndpointNumber     = CDC_NOTIFICATION_EPNUM,
  72:Arduino-usbserial.c **** 				.NotificationEndpointSize       = CDC_NOTIFICATION_EPSIZE,
  73:Arduino-usbserial.c **** 				.NotificationEndpointDoubleBank = false,
  74:Arduino-usbserial.c **** 			},
  75:Arduino-usbserial.c **** 	};
  76:Arduino-usbserial.c **** 
  77:Arduino-usbserial.c **** int ResetTimer = 0;
  78:Arduino-usbserial.c **** int tries = 20;
  79:Arduino-usbserial.c **** bool CurrentDTRState = false;
  80:Arduino-usbserial.c **** bool PreviousDTRState = false;
  81:Arduino-usbserial.c **** bool CurrentRTSState = false;
  82:Arduino-usbserial.c **** bool PreviousRTSState = false;
  83:Arduino-usbserial.c **** bool Selected1200BPS = false;
  84:Arduino-usbserial.c **** 
  85:Arduino-usbserial.c **** void setResetPin(bool v) {
 161               		.loc 3 85 0
 162               		.cfi_startproc
 163               	.LVL11:
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
  86:Arduino-usbserial.c **** 	/* Target /RESET line  */
  87:Arduino-usbserial.c **** 	if (v) {
 168               		.loc 3 87 0
 169 0000 8823      		tst r24
 170 0002 01F0      		breq .L7
  88:Arduino-usbserial.c **** 		/* ACTIVE   => OUTPUT LOW (0v on target /RESET) */
  89:Arduino-usbserial.c **** 		AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
 171               		.loc 3 89 0
 172 0004 3F9A      		sbi 0x7,7
 173 0006 00C0      		rjmp .L9
 174               	.L7:
  90:Arduino-usbserial.c **** 		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
  91:Arduino-usbserial.c **** 		//LEDs_TurnOnLEDs(LEDMASK_RX);
  92:Arduino-usbserial.c **** 	} else {
  93:Arduino-usbserial.c **** 	 	/* INACTIVE => set as INPUT (internal pullup on target /RESET keep it at 3.3v) */
  94:Arduino-usbserial.c **** 		AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
 175               		.loc 3 94 0
 176 0008 3F98      		cbi 0x7,7
 177               	.L9:
  95:Arduino-usbserial.c **** 		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 178               		.loc 3 95 0
 179 000a 4798      		cbi 0x8,7
 180 000c 0895      		ret
 181               		.cfi_endproc
 182               	.LFE85:
 184               		.section	.text.setErasePin,"ax",@progbits
 185               	.global	setErasePin
 187               	setErasePin:
 188               	.LFB86:
  96:Arduino-usbserial.c **** 		//LEDs_TurnOffLEDs(LEDMASK_RX);
  97:Arduino-usbserial.c **** 	}
  98:Arduino-usbserial.c **** }
  99:Arduino-usbserial.c **** 
 100:Arduino-usbserial.c **** void setErasePin(bool v) {
 189               		.loc 3 100 0
 190               		.cfi_startproc
 191               	.LVL12:
 192               	/* prologue: function */
 193               	/* frame size = 0 */
 194               	/* stack size = 0 */
 195               	.L__stack_usage = 0
 101:Arduino-usbserial.c **** 	if (v) {
 196               		.loc 3 101 0
 197 0000 8823      		tst r24
 198 0002 01F0      		breq .L11
 102:Arduino-usbserial.c **** 		AVR_ERASE_LINE_PORT &= ~AVR_ERASE_LINE_MASK;
 199               		.loc 3 102 0
 200 0004 4698      		cbi 0x8,6
 201 0006 0895      		ret
 202               	.L11:
 103:Arduino-usbserial.c **** 		//LEDs_TurnOnLEDs(LEDMASK_TX);
 104:Arduino-usbserial.c **** 	} else {
 105:Arduino-usbserial.c **** 		AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
 203               		.loc 3 105 0
 204 0008 469A      		sbi 0x8,6
 205 000a 0895      		ret
 206               		.cfi_endproc
 207               	.LFE86:
 209               		.section	.text.SetupHardware,"ax",@progbits
 210               	.global	SetupHardware
 212               	SetupHardware:
 213               	.LFB88:
 106:Arduino-usbserial.c **** 		//LEDs_TurnOffLEDs(LEDMASK_TX);
 107:Arduino-usbserial.c **** 	}
 108:Arduino-usbserial.c **** }
 109:Arduino-usbserial.c **** 
 110:Arduino-usbserial.c **** 
 111:Arduino-usbserial.c **** /** Main program entry point. This routine contains the overall program flow, including initial
 112:Arduino-usbserial.c ****  *  setup of all components and the main program loop.
 113:Arduino-usbserial.c ****  */
 114:Arduino-usbserial.c **** int main(void)
 115:Arduino-usbserial.c **** {
 116:Arduino-usbserial.c **** 	SetupHardware();
 117:Arduino-usbserial.c **** 	
 118:Arduino-usbserial.c **** 	RingBuffer_InitBuffer(&USBtoUSART_Buffer);
 119:Arduino-usbserial.c **** 	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);
 120:Arduino-usbserial.c **** 
 121:Arduino-usbserial.c **** 	sei();
 122:Arduino-usbserial.c **** 
 123:Arduino-usbserial.c **** 
 124:Arduino-usbserial.c **** 	for (;;)
 125:Arduino-usbserial.c **** 	{
 126:Arduino-usbserial.c **** 
 127:Arduino-usbserial.c **** 		// Only try to read in bytes from the CDC interface if the transmit buffer is not full
 128:Arduino-usbserial.c **** 		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 129:Arduino-usbserial.c **** 		{
 130:Arduino-usbserial.c **** 			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 131:Arduino-usbserial.c **** 
 132:Arduino-usbserial.c **** 			// Read bytes from the USB OUT endpoint into the USART transmit buffer
 133:Arduino-usbserial.c **** 			if (!(ReceivedByte < 0))
 134:Arduino-usbserial.c **** 			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 135:Arduino-usbserial.c **** 		}
 136:Arduino-usbserial.c **** 		
 137:Arduino-usbserial.c **** 		// Check if the UART receive buffer flush timer has expired or the buffer is nearly full
 138:Arduino-usbserial.c **** 		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 139:Arduino-usbserial.c **** 		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 140:Arduino-usbserial.c **** 		{
 141:Arduino-usbserial.c **** 			TIFR0 |= (1 << TOV0);
 142:Arduino-usbserial.c **** 
 143:Arduino-usbserial.c **** 			if (USARTtoUSB_Buffer.Count) {
 144:Arduino-usbserial.c **** 				LEDs_TurnOnLEDs(LEDMASK_TX);
 145:Arduino-usbserial.c **** 				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 146:Arduino-usbserial.c **** 			}
 147:Arduino-usbserial.c **** 
 148:Arduino-usbserial.c **** 			// Read bytes from the USART receive buffer into the USB IN endpoint
 149:Arduino-usbserial.c **** 			while (BufferCount--)
 150:Arduino-usbserial.c **** 			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 151:Arduino-usbserial.c **** 			  
 152:Arduino-usbserial.c **** 			// Turn off TX LED(s) once the TX pulse period has elapsed
 153:Arduino-usbserial.c **** 			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 154:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_TX);
 155:Arduino-usbserial.c **** 
 156:Arduino-usbserial.c **** 			// Turn off RX LED(s) once the RX pulse period has elapsed
 157:Arduino-usbserial.c **** 			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 158:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_RX);
 159:Arduino-usbserial.c **** 
 160:Arduino-usbserial.c **** 			if (ResetTimer > 0)
 161:Arduino-usbserial.c **** 			{
 162:Arduino-usbserial.c **** 				// SAM3X RESET/ERASE Sequence
 163:Arduino-usbserial.c **** 				// --------------------------
 164:Arduino-usbserial.c **** 				// Between 60 and 120: do erase
 165:Arduino-usbserial.c **** 				if (ResetTimer >= 60 && ResetTimer <= 120) {
 166:Arduino-usbserial.c **** 					setErasePin(true);
 167:Arduino-usbserial.c **** 				} else {
 168:Arduino-usbserial.c **** 					setErasePin(false);
 169:Arduino-usbserial.c **** 				}
 170:Arduino-usbserial.c **** 
 171:Arduino-usbserial.c **** 				// Between 1 and 50: do reset
 172:Arduino-usbserial.c **** 				if (ResetTimer >= 1 && ResetTimer <= 50) {
 173:Arduino-usbserial.c **** 					setResetPin(true);
 174:Arduino-usbserial.c **** 				} else {
 175:Arduino-usbserial.c **** 					setResetPin(false);
 176:Arduino-usbserial.c **** 				}
 177:Arduino-usbserial.c **** 				ResetTimer--;
 178:Arduino-usbserial.c **** 			} else {
 179:Arduino-usbserial.c **** 				setErasePin(false);
 180:Arduino-usbserial.c **** 				setResetPin(false);
 181:Arduino-usbserial.c **** 			}
 182:Arduino-usbserial.c **** 		}
 183:Arduino-usbserial.c **** 		
 184:Arduino-usbserial.c **** 		// Load the next byte from the USART transmit buffer into the USART
 185:Arduino-usbserial.c **** 		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
 186:Arduino-usbserial.c **** 			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 187:Arduino-usbserial.c **** 			LEDs_TurnOnLEDs(LEDMASK_RX);
 188:Arduino-usbserial.c **** 			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 189:Arduino-usbserial.c **** 		}
 190:Arduino-usbserial.c **** 		
 191:Arduino-usbserial.c **** 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 192:Arduino-usbserial.c **** 		USB_USBTask();
 193:Arduino-usbserial.c **** 	}
 194:Arduino-usbserial.c **** 
 195:Arduino-usbserial.c **** }
 196:Arduino-usbserial.c **** 
 197:Arduino-usbserial.c **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
 198:Arduino-usbserial.c **** void SetupHardware(void)
 199:Arduino-usbserial.c **** {
 214               		.loc 3 199 0
 215               		.cfi_startproc
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 0 */
 219               	.L__stack_usage = 0
 200:Arduino-usbserial.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 201:Arduino-usbserial.c **** 	MCUSR &= ~(1 << WDRF);
 220               		.loc 3 201 0
 221 0000 84B7      		in r24,0x34
 222 0002 877F      		andi r24,lo8(-9)
 223 0004 84BF      		out 0x34,r24
 202:Arduino-usbserial.c **** 	wdt_disable();
 224               		.loc 3 202 0
 225 0006 88E1      		ldi r24,lo8(24)
 226               	/* #APP */
 227               	 ;  202 "Arduino-usbserial.c" 1
 228 0008 0FB6      		in __tmp_reg__, __SREG__
 229 000a F894      		cli
 230 000c 8093 6000 		sts 96, r24
 231 0010 1092 6000 		sts 96, __zero_reg__
 232 0014 0FBE      		out __SREG__,__tmp_reg__
 233               		
 234               	 ;  0 "" 2
 203:Arduino-usbserial.c **** 
 204:Arduino-usbserial.c **** 	setResetPin(false);
 235               		.loc 3 204 0
 236               	/* #NOAPP */
 237 0016 80E0      		ldi r24,0
 238 0018 0E94 0000 		call setResetPin
 239               	.LVL13:
 205:Arduino-usbserial.c **** 
 206:Arduino-usbserial.c **** 	/* Target /ERASE line is active HIGH: there is a mosfet that inverts logic */
 207:Arduino-usbserial.c **** 	AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
 240               		.loc 3 207 0
 241 001c 469A      		sbi 0x8,6
 208:Arduino-usbserial.c **** 	AVR_ERASE_LINE_DDR  |= AVR_ERASE_LINE_MASK;	
 242               		.loc 3 208 0
 243 001e 3E9A      		sbi 0x7,6
 244               	.LVL14:
 245               	.LBB45:
 246               	.LBB46:
 247               		.file 4 "../../LUFA/Drivers/Peripheral/Serial.h"
   1:../../LUFA/Drivers/Peripheral/Serial.h **** /*
   2:../../LUFA/Drivers/Peripheral/Serial.h ****              LUFA Library
   3:../../LUFA/Drivers/Peripheral/Serial.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/Peripheral/Serial.h ****               
   5:../../LUFA/Drivers/Peripheral/Serial.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Peripheral/Serial.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/Peripheral/Serial.h **** */
   8:../../LUFA/Drivers/Peripheral/Serial.h **** 
   9:../../LUFA/Drivers/Peripheral/Serial.h **** /*
  10:../../LUFA/Drivers/Peripheral/Serial.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Peripheral/Serial.h **** 
  12:../../LUFA/Drivers/Peripheral/Serial.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/Peripheral/Serial.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Peripheral/Serial.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/Peripheral/Serial.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Peripheral/Serial.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/Peripheral/Serial.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/Peripheral/Serial.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/Peripheral/Serial.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Peripheral/Serial.h **** 
  21:../../LUFA/Drivers/Peripheral/Serial.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Peripheral/Serial.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Peripheral/Serial.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Peripheral/Serial.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Peripheral/Serial.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Peripheral/Serial.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Peripheral/Serial.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Peripheral/Serial.h ****   this software.
  29:../../LUFA/Drivers/Peripheral/Serial.h **** */
  30:../../LUFA/Drivers/Peripheral/Serial.h **** 
  31:../../LUFA/Drivers/Peripheral/Serial.h **** /** \file
  32:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \brief Master include file for the USART peripheral driver.
  33:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  34:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Driver for the USART subsystem on supported USB AVRs.
  35:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  36:../../LUFA/Drivers/Peripheral/Serial.h ****  
  37:../../LUFA/Drivers/Peripheral/Serial.h **** /** \ingroup Group_PeripheralDrivers
  38:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @defgroup Group_Serial Serial USART Driver - LUFA/Drivers/Peripheral/Serial.h
  39:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  40:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Sec_Dependencies Module Source Dependencies
  41:../../LUFA/Drivers/Peripheral/Serial.h ****  *  The following files must be built with any user project that uses this module:
  42:../../LUFA/Drivers/Peripheral/Serial.h ****  *    - LUFA/Drivers/Peripheral/Serial.c <i>(Makefile source module name: LUFA_SRC_SERIAL)</i>
  43:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  44:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Module Description
  45:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Hardware serial USART driver. This module provides an easy to use driver for
  46:../../LUFA/Drivers/Peripheral/Serial.h ****  *  the setup of and transfer of data over the AVR's USART port.
  47:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  48:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @{
  49:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  50:../../LUFA/Drivers/Peripheral/Serial.h ****  
  51:../../LUFA/Drivers/Peripheral/Serial.h **** #ifndef __SERIAL_H__
  52:../../LUFA/Drivers/Peripheral/Serial.h **** #define __SERIAL_H__
  53:../../LUFA/Drivers/Peripheral/Serial.h **** 
  54:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Includes: */
  55:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/io.h>
  56:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/pgmspace.h>
  57:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <stdbool.h>
  58:../../LUFA/Drivers/Peripheral/Serial.h **** 		
  59:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../../Common/Common.h"
  60:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../Misc/TerminalCodes.h"
  61:../../LUFA/Drivers/Peripheral/Serial.h **** 
  62:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/Peripheral/Serial.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/Peripheral/Serial.h **** 			extern "C" {
  65:../../LUFA/Drivers/Peripheral/Serial.h **** 		#endif
  66:../../LUFA/Drivers/Peripheral/Serial.h **** 
  67:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Public Interface - May be used in end-application: */
  68:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Macros: */
  69:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  70:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  not set.
  71:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  72:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_UBBRVAL(baud)    ((((F_CPU / 16) + (baud / 2)) / (baud)) - 1)
  73:../../LUFA/Drivers/Peripheral/Serial.h **** 
  74:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  75:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  set.
  76:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  77:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_2X_UBBRVAL(baud) ((((F_CPU / 8) + (baud / 2)) / (baud)) - 1)
  78:../../LUFA/Drivers/Peripheral/Serial.h **** 
  79:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Function Prototypes: */
  80:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in program space (FLASH) through the USART.
  81:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  82:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] FlashStringPtr  Pointer to a string located in program space.
  83:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  84:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString_P(const char* FlashStringPtr) ATTR_NON_NULL_PTR_ARG(1);
  85:../../LUFA/Drivers/Peripheral/Serial.h **** 
  86:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in SRAM memory through the USART.
  87:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  88:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] StringPtr  Pointer to a string located in SRAM space.
  89:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  90:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString(const char* StringPtr) ATTR_NON_NULL_PTR_ARG(1);
  91:../../LUFA/Drivers/Peripheral/Serial.h **** 
  92:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Inline Functions: */
  93:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Initializes the USART, ready for serial data transmission and reception. This initializes th
  94:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  standard 8-bit, no parity, 1 stop bit settings suitable for most applications.
  95:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  96:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] BaudRate     Serial baud rate, in bits per second.
  97:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to doubl
  98:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  99:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_Init(const uint32_t BaudRate,
 100:../../LUFA/Drivers/Peripheral/Serial.h **** 			                               const bool DoubleSpeed)
 101:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 102:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 248               		.loc 4 102 0
 249 0020 87E6      		ldi r24,lo8(103)
 250 0022 90E0      		ldi r25,0
 251 0024 9093 CD00 		sts 204+1,r25
 252 0028 8093 CC00 		sts 204,r24
 103:../../LUFA/Drivers/Peripheral/Serial.h **** 
 104:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 253               		.loc 4 104 0
 254 002c 86E0      		ldi r24,lo8(6)
 255 002e 8093 CA00 		sts 202,r24
 105:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 256               		.loc 4 105 0
 257 0032 1092 C800 		sts 200,__zero_reg__
 106:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 258               		.loc 4 106 0
 259 0036 88E1      		ldi r24,lo8(24)
 260 0038 8093 C900 		sts 201,r24
 107:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 108:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  |= (1 << 3);
 261               		.loc 4 108 0
 262 003c 539A      		sbi 0xa,3
 109:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD |= (1 << 2);
 263               		.loc 4 109 0
 264 003e 5A9A      		sbi 0xb,2
 265               	.LBE46:
 266               	.LBE45:
 267               	.LBB47:
 268               	.LBB48:
 269               		.file 5 "./Board/LEDs.h"
   1:./Board/LEDs.h **** /*
   2:./Board/LEDs.h ****              LUFA Library
   3:./Board/LEDs.h ****      Copyright (C) Dean Camera, 2010.
   4:./Board/LEDs.h ****               
   5:./Board/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:./Board/LEDs.h ****       www.fourwalledcubicle.com
   7:./Board/LEDs.h **** */
   8:./Board/LEDs.h **** 
   9:./Board/LEDs.h **** /*
  10:./Board/LEDs.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./Board/LEDs.h **** 
  12:./Board/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:./Board/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:./Board/LEDs.h ****   without fee, provided that the above copyright notice appear in 
  15:./Board/LEDs.h ****   all copies and that both that the copyright notice and this
  16:./Board/LEDs.h ****   permission notice and warranty disclaimer appear in supporting 
  17:./Board/LEDs.h ****   documentation, and that the name of the author not be used in 
  18:./Board/LEDs.h ****   advertising or publicity pertaining to distribution of the 
  19:./Board/LEDs.h ****   software without specific, written prior permission.
  20:./Board/LEDs.h **** 
  21:./Board/LEDs.h ****   The author disclaim all warranties with regard to this
  22:./Board/LEDs.h ****   software, including all implied warranties of merchantability
  23:./Board/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:./Board/LEDs.h ****   special, indirect or consequential damages or any damages
  25:./Board/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./Board/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:./Board/LEDs.h ****   arising out of or in connection with the use or performance of
  28:./Board/LEDs.h ****   this software.
  29:./Board/LEDs.h **** */
  30:./Board/LEDs.h **** 
  31:./Board/LEDs.h **** /*
  32:./Board/LEDs.h ****    Board LEDs driver for the Benito board, from www.dorkbotpdx.org.
  33:./Board/LEDs.h **** */
  34:./Board/LEDs.h **** 
  35:./Board/LEDs.h **** #ifndef __LEDS_ARDUINOUNO_H__
  36:./Board/LEDs.h **** #define __LEDS_ARDUINOUNO_H__
  37:./Board/LEDs.h **** 
  38:./Board/LEDs.h **** 	/* Includes: */
  39:./Board/LEDs.h **** 		#include <avr/io.h>
  40:./Board/LEDs.h **** 
  41:./Board/LEDs.h **** /* Enable C linkage for C++ Compilers: */
  42:./Board/LEDs.h **** 		#if defined(__cplusplus)
  43:./Board/LEDs.h **** 			extern "C" {
  44:./Board/LEDs.h **** 		#endif
  45:./Board/LEDs.h **** 
  46:./Board/LEDs.h **** 	/* Preprocessor Checks: */
  47:./Board/LEDs.h **** 		#if !defined(INCLUDE_FROM_LEDS_H)
  48:./Board/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  49:./Board/LEDs.h **** 		#endif
  50:./Board/LEDs.h **** 
  51:./Board/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  52:./Board/LEDs.h **** 		/* Macros: */
  53:./Board/LEDs.h **** 			/** LED mask for the first LED on the board. */
  54:./Board/LEDs.h **** 			#define LEDS_LED1        (1 << 5)
  55:./Board/LEDs.h **** 
  56:./Board/LEDs.h **** 			/** LED mask for the second LED on the board. */
  57:./Board/LEDs.h **** 			#define LEDS_LED2        (1 << 4)
  58:./Board/LEDs.h **** 
  59:./Board/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  60:./Board/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2)
  61:./Board/LEDs.h **** 
  62:./Board/LEDs.h **** 			/** LED mask for the none of the board LEDs */
  63:./Board/LEDs.h **** 			#define LEDS_NO_LEDS     0
  64:./Board/LEDs.h **** 
  65:./Board/LEDs.h **** 		/* Inline Functions: */
  66:./Board/LEDs.h **** 		#if !defined(__DOXYGEN__)
  67:./Board/LEDs.h **** 			static inline void LEDs_Init(void)
  68:./Board/LEDs.h **** 			{
  69:./Board/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
 270               		.loc 5 69 0
 271 0040 8AB1      		in r24,0xa
 272 0042 8063      		ori r24,lo8(48)
 273 0044 8AB9      		out 0xa,r24
  70:./Board/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
 274               		.loc 5 70 0
 275 0046 8BB1      		in r24,0xb
 276 0048 8063      		ori r24,lo8(48)
 277 004a 8BB9      		out 0xb,r24
 278               	.LBE48:
 279               	.LBE47:
 209:Arduino-usbserial.c **** 
 210:Arduino-usbserial.c **** 	/* Hardware Initialization */
 211:Arduino-usbserial.c **** 	Serial_Init(9600, false);
 212:Arduino-usbserial.c **** 	LEDs_Init();
 213:Arduino-usbserial.c **** 	USB_Init();
 280               		.loc 3 213 0
 281 004c 0E94 0000 		call USB_Init
 282               	.LVL15:
 214:Arduino-usbserial.c **** 
 215:Arduino-usbserial.c **** 	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interfa
 216:Arduino-usbserial.c **** 	TCCR0B = (1 << CS02);
 283               		.loc 3 216 0
 284 0050 84E0      		ldi r24,lo8(4)
 285 0052 85BD      		out 0x25,r24
 286 0054 0895      		ret
 287               		.cfi_endproc
 288               	.LFE88:
 290               		.section	.text.startup.main,"ax",@progbits
 291               	.global	main
 293               	main:
 294               	.LFB87:
 115:Arduino-usbserial.c **** 	SetupHardware();
 295               		.loc 3 115 0
 296               		.cfi_startproc
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 116:Arduino-usbserial.c **** 	
 301               		.loc 3 116 0
 302 0000 0E94 0000 		call SetupHardware
 303               	.LVL16:
 304               	.LBB100:
 305               	.LBB101:
  87:Lib/LightweightRingBuff.h **** 			{
 306               		.loc 1 87 0
 307 0004 2FB7      		in r18,__SREG__
 308               	.LVL17:
 309               	.LBB102:
 310               	.LBB103:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 311               		.loc 2 50 0
 312               	/* #APP */
 313               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 314 0006 F894      		cli
 315               	 ;  0 "" 2
 316               	.LVL18:
 317               	/* #NOAPP */
 318               	.LBE103:
 319               	.LBE102:
  89:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 320               		.loc 1 89 0
 321 0008 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 322 000a 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 323 000c 9093 0000 		sts USBtoUSART_Buffer+128+1,r25
 324 0010 8093 0000 		sts USBtoUSART_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 			}
 325               		.loc 1 90 0
 326 0014 9093 0000 		sts USBtoUSART_Buffer+130+1,r25
 327 0018 8093 0000 		sts USBtoUSART_Buffer+130,r24
 328               	.LVL19:
 329               	.LBB104:
 330               	.LBB105:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 331               		.loc 2 70 0
 332 001c 2FBF      		out __SREG__,r18
 333               		.loc 2 71 0
 334               	.LVL20:
 335               	.LBE105:
 336               	.LBE104:
 337               	.LBE101:
 338               	.LBE100:
 339               	.LBB106:
 340               	.LBB107:
  87:Lib/LightweightRingBuff.h **** 			{
 341               		.loc 1 87 0
 342 001e 2FB7      		in r18,__SREG__
 343               	.LVL21:
 344               	.LBB108:
 345               	.LBB109:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 346               		.loc 2 50 0
 347               	/* #APP */
 348               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 349 0020 F894      		cli
 350               	 ;  0 "" 2
 351               	.LVL22:
 352               	/* #NOAPP */
 353               	.LBE109:
 354               	.LBE108:
  89:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 355               		.loc 1 89 0
 356 0022 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 357 0024 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 358 0026 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 359 002a 8093 0000 		sts USARTtoUSB_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 			}
 360               		.loc 1 90 0
 361 002e 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 362 0032 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 363               	.LVL23:
 364               	.LBB110:
 365               	.LBB111:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 366               		.loc 2 70 0
 367 0036 2FBF      		out __SREG__,r18
 368               	.LVL24:
 369               		.loc 2 71 0
 370               	.LBE111:
 371               	.LBE110:
 372               	.LBE107:
 373               	.LBE106:
 121:Arduino-usbserial.c **** 
 374               		.loc 3 121 0
 375               	/* #APP */
 376               	 ;  121 "Arduino-usbserial.c" 1
 377 0038 7894      		sei
 378               	 ;  0 "" 2
 379               	/* #NOAPP */
 380               	.LBB112:
 145:Arduino-usbserial.c **** 			}
 381               		.loc 3 145 0
 382 003a D3E0      		ldi r29,lo8(3)
 383               	.LVL25:
 384               	.L37:
 385               	.LBB113:
 386               	.LBB114:
 387               	.LBB115:
 388               	.LBB116:
 111:Lib/LightweightRingBuff.h **** 			{
 389               		.loc 1 111 0
 390 003c 9FB7      		in r25,__SREG__
 391               	.LVL26:
 392               	.LBB117:
 393               	.LBB118:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 394               		.loc 2 50 0
 395               	/* #APP */
 396               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 397 003e F894      		cli
 398               	 ;  0 "" 2
 399               	.LVL27:
 400               	/* #NOAPP */
 401               	.LBE118:
 402               	.LBE117:
 113:Lib/LightweightRingBuff.h **** 			}
 403               		.loc 1 113 0
 404 0040 8091 0000 		lds r24,USBtoUSART_Buffer+132
 405               	.LVL28:
 406               	.LBB119:
 407               	.LBB120:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 408               		.loc 2 70 0
 409 0044 9FBF      		out __SREG__,r25
 410               		.loc 2 71 0
 411               	.LBE120:
 412               	.LBE119:
 413               	.LBE116:
 414               	.LBE115:
 415               	.LBE114:
 416               	.LBE113:
 128:Arduino-usbserial.c **** 		{
 417               		.loc 3 128 0
 418 0046 8038      		cpi r24,lo8(-128)
 419 0048 01F0      		breq .L16
 420               	.LBB121:
 130:Arduino-usbserial.c **** 
 421               		.loc 3 130 0
 422 004a 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 423 004c 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 424               	.LVL29:
 425 004e 0E94 0000 		call CDC_Device_ReceiveByte
 426               	.LVL30:
 133:Arduino-usbserial.c **** 			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 427               		.loc 3 133 0
 428 0052 97FD      		sbrc r25,7
 429 0054 00C0      		rjmp .L16
 134:Arduino-usbserial.c **** 		}
 430               		.loc 3 134 0
 431 0056 682F      		mov r22,r24
 432 0058 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 433 005a 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 434               	.LVL31:
 435 005c 0E94 0000 		call RingBuffer_Insert
 436               	.LVL32:
 437               	.L16:
 438               	.LBE121:
 439               	.LBB122:
 440               	.LBB123:
 441               	.LBB124:
 111:Lib/LightweightRingBuff.h **** 			{
 442               		.loc 1 111 0
 443 0060 8FB7      		in r24,__SREG__
 444               	.LVL33:
 445               	.LBB125:
 446               	.LBB126:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 447               		.loc 2 50 0
 448               	/* #APP */
 449               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 450 0062 F894      		cli
 451               	 ;  0 "" 2
 452               	.LVL34:
 453               	/* #NOAPP */
 454               	.LBE126:
 455               	.LBE125:
 113:Lib/LightweightRingBuff.h **** 			}
 456               		.loc 1 113 0
 457 0064 C091 0000 		lds r28,USARTtoUSB_Buffer+132
 458               	.LVL35:
 459               	.LBB127:
 460               	.LBB128:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 461               		.loc 2 70 0
 462 0068 8FBF      		out __SREG__,r24
 463               		.loc 2 71 0
 464               	.LBE128:
 465               	.LBE127:
 466               	.LBE124:
 467               	.LBE123:
 468               	.LBE122:
 139:Arduino-usbserial.c **** 		{
 469               		.loc 3 139 0
 470 006a A899      		sbic 0x15,0
 471 006c 00C0      		rjmp .L18
 139:Arduino-usbserial.c **** 		{
 472               		.loc 3 139 0 is_stmt 0 discriminator 1
 473 006e C136      		cpi r28,lo8(97)
 474 0070 00F4      		brsh .+2
 475 0072 00C0      		rjmp .L19
 476               	.L18:
 141:Arduino-usbserial.c **** 
 477               		.loc 3 141 0 is_stmt 1
 478 0074 A89A      		sbi 0x15,0
 143:Arduino-usbserial.c **** 				LEDs_TurnOnLEDs(LEDMASK_TX);
 479               		.loc 3 143 0
 480 0076 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 481               	.LVL36:
 482 007a 8823      		tst r24
 483 007c 01F0      		breq .L21
 484               	.LVL37:
 485               	.LBB129:
 486               	.LBB130:
  71:./Board/LEDs.h **** 			}
  72:./Board/LEDs.h **** 			
  73:./Board/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  74:./Board/LEDs.h **** 			{
  75:./Board/LEDs.h **** 				PORTD &= ~LEDMask;
 487               		.loc 5 75 0
 488 007e 5D98      		cbi 0xb,5
 489               	.LBE130:
 490               	.LBE129:
 145:Arduino-usbserial.c **** 			}
 491               		.loc 3 145 0
 492 0080 D093 0000 		sts PulseMSRemaining,r29
 493               	.LVL38:
 494               	.L21:
 149:Arduino-usbserial.c **** 			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 495               		.loc 3 149 0 discriminator 1
 496 0084 CC23      		tst r28
 497 0086 01F0      		breq .L46
 150:Arduino-usbserial.c **** 			  
 498               		.loc 3 150 0
 499 0088 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 500 008a 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 501 008c 0E94 0000 		call RingBuffer_Remove
 502               	.LVL39:
 503 0090 682F      		mov r22,r24
 504 0092 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 505 0094 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 506 0096 0E94 0000 		call CDC_Device_SendByte
 507               	.LVL40:
 508 009a C150      		subi r28,lo8(-(-1))
 509               	.LVL41:
 510 009c 00C0      		rjmp .L21
 511               	.LVL42:
 512               	.L46:
 153:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_TX);
 513               		.loc 3 153 0
 514 009e 8091 0000 		lds r24,PulseMSRemaining
 515 00a2 8823      		tst r24
 516 00a4 01F0      		breq .L24
 153:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_TX);
 517               		.loc 3 153 0 is_stmt 0 discriminator 1
 518 00a6 8091 0000 		lds r24,PulseMSRemaining
 519 00aa 8150      		subi r24,lo8(-(-1))
 520 00ac 8093 0000 		sts PulseMSRemaining,r24
 521 00b0 8111      		cpse r24,__zero_reg__
 522 00b2 00C0      		rjmp .L24
 523               	.LVL43:
 524               	.LBB131:
 525               	.LBB132:
  76:./Board/LEDs.h **** 			}
  77:./Board/LEDs.h **** 
  78:./Board/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
  79:./Board/LEDs.h **** 			{
  80:./Board/LEDs.h **** 				PORTD |= LEDMask;
 526               		.loc 5 80 0 is_stmt 1
 527 00b4 5D9A      		sbi 0xb,5
 528               	.LVL44:
 529               	.L24:
 530               	.LBE132:
 531               	.LBE131:
 157:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_RX);
 532               		.loc 3 157 0
 533 00b6 8091 0000 		lds r24,PulseMSRemaining+1
 534 00ba 8823      		tst r24
 535 00bc 01F0      		breq .L27
 157:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_RX);
 536               		.loc 3 157 0 is_stmt 0 discriminator 1
 537 00be 8091 0000 		lds r24,PulseMSRemaining+1
 538 00c2 8150      		subi r24,lo8(-(-1))
 539 00c4 8093 0000 		sts PulseMSRemaining+1,r24
 540 00c8 8111      		cpse r24,__zero_reg__
 541 00ca 00C0      		rjmp .L27
 542               	.LVL45:
 543               	.LBB133:
 544               	.LBB134:
 545               		.loc 5 80 0 is_stmt 1
 546 00cc 5C9A      		sbi 0xb,4
 547               	.LVL46:
 548               	.L27:
 549               	.LBE134:
 550               	.LBE133:
 160:Arduino-usbserial.c **** 			{
 551               		.loc 3 160 0
 552 00ce 8091 0000 		lds r24,ResetTimer
 553 00d2 9091 0000 		lds r25,ResetTimer+1
 554 00d6 1816      		cp __zero_reg__,r24
 555 00d8 1906      		cpc __zero_reg__,r25
 556 00da 04F4      		brge .L29
 165:Arduino-usbserial.c **** 					setErasePin(true);
 557               		.loc 3 165 0
 558 00dc CC97      		sbiw r24,60
 559 00de CD97      		sbiw r24,61
 560 00e0 00F4      		brsh .L30
 166:Arduino-usbserial.c **** 				} else {
 561               		.loc 3 166 0
 562 00e2 81E0      		ldi r24,lo8(1)
 563 00e4 00C0      		rjmp .L44
 564               	.L30:
 168:Arduino-usbserial.c **** 				}
 565               		.loc 3 168 0
 566 00e6 80E0      		ldi r24,0
 567               	.L44:
 568 00e8 0E94 0000 		call setErasePin
 569               	.LVL47:
 172:Arduino-usbserial.c **** 					setResetPin(true);
 570               		.loc 3 172 0
 571 00ec 8091 0000 		lds r24,ResetTimer
 572 00f0 9091 0000 		lds r25,ResetTimer+1
 573 00f4 0197      		sbiw r24,1
 574 00f6 C297      		sbiw r24,50
 575 00f8 00F4      		brsh .L32
 173:Arduino-usbserial.c **** 				} else {
 576               		.loc 3 173 0
 577 00fa 81E0      		ldi r24,lo8(1)
 578 00fc 00C0      		rjmp .L45
 579               	.L32:
 175:Arduino-usbserial.c **** 				}
 580               		.loc 3 175 0
 581 00fe 80E0      		ldi r24,0
 582               	.L45:
 583 0100 0E94 0000 		call setResetPin
 584               	.LVL48:
 177:Arduino-usbserial.c **** 			} else {
 585               		.loc 3 177 0
 586 0104 8091 0000 		lds r24,ResetTimer
 587 0108 9091 0000 		lds r25,ResetTimer+1
 588 010c 0197      		sbiw r24,1
 589 010e 9093 0000 		sts ResetTimer+1,r25
 590 0112 8093 0000 		sts ResetTimer,r24
 591 0116 00C0      		rjmp .L19
 592               	.L29:
 179:Arduino-usbserial.c **** 				setResetPin(false);
 593               		.loc 3 179 0
 594 0118 80E0      		ldi r24,0
 595 011a 0E94 0000 		call setErasePin
 596               	.LVL49:
 180:Arduino-usbserial.c **** 			}
 597               		.loc 3 180 0
 598 011e 80E0      		ldi r24,0
 599 0120 0E94 0000 		call setResetPin
 600               	.LVL50:
 601               	.L19:
 602               	.LBB135:
 603               	.LBB136:
 604               	.LBB137:
 605               	.LBB138:
 111:Lib/LightweightRingBuff.h **** 			{
 606               		.loc 1 111 0
 607 0124 9FB7      		in r25,__SREG__
 608               	.LVL51:
 609               	.LBB139:
 610               	.LBB140:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 611               		.loc 2 50 0
 612               	/* #APP */
 613               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 614 0126 F894      		cli
 615               	 ;  0 "" 2
 616               	.LVL52:
 617               	/* #NOAPP */
 618               	.LBE140:
 619               	.LBE139:
 113:Lib/LightweightRingBuff.h **** 			}
 620               		.loc 1 113 0
 621 0128 8091 0000 		lds r24,USBtoUSART_Buffer+132
 622               	.LVL53:
 623               	.LBB141:
 624               	.LBB142:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 625               		.loc 2 70 0
 626 012c 9FBF      		out __SREG__,r25
 627               		.loc 2 71 0
 628               	.LBE142:
 629               	.LBE141:
 630               	.LBE138:
 631               	.LBE137:
 632               	.LBE136:
 633               	.LBE135:
 185:Arduino-usbserial.c **** 			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 634               		.loc 3 185 0
 635 012e 8823      		tst r24
 636 0130 01F0      		breq .L34
 186:Arduino-usbserial.c **** 			LEDs_TurnOnLEDs(LEDMASK_RX);
 637               		.loc 3 186 0
 638 0132 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 639 0134 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 640               	.LVL54:
 641 0136 0E94 0000 		call RingBuffer_Remove
 642               	.LVL55:
 643               	.L36:
 644               	.LBB143:
 645               	.LBB144:
 110:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 111:../../LUFA/Drivers/Peripheral/Serial.h **** 
 112:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Turns off the USART driver, disabling and returning used hardware to their default configura
 113:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_ShutDown(void)
 114:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 115:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = 0;
 116:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = 0;
 117:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = 0;
 118:../../LUFA/Drivers/Peripheral/Serial.h **** 
 119:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = 0;
 120:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 121:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  &= ~(1 << 3);
 122:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD &= ~(1 << 2);
 123:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 124:../../LUFA/Drivers/Peripheral/Serial.h **** 
 125:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Indicates whether a character has been received through the USART.
 126:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
 127:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \return Boolean true if a character has been received, false otherwise.
 128:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
 129:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 130:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void)
 131:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 132:../../LUFA/Drivers/Peripheral/Serial.h **** 				return ((UCSR1A & (1 << RXC1)) ? true : false);
 133:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 134:../../LUFA/Drivers/Peripheral/Serial.h **** 			
 135:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given byte through the USART.
 136:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
 137:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DataByte  Byte to transmit through the USART.
 138:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
 139:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
 140:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte)
 141:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 142:../../LUFA/Drivers/Peripheral/Serial.h **** 				while (!(UCSR1A & (1 << UDRE1)));
 646               		.loc 4 142 0
 647 013a 9091 C800 		lds r25,200
 648 013e 95FF      		sbrs r25,5
 649 0140 00C0      		rjmp .L36
 143:../../LUFA/Drivers/Peripheral/Serial.h **** 				UDR1 = DataByte;
 650               		.loc 4 143 0
 651 0142 8093 CE00 		sts 206,r24
 652               	.LVL56:
 653               	.LBE144:
 654               	.LBE143:
 655               	.LBB145:
 656               	.LBB146:
  75:./Board/LEDs.h **** 			}
 657               		.loc 5 75 0
 658 0146 5C98      		cbi 0xb,4
 659               	.LBE146:
 660               	.LBE145:
 188:Arduino-usbserial.c **** 		}
 661               		.loc 3 188 0
 662 0148 D093 0000 		sts PulseMSRemaining+1,r29
 663               	.LVL57:
 664               	.L34:
 191:Arduino-usbserial.c **** 		USB_USBTask();
 665               		.loc 3 191 0
 666 014c 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 667 014e 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 668 0150 0E94 0000 		call CDC_Device_USBTask
 669               	.LVL58:
 192:Arduino-usbserial.c **** 	}
 670               		.loc 3 192 0
 671 0154 0E94 0000 		call USB_USBTask
 672               	.LVL59:
 673               	.LBE112:
 193:Arduino-usbserial.c **** 
 674               		.loc 3 193 0
 675 0158 00C0      		rjmp .L37
 676               		.cfi_endproc
 677               	.LFE87:
 679               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 680               	.global	EVENT_USB_Device_ConfigurationChanged
 682               	EVENT_USB_Device_ConfigurationChanged:
 683               	.LFB89:
 217:Arduino-usbserial.c **** }
 218:Arduino-usbserial.c **** 
 219:Arduino-usbserial.c **** /** Event handler for the library USB Configuration Changed event. */
 220:Arduino-usbserial.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 221:Arduino-usbserial.c **** {
 684               		.loc 3 221 0
 685               		.cfi_startproc
 686               	/* prologue: function */
 687               	/* frame size = 0 */
 688               	/* stack size = 0 */
 689               	.L__stack_usage = 0
 222:Arduino-usbserial.c **** 	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 690               		.loc 3 222 0
 691 0000 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 692 0002 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 693 0004 0C94 0000 		jmp CDC_Device_ConfigureEndpoints
 694               	.LVL60:
 695               		.cfi_endproc
 696               	.LFE89:
 698               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 699               	.global	EVENT_USB_Device_UnhandledControlRequest
 701               	EVENT_USB_Device_UnhandledControlRequest:
 702               	.LFB90:
 223:Arduino-usbserial.c **** }
 224:Arduino-usbserial.c **** 
 225:Arduino-usbserial.c **** /** Event handler for the library USB Unhandled Control Request event. */
 226:Arduino-usbserial.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 227:Arduino-usbserial.c **** {
 703               		.loc 3 227 0
 704               		.cfi_startproc
 705               	/* prologue: function */
 706               	/* frame size = 0 */
 707               	/* stack size = 0 */
 708               	.L__stack_usage = 0
 228:Arduino-usbserial.c **** 	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 709               		.loc 3 228 0
 710 0000 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 711 0002 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 712 0004 0C94 0000 		jmp CDC_Device_ProcessControlRequest
 713               	.LVL61:
 714               		.cfi_endproc
 715               	.LFE90:
 717               		.section	.text.EVENT_CDC_Device_LineEncodingChanged,"ax",@progbits
 718               	.global	EVENT_CDC_Device_LineEncodingChanged
 720               	EVENT_CDC_Device_LineEncodingChanged:
 721               	.LFB91:
 229:Arduino-usbserial.c **** }
 230:Arduino-usbserial.c **** 
 231:Arduino-usbserial.c **** /** Event handler for the CDC Class driver Line Encoding Changed event.
 232:Arduino-usbserial.c ****  *
 233:Arduino-usbserial.c ****  *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being r
 234:Arduino-usbserial.c ****  */
 235:Arduino-usbserial.c **** void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
 236:Arduino-usbserial.c **** {
 722               		.loc 3 236 0
 723               		.cfi_startproc
 724               	.LVL62:
 725 0000 CF92      		push r12
 726               	.LCFI0:
 727               		.cfi_def_cfa_offset 3
 728               		.cfi_offset 12, -2
 729 0002 DF92      		push r13
 730               	.LCFI1:
 731               		.cfi_def_cfa_offset 4
 732               		.cfi_offset 13, -3
 733 0004 EF92      		push r14
 734               	.LCFI2:
 735               		.cfi_def_cfa_offset 5
 736               		.cfi_offset 14, -4
 737 0006 FF92      		push r15
 738               	.LCFI3:
 739               		.cfi_def_cfa_offset 6
 740               		.cfi_offset 15, -5
 741 0008 CF93      		push r28
 742               	.LCFI4:
 743               		.cfi_def_cfa_offset 7
 744               		.cfi_offset 28, -6
 745               	/* prologue: function */
 746               	/* frame size = 0 */
 747               	/* stack size = 5 */
 748               	.L__stack_usage = 5
 749 000a FC01      		movw r30,r24
 750               	.LVL63:
 237:Arduino-usbserial.c **** 	uint8_t ConfigMask = 0;
 238:Arduino-usbserial.c **** 
 239:Arduino-usbserial.c **** 	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 751               		.loc 3 239 0
 752 000c 8489      		ldd r24,Z+20
 753               	.LVL64:
 754 000e 8130      		cpi r24,lo8(1)
 755 0010 01F0      		breq .L59
 756 0012 8230      		cpi r24,lo8(2)
 757 0014 01F0      		breq .L52
 237:Arduino-usbserial.c **** 	uint8_t ConfigMask = 0;
 758               		.loc 3 237 0
 759 0016 C0E0      		ldi r28,0
 760 0018 00C0      		rjmp .L51
 761               	.L52:
 762               	.LVL65:
 240:Arduino-usbserial.c **** 	{
 241:Arduino-usbserial.c **** 		case CDC_PARITY_Odd:
 242:Arduino-usbserial.c **** 			ConfigMask = ((1 << UPM11) | (1 << UPM10));		
 243:Arduino-usbserial.c **** 			break;
 244:Arduino-usbserial.c **** 		case CDC_PARITY_Even:
 245:Arduino-usbserial.c **** 			ConfigMask = (1 << UPM11);		
 763               		.loc 3 245 0
 764 001a C0E2      		ldi r28,lo8(32)
 246:Arduino-usbserial.c **** 			break;
 765               		.loc 3 246 0
 766 001c 00C0      		rjmp .L51
 767               	.LVL66:
 768               	.L59:
 242:Arduino-usbserial.c **** 			break;
 769               		.loc 3 242 0
 770 001e C0E3      		ldi r28,lo8(48)
 771               	.LVL67:
 772               	.L51:
 247:Arduino-usbserial.c **** 	}
 248:Arduino-usbserial.c **** 
 249:Arduino-usbserial.c **** 	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 773               		.loc 3 249 0
 774 0020 8389      		ldd r24,Z+19
 775 0022 8230      		cpi r24,lo8(2)
 776 0024 01F4      		brne .L53
 250:Arduino-usbserial.c **** 	  ConfigMask |= (1 << USBS1);
 777               		.loc 3 250 0
 778 0026 C860      		ori r28,lo8(8)
 779               	.LVL68:
 780               	.L53:
 251:Arduino-usbserial.c **** 
 252:Arduino-usbserial.c **** 	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 781               		.loc 3 252 0
 782 0028 8589      		ldd r24,Z+21
 783 002a 8730      		cpi r24,lo8(7)
 784 002c 01F0      		breq .L55
 785 002e 8830      		cpi r24,lo8(8)
 786 0030 01F0      		breq .L56
 787 0032 8630      		cpi r24,lo8(6)
 788 0034 01F4      		brne .L54
 253:Arduino-usbserial.c **** 	{
 254:Arduino-usbserial.c **** 		case 6:
 255:Arduino-usbserial.c **** 			ConfigMask |= (1 << UCSZ10);
 789               		.loc 3 255 0
 790 0036 C260      		ori r28,lo8(2)
 791               	.LVL69:
 256:Arduino-usbserial.c **** 			break;
 792               		.loc 3 256 0
 793 0038 00C0      		rjmp .L54
 794               	.L55:
 257:Arduino-usbserial.c **** 		case 7:
 258:Arduino-usbserial.c **** 			ConfigMask |= (1 << UCSZ11);
 795               		.loc 3 258 0
 796 003a C460      		ori r28,lo8(4)
 797               	.LVL70:
 259:Arduino-usbserial.c **** 			break;
 798               		.loc 3 259 0
 799 003c 00C0      		rjmp .L54
 800               	.L56:
 260:Arduino-usbserial.c **** 		case 8:
 261:Arduino-usbserial.c **** 			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 801               		.loc 3 261 0
 802 003e C660      		ori r28,lo8(6)
 803               	.LVL71:
 804               	.L54:
 262:Arduino-usbserial.c **** 			break;
 263:Arduino-usbserial.c **** 	}
 264:Arduino-usbserial.c **** 
 265:Arduino-usbserial.c **** 	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
 266:Arduino-usbserial.c **** 	UCSR1B = 0;
 805               		.loc 3 266 0
 806 0040 1092 C900 		sts 201,__zero_reg__
 267:Arduino-usbserial.c **** 	UCSR1A = 0;
 807               		.loc 3 267 0
 808 0044 1092 C800 		sts 200,__zero_reg__
 268:Arduino-usbserial.c **** 	UCSR1C = 0;
 809               		.loc 3 268 0
 810 0048 1092 CA00 		sts 202,__zero_reg__
 269:Arduino-usbserial.c **** 
 270:Arduino-usbserial.c **** 	long bps = CDCInterfaceInfo->State.LineEncoding.BaudRateBPS;
 811               		.loc 3 270 0
 812 004c C784      		ldd r12,Z+15
 813 004e D088      		ldd r13,Z+16
 814 0050 E188      		ldd r14,Z+17
 815 0052 F288      		ldd r15,Z+18
 816               	.LVL72:
 271:Arduino-usbserial.c **** 	Selected1200BPS = (bps == 1200);
 817               		.loc 3 271 0
 818 0054 81E0      		ldi r24,lo8(1)
 819 0056 90EB      		ldi r25,-80
 820 0058 C916      		cp r12,r25
 821 005a 94E0      		ldi r25,4
 822 005c D906      		cpc r13,r25
 823 005e E104      		cpc r14,__zero_reg__
 824 0060 F104      		cpc r15,__zero_reg__
 825 0062 01F0      		breq .L58
 826 0064 80E0      		ldi r24,0
 827               	.L58:
 828 0066 8093 0000 		sts Selected1200BPS,r24
 272:Arduino-usbserial.c **** 
 273:Arduino-usbserial.c **** 	UBRR1  = SERIAL_2X_UBBRVAL(bps);
 829               		.loc 3 273 0
 830 006a C701      		movw r24,r14
 831 006c B601      		movw r22,r12
 832 006e 22E0      		ldi r18,lo8(2)
 833 0070 30E0      		ldi r19,0
 834 0072 40E0      		ldi r20,0
 835 0074 50E0      		ldi r21,0
 836 0076 0E94 0000 		call __divmodsi4
 837               	.LVL73:
 838 007a 2058      		subi r18,-128
 839 007c 3B47      		sbci r19,123
 840 007e 414E      		sbci r20,-31
 841 0080 5F4F      		sbci r21,-1
 842 0082 CA01      		movw r24,r20
 843 0084 B901      		movw r22,r18
 844 0086 A701      		movw r20,r14
 845 0088 9601      		movw r18,r12
 846 008a 0E94 0000 		call __udivmodsi4
 847 008e 2150      		subi r18,1
 848 0090 3109      		sbc r19,__zero_reg__
 849 0092 3093 CD00 		sts 204+1,r19
 850 0096 2093 CC00 		sts 204,r18
 274:Arduino-usbserial.c **** 	UCSR1C = ConfigMask;
 851               		.loc 3 274 0
 852 009a C093 CA00 		sts 202,r28
 275:Arduino-usbserial.c **** 	UCSR1A = (1 << U2X1);
 853               		.loc 3 275 0
 854 009e 82E0      		ldi r24,lo8(2)
 855 00a0 8093 C800 		sts 200,r24
 276:Arduino-usbserial.c **** 	UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
 856               		.loc 3 276 0
 857 00a4 88E9      		ldi r24,lo8(-104)
 858 00a6 8093 C900 		sts 201,r24
 859               	/* epilogue start */
 277:Arduino-usbserial.c **** }
 860               		.loc 3 277 0
 861 00aa CF91      		pop r28
 862               	.LVL74:
 863 00ac FF90      		pop r15
 864 00ae EF90      		pop r14
 865 00b0 DF90      		pop r13
 866 00b2 CF90      		pop r12
 867               	.LVL75:
 868 00b4 0895      		ret
 869               		.cfi_endproc
 870               	.LFE91:
 872               		.section	.text.__vector_23,"ax",@progbits
 873               	.global	__vector_23
 875               	__vector_23:
 876               	.LFB92:
 278:Arduino-usbserial.c **** 
 279:Arduino-usbserial.c **** /** ISR to manage the reception of data from the serial port, placing received bytes into a circula
 280:Arduino-usbserial.c ****  *  for later transmission to the host.
 281:Arduino-usbserial.c ****  */
 282:Arduino-usbserial.c **** ISR(USART1_RX_vect, ISR_BLOCK)
 283:Arduino-usbserial.c **** {
 877               		.loc 3 283 0
 878               		.cfi_startproc
 879 0000 1F92      		push r1
 880               	.LCFI5:
 881               		.cfi_def_cfa_offset 3
 882               		.cfi_offset 1, -2
 883 0002 0F92      		push r0
 884               	.LCFI6:
 885               		.cfi_def_cfa_offset 4
 886               		.cfi_offset 0, -3
 887 0004 0FB6      		in r0,__SREG__
 888 0006 0F92      		push r0
 889 0008 1124      		clr __zero_reg__
 890 000a 2F93      		push r18
 891               	.LCFI7:
 892               		.cfi_def_cfa_offset 5
 893               		.cfi_offset 18, -4
 894 000c 3F93      		push r19
 895               	.LCFI8:
 896               		.cfi_def_cfa_offset 6
 897               		.cfi_offset 19, -5
 898 000e 4F93      		push r20
 899               	.LCFI9:
 900               		.cfi_def_cfa_offset 7
 901               		.cfi_offset 20, -6
 902 0010 5F93      		push r21
 903               	.LCFI10:
 904               		.cfi_def_cfa_offset 8
 905               		.cfi_offset 21, -7
 906 0012 6F93      		push r22
 907               	.LCFI11:
 908               		.cfi_def_cfa_offset 9
 909               		.cfi_offset 22, -8
 910 0014 7F93      		push r23
 911               	.LCFI12:
 912               		.cfi_def_cfa_offset 10
 913               		.cfi_offset 23, -9
 914 0016 8F93      		push r24
 915               	.LCFI13:
 916               		.cfi_def_cfa_offset 11
 917               		.cfi_offset 24, -10
 918 0018 9F93      		push r25
 919               	.LCFI14:
 920               		.cfi_def_cfa_offset 12
 921               		.cfi_offset 25, -11
 922 001a AF93      		push r26
 923               	.LCFI15:
 924               		.cfi_def_cfa_offset 13
 925               		.cfi_offset 26, -12
 926 001c BF93      		push r27
 927               	.LCFI16:
 928               		.cfi_def_cfa_offset 14
 929               		.cfi_offset 27, -13
 930 001e EF93      		push r30
 931               	.LCFI17:
 932               		.cfi_def_cfa_offset 15
 933               		.cfi_offset 30, -14
 934 0020 FF93      		push r31
 935               	.LCFI18:
 936               		.cfi_def_cfa_offset 16
 937               		.cfi_offset 31, -15
 938               	/* prologue: Signal */
 939               	/* frame size = 0 */
 940               	/* stack size = 15 */
 941               	.L__stack_usage = 15
 284:Arduino-usbserial.c **** 	uint8_t ReceivedByte = UDR1;
 942               		.loc 3 284 0
 943 0022 6091 CE00 		lds r22,206
 944               	.LVL76:
 285:Arduino-usbserial.c **** 
 286:Arduino-usbserial.c **** 	if (USB_DeviceState == DEVICE_STATE_Configured)
 945               		.loc 3 286 0
 946 0026 8EB3      		in r24,0x1e
 947 0028 8430      		cpi r24,lo8(4)
 948 002a 01F4      		brne .L63
 287:Arduino-usbserial.c **** 	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 949               		.loc 3 287 0
 950 002c 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 951 002e 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 952 0030 0E94 0000 		call RingBuffer_Insert
 953               	.LVL77:
 954               	.L63:
 955               	/* epilogue start */
 288:Arduino-usbserial.c **** }
 956               		.loc 3 288 0
 957 0034 FF91      		pop r31
 958 0036 EF91      		pop r30
 959 0038 BF91      		pop r27
 960 003a AF91      		pop r26
 961 003c 9F91      		pop r25
 962 003e 8F91      		pop r24
 963 0040 7F91      		pop r23
 964 0042 6F91      		pop r22
 965 0044 5F91      		pop r21
 966 0046 4F91      		pop r20
 967 0048 3F91      		pop r19
 968 004a 2F91      		pop r18
 969 004c 0F90      		pop r0
 970 004e 0FBE      		out __SREG__,r0
 971 0050 0F90      		pop r0
 972 0052 1F90      		pop r1
 973 0054 1895      		reti
 974               		.cfi_endproc
 975               	.LFE92:
 977               		.section	.text.EVENT_CDC_Device_ControLineStateChanged,"ax",@progbits
 978               	.global	EVENT_CDC_Device_ControLineStateChanged
 980               	EVENT_CDC_Device_ControLineStateChanged:
 981               	.LFB93:
 289:Arduino-usbserial.c **** 
 290:Arduino-usbserial.c **** /** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 291:Arduino-usbserial.c ****  *
 292:Arduino-usbserial.c ****  *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being r
 293:Arduino-usbserial.c ****  */
 294:Arduino-usbserial.c **** void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
 295:Arduino-usbserial.c **** {
 982               		.loc 3 295 0
 983               		.cfi_startproc
 984               	.LVL78:
 985               	/* prologue: function */
 986               	/* frame size = 0 */
 987               	/* stack size = 0 */
 988               	.L__stack_usage = 0
 296:Arduino-usbserial.c **** 	PreviousDTRState = CurrentDTRState;
 989               		.loc 3 296 0
 990 0000 2091 0000 		lds r18,CurrentDTRState
 991 0004 2093 0000 		sts PreviousDTRState,r18
 297:Arduino-usbserial.c **** 	PreviousRTSState = CurrentRTSState;
 992               		.loc 3 297 0
 993 0008 3091 0000 		lds r19,CurrentRTSState
 994 000c 3093 0000 		sts PreviousRTSState,r19
 298:Arduino-usbserial.c **** 	CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_D
 995               		.loc 3 298 0
 996 0010 FC01      		movw r30,r24
 997 0012 9585      		ldd r25,Z+13
 998 0014 892F      		mov r24,r25
 999               	.LVL79:
 1000 0016 8170      		andi r24,lo8(1)
 1001 0018 8093 0000 		sts CurrentDTRState,r24
 299:Arduino-usbserial.c **** 	CurrentRTSState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_R
 1002               		.loc 3 299 0
 1003 001c 9695      		lsr r25
 1004 001e 9170      		andi r25,1
 1005 0020 9093 0000 		sts CurrentRTSState,r25
 300:Arduino-usbserial.c **** 
 301:Arduino-usbserial.c **** 	if (Selected1200BPS) {
 1006               		.loc 3 301 0
 1007 0024 9091 0000 		lds r25,Selected1200BPS
 1008 0028 9923      		tst r25
 1009 002a 01F0      		breq .L66
 302:Arduino-usbserial.c **** 		/* Start Erase / Reset procedure when receiving the magic "1200" baudrate */
 303:Arduino-usbserial.c **** 		ResetTimer = 120;
 1010               		.loc 3 303 0
 1011 002c 88E7      		ldi r24,lo8(120)
 1012 002e 90E0      		ldi r25,0
 1013 0030 00C0      		rjmp .L71
 1014               	.L66:
 304:Arduino-usbserial.c **** 	} else if (!PreviousDTRState && CurrentDTRState) {
 1015               		.loc 3 304 0
 1016 0032 2111      		cpse r18,__zero_reg__
 1017 0034 00C0      		rjmp .L65
 1018               		.loc 3 304 0 is_stmt 0 discriminator 1
 1019 0036 8823      		tst r24
 1020 0038 01F0      		breq .L65
 305:Arduino-usbserial.c **** 		/* Reset on rising edge of DTR */
 306:Arduino-usbserial.c **** 		ResetTimer = 50;
 1021               		.loc 3 306 0 is_stmt 1
 1022 003a 82E3      		ldi r24,lo8(50)
 1023 003c 90E0      		ldi r25,0
 1024               	.L71:
 1025 003e 9093 0000 		sts ResetTimer+1,r25
 1026 0042 8093 0000 		sts ResetTimer,r24
 1027               	.L65:
 1028 0046 0895      		ret
 1029               		.cfi_endproc
 1030               	.LFE93:
 1032               	.global	Selected1200BPS
 1033               		.section .bss
 1036               	Selected1200BPS:
 1037 0000 00        		.zero	1
 1038               	.global	PreviousRTSState
 1041               	PreviousRTSState:
 1042 0001 00        		.zero	1
 1043               	.global	CurrentRTSState
 1046               	CurrentRTSState:
 1047 0002 00        		.zero	1
 1048               	.global	PreviousDTRState
 1051               	PreviousDTRState:
 1052 0003 00        		.zero	1
 1053               	.global	CurrentDTRState
 1056               	CurrentDTRState:
 1057 0004 00        		.zero	1
 1058               	.global	tries
 1059               		.data
 1062               	tries:
 1063 0000 1400      		.word	20
 1064               	.global	ResetTimer
 1065               		.section .bss
 1068               	ResetTimer:
 1069 0005 0000      		.zero	2
 1070               	.global	VirtualSerial_CDC_Interface
 1071               		.data
 1074               	VirtualSerial_CDC_Interface:
 1075 0002 00        		.byte	0
 1076 0003 03        		.byte	3
 1077 0004 4000      		.word	64
 1078 0006 00        		.byte	0
 1079 0007 04        		.byte	4
 1080 0008 4000      		.word	64
 1081 000a 00        		.byte	0
 1082 000b 02        		.byte	2
 1083 000c 0800      		.word	8
 1084 000e 00        		.byte	0
 1085 000f 0000 0000 		.zero	9
 1085      0000 0000 
 1085      00
 1086               		.comm	PulseMSRemaining,3,1
 1087               		.comm	USARTtoUSB_Buffer,133,1
 1088               		.comm	USBtoUSART_Buffer,133,1
 1089               		.text
 1090               	.Letext0:
 1091               		.file 6 "/usr/lib/avr/include/stdint.h"
 1092               		.file 7 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
 1093               		.file 8 "../../LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1094               		.file 9 "../../LUFA/Drivers/USB/Class/Device/CDC.h"
 1095               		.file 10 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 1096               		.file 11 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Arduino-usbserial.c
     /tmp/ccwjBkDd.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccwjBkDd.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccwjBkDd.s:4      *ABS*:0000003f __SREG__
     /tmp/ccwjBkDd.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccwjBkDd.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccwjBkDd.s:12     .text.RingBuffer_Insert:00000000 RingBuffer_Insert
     /tmp/ccwjBkDd.s:85     .text.RingBuffer_Remove:00000000 RingBuffer_Remove
     /tmp/ccwjBkDd.s:158    .text.setResetPin:00000000 setResetPin
     /tmp/ccwjBkDd.s:187    .text.setErasePin:00000000 setErasePin
     /tmp/ccwjBkDd.s:212    .text.SetupHardware:00000000 SetupHardware
     /tmp/ccwjBkDd.s:293    .text.startup.main:00000000 main
                            *COM*:00000085 USBtoUSART_Buffer
                            *COM*:00000085 USARTtoUSB_Buffer
     /tmp/ccwjBkDd.s:1074   .data:00000002 VirtualSerial_CDC_Interface
                            *COM*:00000003 PulseMSRemaining
     /tmp/ccwjBkDd.s:1068   .bss:00000005 ResetTimer
     /tmp/ccwjBkDd.s:682    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccwjBkDd.s:701    .text.EVENT_USB_Device_UnhandledControlRequest:00000000 EVENT_USB_Device_UnhandledControlRequest
     /tmp/ccwjBkDd.s:720    .text.EVENT_CDC_Device_LineEncodingChanged:00000000 EVENT_CDC_Device_LineEncodingChanged
     /tmp/ccwjBkDd.s:1036   .bss:00000000 Selected1200BPS
     /tmp/ccwjBkDd.s:875    .text.__vector_23:00000000 __vector_23
     /tmp/ccwjBkDd.s:980    .text.EVENT_CDC_Device_ControLineStateChanged:00000000 EVENT_CDC_Device_ControLineStateChanged
     /tmp/ccwjBkDd.s:1056   .bss:00000004 CurrentDTRState
     /tmp/ccwjBkDd.s:1051   .bss:00000003 PreviousDTRState
     /tmp/ccwjBkDd.s:1046   .bss:00000002 CurrentRTSState
     /tmp/ccwjBkDd.s:1041   .bss:00000001 PreviousRTSState
     /tmp/ccwjBkDd.s:1062   .data:00000000 tries

UNDEFINED SYMBOLS
USB_Init
CDC_Device_ReceiveByte
CDC_Device_SendByte
CDC_Device_USBTask
USB_USBTask
CDC_Device_ConfigureEndpoints
CDC_Device_ProcessControlRequest
__divmodsi4
__udivmodsi4
__do_copy_data
__do_clear_bss
