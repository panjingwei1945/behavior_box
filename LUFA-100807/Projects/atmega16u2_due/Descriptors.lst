   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /* On some devices, there is a factory set internal serial number which can be automatically sent t
  41:Descriptors.c ****  * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_I
  42:Descriptors.c ****  * This allows the host to track a device across insertions on different ports, allowing them to re
  43:Descriptors.c ****  * resources like COM port numbers and drivers. On demos using this feature, give a warning on unsu
  44:Descriptors.c ****  * so that the user can supply their own serial number descriptor instead or remove the USE_INTERNA
  45:Descriptors.c ****  * from the Device Descriptor (forcing the host to generate a serial number for each device from th
  46:Descriptors.c ****  * port location).
  47:Descriptors.c ****  */
  48:Descriptors.c **** #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  49:Descriptors.c **** 	#warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device ser
  50:Descriptors.c **** #endif
  51:Descriptors.c **** 
  52:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  53:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  54:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  55:Descriptors.c ****  *  process begins.
  56:Descriptors.c ****  */
  57:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  58:Descriptors.c **** {
  59:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  60:Descriptors.c **** 		
  61:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  62:Descriptors.c **** 	.Class                  = 0x02,
  63:Descriptors.c **** 	.SubClass               = 0x00,
  64:Descriptors.c **** 	.Protocol               = 0x00,
  65:Descriptors.c **** 				
  66:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  67:Descriptors.c **** 		
  68:Descriptors.c **** 	.VendorID               = 0x2341, // Arduino
  69:Descriptors.c **** 	.ProductID          	= 0x003D, // Arduino Due on board USB2Serial
  70:Descriptors.c **** 
  71:Descriptors.c **** 	.ReleaseNumber          = 0x0001,
  72:Descriptors.c **** 		
  73:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
  74:Descriptors.c **** 	.ProductStrIndex        = 0x02,
  75:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  76:Descriptors.c **** 		
  77:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  78:Descriptors.c **** };
  79:Descriptors.c **** 
  80:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  81:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  82:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  83:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  84:Descriptors.c ****  */
  85:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
  86:Descriptors.c **** {
  87:Descriptors.c **** 	.Config = 
  88:Descriptors.c **** 		{
  89:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  90:Descriptors.c **** 
  91:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  92:Descriptors.c **** 			.TotalInterfaces        = 2,
  93:Descriptors.c **** 				
  94:Descriptors.c **** 			.ConfigurationNumber    = 1,
  95:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  96:Descriptors.c **** 				
  97:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
  98:Descriptors.c **** 			
  99:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 100:Descriptors.c **** 		},
 101:Descriptors.c **** 		
 102:Descriptors.c **** 	.CDC_CCI_Interface = 
 103:Descriptors.c **** 		{
 104:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 105:Descriptors.c **** 
 106:Descriptors.c **** 			.InterfaceNumber        = 0,
 107:Descriptors.c **** 			.AlternateSetting       = 0,
 108:Descriptors.c **** 			
 109:Descriptors.c **** 			.TotalEndpoints         = 1,
 110:Descriptors.c **** 				
 111:Descriptors.c **** 			.Class                  = 0x02,
 112:Descriptors.c **** 			.SubClass               = 0x02,
 113:Descriptors.c **** 			.Protocol               = 0x01,
 114:Descriptors.c **** 				
 115:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 116:Descriptors.c **** 		},
 117:Descriptors.c **** 
 118:Descriptors.c **** 	.CDC_Functional_IntHeader = 
 119:Descriptors.c **** 		{
 120:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 121:Descriptors.c **** 			.SubType                = 0x00,
 122:Descriptors.c **** 			
 123:Descriptors.c **** 			.Data                   = {0x01, 0x10}
 124:Descriptors.c **** 		},
 125:Descriptors.c **** 
 126:Descriptors.c **** 	.CDC_Functional_AbstractControlManagement = 
 127:Descriptors.c **** 		{
 128:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(1)), .Type = 0x24},
 129:Descriptors.c **** 			.SubType                = 0x02,
 130:Descriptors.c **** 			
 131:Descriptors.c **** 			.Data                   = {0x06}
 132:Descriptors.c **** 		},
 133:Descriptors.c **** 		
 134:Descriptors.c **** 	.CDC_Functional_Union = 
 135:Descriptors.c **** 		{
 136:Descriptors.c **** 			.Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24},
 137:Descriptors.c **** 			.SubType                = 0x06,
 138:Descriptors.c **** 			
 139:Descriptors.c **** 			.Data                   = {0x00, 0x01}
 140:Descriptors.c **** 		},
 141:Descriptors.c **** 
 142:Descriptors.c **** 	.CDC_NotificationEndpoint = 
 143:Descriptors.c **** 		{
 144:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 145:Descriptors.c **** 			
 146:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 147:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 148:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 149:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 150:Descriptors.c **** 		},
 151:Descriptors.c **** 
 152:Descriptors.c **** 	.CDC_DCI_Interface = 
 153:Descriptors.c **** 		{
 154:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 155:Descriptors.c **** 
 156:Descriptors.c **** 			.InterfaceNumber        = 1,
 157:Descriptors.c **** 			.AlternateSetting       = 0,
 158:Descriptors.c **** 			
 159:Descriptors.c **** 			.TotalEndpoints         = 2,
 160:Descriptors.c **** 				
 161:Descriptors.c **** 			.Class                  = 0x0A,
 162:Descriptors.c **** 			.SubClass               = 0x00,
 163:Descriptors.c **** 			.Protocol               = 0x00,
 164:Descriptors.c **** 				
 165:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 166:Descriptors.c **** 		},
 167:Descriptors.c **** 
 168:Descriptors.c **** 	.CDC_DataOutEndpoint = 
 169:Descriptors.c **** 		{
 170:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 171:Descriptors.c **** 			
 172:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 173:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 174:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 175:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 176:Descriptors.c **** 		},
 177:Descriptors.c **** 		
 178:Descriptors.c **** 	.CDC_DataInEndpoint = 
 179:Descriptors.c **** 		{
 180:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 181:Descriptors.c **** 			
 182:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 183:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 184:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 185:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 186:Descriptors.c **** 		}
 187:Descriptors.c **** };
 188:Descriptors.c **** 
 189:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 190:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 191:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 192:Descriptors.c ****  */
 193:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 194:Descriptors.c **** {
 195:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 196:Descriptors.c **** 		
 197:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 198:Descriptors.c **** };
 199:Descriptors.c **** 
 200:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 201:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 202:Descriptors.c ****  *  Descriptor.
 203:Descriptors.c ****  */
 204:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 205:Descriptors.c **** {
 206:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(24), .Type = DTYPE_String},
 207:Descriptors.c **** 		
 208:Descriptors.c **** 	.UnicodeString          = L"Arduino (www.arduino.cc)"
 209:Descriptors.c **** };
 210:Descriptors.c **** 
 211:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 212:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 213:Descriptors.c ****  *  Descriptor.
 214:Descriptors.c ****  */
 215:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 216:Descriptors.c **** {
 217:Descriptors.c **** 	#if (ARDUINO_MODEL_PID == ARDUINO_UNO_PID)
 218:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 219:Descriptors.c **** 			
 220:Descriptors.c **** 		.UnicodeString          = L"Arduino Uno"
 221:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == ARDUINO_DUE_PID)
 222:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(22), .Type = DTYPE_String},
 223:Descriptors.c **** 			
 224:Descriptors.c **** 		.UnicodeString          = L"Arduino Due Prog. Port"
 225:Descriptors.c **** 	#elif (ARDUINO_MODEL_PID == ARDUINO_MEGA2560_PID)
 226:Descriptors.c **** 		.Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 227:Descriptors.c **** 			
 228:Descriptors.c **** 		.UnicodeString          = L"Arduino Mega 2560"
 229:Descriptors.c **** 	#endif
 230:Descriptors.c **** 	
 231:Descriptors.c **** };
 232:Descriptors.c **** 
 233:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 234:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 235:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 236:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 237:Descriptors.c ****  *  USB host.
 238:Descriptors.c ****  */
 239:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 240:Descriptors.c ****                                     const uint8_t wIndex,
 241:Descriptors.c ****                                     void** const DescriptorAddress)
 242:Descriptors.c **** {
  16               		.loc 1 242 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 243:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 243 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 244:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 245:Descriptors.c **** 
 246:Descriptors.c **** 	void*    Address = NULL;
 247:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 248:Descriptors.c **** 
 249:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 249 0
  27 0004 2230      		cpi r18,2
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 2330      		cpi r18,3
  31 000c 3105      		cpc r19,__zero_reg__
  32 000e 01F0      		breq .L4
  33 0010 2130      		cpi r18,1
  34 0012 3105      		cpc r19,__zero_reg__
  35 0014 01F4      		brne .L11
 250:Descriptors.c **** 	{
 251:Descriptors.c **** 		case DTYPE_Device: 
 252:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 253:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  36               		.loc 1 253 0
  37 0016 82E1      		ldi r24,lo8(18)
  38 0018 90E0      		ldi r25,0
  39               	.LVL1:
 252:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  40               		.loc 1 252 0
  41 001a 20E0      		ldi r18,lo8(DeviceDescriptor)
  42 001c 30E0      		ldi r19,hi8(DeviceDescriptor)
  43 001e 00C0      		rjmp .L5
  44               	.LVL2:
  45               	.L3:
 254:Descriptors.c **** 			break;
 255:Descriptors.c **** 		case DTYPE_Configuration: 
 256:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 257:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  46               		.loc 1 257 0
  47 0020 8EE3      		ldi r24,lo8(62)
  48 0022 90E0      		ldi r25,0
  49               	.LVL3:
 256:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 256 0
  51 0024 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  52 0026 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 258:Descriptors.c **** 			break;
  53               		.loc 1 258 0
  54 0028 00C0      		rjmp .L5
  55               	.LVL4:
  56               	.L4:
  57 002a 9927      		clr r25
  58               	.LVL5:
 259:Descriptors.c **** 		case DTYPE_String: 
 260:Descriptors.c **** 			switch (DescriptorNumber)
  59               		.loc 1 260 0
  60 002c 8130      		cpi r24,1
  61 002e 9105      		cpc r25,__zero_reg__
  62 0030 01F0      		breq .L6
  63 0032 8230      		cpi r24,2
  64 0034 9105      		cpc r25,__zero_reg__
  65 0036 01F0      		breq .L7
  66 0038 892B      		or r24,r25
  67 003a 01F4      		brne .L11
  68               	.LVL6:
  69               	.LBB2:
 261:Descriptors.c **** 			{
 262:Descriptors.c **** 				case 0x00: 
 263:Descriptors.c **** 					Address = (void*)&LanguageString;
 264:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
  70               		.loc 1 264 0
  71 003c E0E0      		ldi r30,lo8(LanguageString)
  72 003e F0E0      		ldi r31,hi8(LanguageString)
  73 0040 00C0      		rjmp .L12
  74               	.LVL7:
  75               	.L6:
  76               	.LBE2:
  77               	.LBB3:
 265:Descriptors.c **** 					break;
 266:Descriptors.c **** 				case 0x01: 
 267:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 268:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  78               		.loc 1 268 0
  79 0042 E0E0      		ldi r30,lo8(ManufacturerString)
  80 0044 F0E0      		ldi r31,hi8(ManufacturerString)
  81 0046 00C0      		rjmp .L12
  82               	.LVL8:
  83               	.L7:
  84               	.LBE3:
  85               	.LBB4:
 269:Descriptors.c **** 					break;
 270:Descriptors.c **** 				case 0x02: 
 271:Descriptors.c **** 					Address = (void*)&ProductString;
 272:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
  86               		.loc 1 272 0
  87 0048 E0E0      		ldi r30,lo8(ProductString)
  88 004a F0E0      		ldi r31,hi8(ProductString)
  89               	.LVL9:
  90               	.L12:
  91               	/* #APP */
  92               	 ;  272 "Descriptors.c" 1
  93 004c 8491      		lpm r24, Z
  94               		
  95               	 ;  0 "" 2
  96               	.LVL10:
  97               	/* #NOAPP */
  98               	.LBE4:
  99 004e 90E0      		ldi r25,0
 100               	.LVL11:
 271:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 101               		.loc 1 271 0
 102 0050 9F01      		movw r18,r30
 273:Descriptors.c **** 					break;
 103               		.loc 1 273 0
 104 0052 00C0      		rjmp .L5
 105               	.LVL12:
 106               	.L11:
 247:Descriptors.c **** 
 107               		.loc 1 247 0
 108 0054 80E0      		ldi r24,0
 109 0056 90E0      		ldi r25,0
 246:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 110               		.loc 1 246 0
 111 0058 20E0      		ldi r18,0
 112 005a 30E0      		ldi r19,0
 113               	.LVL13:
 114               	.L5:
 274:Descriptors.c **** 			}
 275:Descriptors.c **** 			
 276:Descriptors.c **** 			break;
 277:Descriptors.c **** 	}
 278:Descriptors.c **** 	
 279:Descriptors.c **** 	*DescriptorAddress = Address;
 115               		.loc 1 279 0
 116 005c FA01      		movw r30,r20
 117 005e 3183      		std Z+1,r19
 118 0060 2083      		st Z,r18
 280:Descriptors.c **** 	return Size;
 281:Descriptors.c **** }
 119               		.loc 1 281 0
 120 0062 0895      		ret
 121               		.cfi_endproc
 122               	.LFE66:
 124               	.global	ProductString
 125               		.section	.progmem.data,"a",@progbits
 128               	ProductString:
 129 0000 2E        		.byte	46
 130 0001 03        		.byte	3
 131 0002 4100      		.string	"A"
 132 0004 7200      		.string	"r"
 133 0006 6400      		.string	"d"
 134 0008 7500      		.string	"u"
 135 000a 6900      		.string	"i"
 136 000c 6E00      		.string	"n"
 137 000e 6F00      		.string	"o"
 138 0010 2000      		.string	" "
 139 0012 4400      		.string	"D"
 140 0014 7500      		.string	"u"
 141 0016 6500      		.string	"e"
 142 0018 2000      		.string	" "
 143 001a 5000      		.string	"P"
 144 001c 7200      		.string	"r"
 145 001e 6F00      		.string	"o"
 146 0020 6700      		.string	"g"
 147 0022 2E00      		.string	"."
 148 0024 2000      		.string	" "
 149 0026 5000      		.string	"P"
 150 0028 6F00      		.string	"o"
 151 002a 7200      		.string	"r"
 152 002c 7400      		.string	"t"
 153 002e 00        		.string	""
 154 002f 00        		.string	""
 155               	.global	ManufacturerString
 158               	ManufacturerString:
 159 0030 32        		.byte	50
 160 0031 03        		.byte	3
 161 0032 4100      		.string	"A"
 162 0034 7200      		.string	"r"
 163 0036 6400      		.string	"d"
 164 0038 7500      		.string	"u"
 165 003a 6900      		.string	"i"
 166 003c 6E00      		.string	"n"
 167 003e 6F00      		.string	"o"
 168 0040 2000      		.string	" "
 169 0042 2800      		.string	"("
 170 0044 7700      		.string	"w"
 171 0046 7700      		.string	"w"
 172 0048 7700      		.string	"w"
 173 004a 2E00      		.string	"."
 174 004c 6100      		.string	"a"
 175 004e 7200      		.string	"r"
 176 0050 6400      		.string	"d"
 177 0052 7500      		.string	"u"
 178 0054 6900      		.string	"i"
 179 0056 6E00      		.string	"n"
 180 0058 6F00      		.string	"o"
 181 005a 2E00      		.string	"."
 182 005c 6300      		.string	"c"
 183 005e 6300      		.string	"c"
 184 0060 2900      		.string	")"
 185 0062 00        		.string	""
 186 0063 00        		.string	""
 187               	.global	LanguageString
 190               	LanguageString:
 191 0064 04        		.byte	4
 192 0065 03        		.byte	3
 193 0066 0904      		.word	1033
 194               	.global	ConfigurationDescriptor
 197               	ConfigurationDescriptor:
 198 0068 09        		.byte	9
 199 0069 02        		.byte	2
 200 006a 3E00      		.word	62
 201 006c 02        		.byte	2
 202 006d 01        		.byte	1
 203 006e 00        		.byte	0
 204 006f C0        		.byte	-64
 205 0070 32        		.byte	50
 206 0071 09        		.byte	9
 207 0072 04        		.byte	4
 208 0073 00        		.byte	0
 209 0074 00        		.byte	0
 210 0075 01        		.byte	1
 211 0076 02        		.byte	2
 212 0077 02        		.byte	2
 213 0078 01        		.byte	1
 214 0079 00        		.byte	0
 215 007a 05        		.byte	5
 216 007b 24        		.byte	36
 217 007c 00        		.byte	0
 218 007d 01        		.byte	1
 219 007e 10        		.byte	16
 220 007f 04        		.byte	4
 221 0080 24        		.byte	36
 222 0081 02        		.byte	2
 223 0082 06        		.byte	6
 224 0083 05        		.byte	5
 225 0084 24        		.byte	36
 226 0085 06        		.byte	6
 227 0086 00        		.byte	0
 228 0087 01        		.byte	1
 229 0088 07        		.byte	7
 230 0089 05        		.byte	5
 231 008a 82        		.byte	-126
 232 008b 03        		.byte	3
 233 008c 0800      		.word	8
 234 008e FF        		.byte	-1
 235 008f 09        		.byte	9
 236 0090 04        		.byte	4
 237 0091 01        		.byte	1
 238 0092 00        		.byte	0
 239 0093 02        		.byte	2
 240 0094 0A        		.byte	10
 241 0095 00        		.byte	0
 242 0096 00        		.byte	0
 243 0097 00        		.byte	0
 244 0098 07        		.byte	7
 245 0099 05        		.byte	5
 246 009a 04        		.byte	4
 247 009b 02        		.byte	2
 248 009c 4000      		.word	64
 249 009e 01        		.byte	1
 250 009f 07        		.byte	7
 251 00a0 05        		.byte	5
 252 00a1 83        		.byte	-125
 253 00a2 02        		.byte	2
 254 00a3 4000      		.word	64
 255 00a5 01        		.byte	1
 256               	.global	DeviceDescriptor
 259               	DeviceDescriptor:
 260 00a6 12        		.byte	18
 261 00a7 01        		.byte	1
 262 00a8 1001      		.word	272
 263 00aa 02        		.byte	2
 264 00ab 00        		.byte	0
 265 00ac 00        		.byte	0
 266 00ad 08        		.byte	8
 267 00ae 4123      		.word	9025
 268 00b0 3D00      		.word	61
 269 00b2 0100      		.word	1
 270 00b4 01        		.byte	1
 271 00b5 02        		.byte	2
 272 00b6 DC        		.byte	-36
 273 00b7 01        		.byte	1
 274               		.text
 275               	.Letext0:
 276               		.file 2 "/usr/lib/avr/include/stdint.h"
 277               		.file 3 "/usr/lib/gcc/avr/4.8.1/include/stddef.h"
 278               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 279               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
     /tmp/ccU0OO5v.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccU0OO5v.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccU0OO5v.s:4      *ABS*:0000003f __SREG__
     /tmp/ccU0OO5v.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccU0OO5v.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccU0OO5v.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
     /tmp/ccU0OO5v.s:259    .progmem.data:000000a6 DeviceDescriptor
     /tmp/ccU0OO5v.s:197    .progmem.data:00000068 ConfigurationDescriptor
     /tmp/ccU0OO5v.s:190    .progmem.data:00000064 LanguageString
     /tmp/ccU0OO5v.s:158    .progmem.data:00000030 ManufacturerString
     /tmp/ccU0OO5v.s:128    .progmem.data:00000000 ProductString

NO UNDEFINED SYMBOLS
