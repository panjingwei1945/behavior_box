   1               		.file	"Arduino-usbserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.RingBuffer_Insert,"ax",@progbits
  12               	RingBuffer_Insert:
  13               	.LFB71:
  14               		.file 1 "Lib/LightweightRingBuff.h"
   1:Lib/LightweightRingBuff.h **** /*
   2:Lib/LightweightRingBuff.h ****              LUFA Library
   3:Lib/LightweightRingBuff.h ****      Copyright (C) Dean Camera, 2010.
   4:Lib/LightweightRingBuff.h ****               
   5:Lib/LightweightRingBuff.h ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/LightweightRingBuff.h ****       www.fourwalledcubicle.com
   7:Lib/LightweightRingBuff.h **** */
   8:Lib/LightweightRingBuff.h **** 
   9:Lib/LightweightRingBuff.h **** /*
  10:Lib/LightweightRingBuff.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/LightweightRingBuff.h **** 
  12:Lib/LightweightRingBuff.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:Lib/LightweightRingBuff.h ****   software and its documentation for any purpose is hereby granted
  14:Lib/LightweightRingBuff.h ****   without fee, provided that the above copyright notice appear in 
  15:Lib/LightweightRingBuff.h ****   all copies and that both that the copyright notice and this
  16:Lib/LightweightRingBuff.h ****   permission notice and warranty disclaimer appear in supporting 
  17:Lib/LightweightRingBuff.h ****   documentation, and that the name of the author not be used in 
  18:Lib/LightweightRingBuff.h ****   advertising or publicity pertaining to distribution of the 
  19:Lib/LightweightRingBuff.h ****   software without specific, written prior permission.
  20:Lib/LightweightRingBuff.h **** 
  21:Lib/LightweightRingBuff.h ****   The author disclaim all warranties with regard to this
  22:Lib/LightweightRingBuff.h ****   software, including all implied warranties of merchantability
  23:Lib/LightweightRingBuff.h ****   and fitness.  In no event shall the author be liable for any
  24:Lib/LightweightRingBuff.h ****   special, indirect or consequential damages or any damages
  25:Lib/LightweightRingBuff.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/LightweightRingBuff.h ****   in an action of contract, negligence or other tortious action,
  27:Lib/LightweightRingBuff.h ****   arising out of or in connection with the use or performance of
  28:Lib/LightweightRingBuff.h ****   this software.
  29:Lib/LightweightRingBuff.h **** */
  30:Lib/LightweightRingBuff.h **** 
  31:Lib/LightweightRingBuff.h **** /** \file
  32:Lib/LightweightRingBuff.h ****  *
  33:Lib/LightweightRingBuff.h ****  *  Ultra lightweight ring buffer, for fast insertion/deletion.
  34:Lib/LightweightRingBuff.h ****  */
  35:Lib/LightweightRingBuff.h ****  
  36:Lib/LightweightRingBuff.h **** #ifndef _ULW_RING_BUFF_H_
  37:Lib/LightweightRingBuff.h **** #define _ULW_RING_BUFF_H_
  38:Lib/LightweightRingBuff.h **** 
  39:Lib/LightweightRingBuff.h **** 	/* Includes: */
  40:Lib/LightweightRingBuff.h **** 		#include <util/atomic.h>
  41:Lib/LightweightRingBuff.h **** 	
  42:Lib/LightweightRingBuff.h **** 		#include <stdint.h>
  43:Lib/LightweightRingBuff.h **** 		#include <stdbool.h>
  44:Lib/LightweightRingBuff.h **** 
  45:Lib/LightweightRingBuff.h **** 	/* Defines: */
  46:Lib/LightweightRingBuff.h **** 		/** Size of each ring buffer, in data elements - must be between 1 and 255. */
  47:Lib/LightweightRingBuff.h **** 		#define BUFFER_SIZE         128
  48:Lib/LightweightRingBuff.h **** 		
  49:Lib/LightweightRingBuff.h **** 		/** Maximum number of data elements to buffer before forcing a flush. 
  50:Lib/LightweightRingBuff.h **** 		 *  Must be less than BUFFER_SIZE
  51:Lib/LightweightRingBuff.h **** 		 */
  52:Lib/LightweightRingBuff.h **** 		#define BUFFER_NEARLY_FULL	96
  53:Lib/LightweightRingBuff.h **** 		
  54:Lib/LightweightRingBuff.h **** 		/** Type of data to store into the buffer. */
  55:Lib/LightweightRingBuff.h **** 		#define RingBuff_Data_t     uint8_t
  56:Lib/LightweightRingBuff.h **** 
  57:Lib/LightweightRingBuff.h **** 		/** Datatype which may be used to store the count of data stored in a buffer, retrieved
  58:Lib/LightweightRingBuff.h **** 		 *  via a call to \ref RingBuffer_GetCount().
  59:Lib/LightweightRingBuff.h **** 		 */
  60:Lib/LightweightRingBuff.h **** 		#if (BUFFER_SIZE <= 0xFF)
  61:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint8_t
  62:Lib/LightweightRingBuff.h **** 		#else
  63:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint16_t
  64:Lib/LightweightRingBuff.h **** 		#endif
  65:Lib/LightweightRingBuff.h **** 
  66:Lib/LightweightRingBuff.h **** 	/* Type Defines: */
  67:Lib/LightweightRingBuff.h **** 		/** Type define for a new ring buffer object. Buffers should be initialized via a call to
  68:Lib/LightweightRingBuff.h **** 		 *  \ref RingBuffer_InitBuffer() before use.
  69:Lib/LightweightRingBuff.h **** 		 */
  70:Lib/LightweightRingBuff.h **** 		typedef struct
  71:Lib/LightweightRingBuff.h **** 		{
  72:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t  Buffer[BUFFER_SIZE]; /**< Internal ring buffer data, referenced by the buffer p
  73:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* In; /**< Current storage location in the circular buffer */
  74:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* Out; /**< Current retrieval location in the circular buffer */
  75:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
  76:Lib/LightweightRingBuff.h **** 		} RingBuff_t;
  77:Lib/LightweightRingBuff.h **** 	
  78:Lib/LightweightRingBuff.h **** 	/* Inline Functions: */
  79:Lib/LightweightRingBuff.h **** 		/** Initializes a ring buffer ready for use. Buffers must be initialized via this function
  80:Lib/LightweightRingBuff.h **** 		 *  before any operations are called upon them. Already initialized buffers may be reset
  81:Lib/LightweightRingBuff.h **** 		 *  by re-initializing them using this function.
  82:Lib/LightweightRingBuff.h **** 		 *
  83:Lib/LightweightRingBuff.h **** 		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
  84:Lib/LightweightRingBuff.h **** 		 */
  85:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
  86:Lib/LightweightRingBuff.h **** 		{
  87:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  88:Lib/LightweightRingBuff.h **** 			{
  89:Lib/LightweightRingBuff.h **** 				Buffer->In  = Buffer->Buffer;
  90:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
  91:Lib/LightweightRingBuff.h **** 			}
  92:Lib/LightweightRingBuff.h **** 		}
  93:Lib/LightweightRingBuff.h **** 		
  94:Lib/LightweightRingBuff.h **** 		/** Retrieves the minimum number of bytes stored in a particular buffer. This value is computed
  95:Lib/LightweightRingBuff.h **** 		 *  by entering an atomic lock on the buffer while the IN and OUT locations are fetched, so that
  96:Lib/LightweightRingBuff.h **** 		 *  the buffer cannot be modified while the computation takes place. This value should be cached
  97:Lib/LightweightRingBuff.h **** 		 *  when reading out the contents of the buffer, so that as small a time as possible is spent
  98:Lib/LightweightRingBuff.h **** 		 *  in an atomic lock.
  99:Lib/LightweightRingBuff.h **** 		 *
 100:Lib/LightweightRingBuff.h **** 		 *  \note The value returned by this function is guaranteed to only be the minimum number of byte
 101:Lib/LightweightRingBuff.h **** 		 *        stored in the given buffer; this value may change as other threads write new data and s
 102:Lib/LightweightRingBuff.h **** 		 *        the returned number should be used only to determine how many successive reads may safe
 103:Lib/LightweightRingBuff.h **** 		 *        be performed on the buffer.
 104:Lib/LightweightRingBuff.h **** 		 *
 105:Lib/LightweightRingBuff.h **** 		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
 106:Lib/LightweightRingBuff.h **** 		 */
 107:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
 108:Lib/LightweightRingBuff.h **** 		{
 109:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
 110:Lib/LightweightRingBuff.h **** 			
 111:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 112:Lib/LightweightRingBuff.h **** 			{
 113:Lib/LightweightRingBuff.h **** 				Count = Buffer->Count;
 114:Lib/LightweightRingBuff.h **** 			}
 115:Lib/LightweightRingBuff.h **** 			
 116:Lib/LightweightRingBuff.h **** 			return Count;
 117:Lib/LightweightRingBuff.h **** 		}
 118:Lib/LightweightRingBuff.h **** 		
 119:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any free space. This should
 120:Lib/LightweightRingBuff.h **** 		 *  be tested before storing data to the buffer, to ensure that no data is lost due to a
 121:Lib/LightweightRingBuff.h **** 		 *  buffer overrun.
 122:Lib/LightweightRingBuff.h **** 		 *
 123:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 124:Lib/LightweightRingBuff.h **** 		 *
 125:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 126:Lib/LightweightRingBuff.h **** 		 */		 
 127:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsFull(RingBuff_t* const Buffer)
 128:Lib/LightweightRingBuff.h **** 		{
 129:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == BUFFER_SIZE);
 130:Lib/LightweightRingBuff.h **** 		}
 131:Lib/LightweightRingBuff.h **** 
 132:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any data. This should
 133:Lib/LightweightRingBuff.h **** 		 *  be tested before removing data from the buffer, to ensure that the buffer does not
 134:Lib/LightweightRingBuff.h **** 		 *  underflow.
 135:Lib/LightweightRingBuff.h **** 		 *
 136:Lib/LightweightRingBuff.h **** 		 *  If the data is to be removed in a loop, store the total number of bytes stored in the
 137:Lib/LightweightRingBuff.h **** 		 *  buffer (via a call to the \ref RingBuffer_GetCount() function) in a temporary variable
 138:Lib/LightweightRingBuff.h **** 		 *  to reduce the time spent in atomicity locks.
 139:Lib/LightweightRingBuff.h **** 		 *
 140:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 141:Lib/LightweightRingBuff.h **** 		 *
 142:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 143:Lib/LightweightRingBuff.h **** 		 */		 
 144:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
 145:Lib/LightweightRingBuff.h **** 		{
 146:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == 0);
 147:Lib/LightweightRingBuff.h **** 		}
 148:Lib/LightweightRingBuff.h **** 
 149:Lib/LightweightRingBuff.h **** 		/** Inserts an element into the ring buffer.
 150:Lib/LightweightRingBuff.h **** 		 *
 151:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may insert into a single buff
 152:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 153:Lib/LightweightRingBuff.h **** 		 *        threads.
 154:Lib/LightweightRingBuff.h **** 		 *
 155:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 156:Lib/LightweightRingBuff.h **** 		 *  \param[in]     Data    Data element to insert into the buffer
 157:Lib/LightweightRingBuff.h **** 		 */
 158:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
 159:Lib/LightweightRingBuff.h **** 		                                     const RingBuff_Data_t Data)
 160:Lib/LightweightRingBuff.h **** 		{
  15               		.loc 1 160 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
  22               		.loc 1 161 0
  23 0000 FC01      		movw r30,r24
  24 0002 E058      		subi r30,-128
  25 0004 FF4F      		sbci r31,-1
  26 0006 A081      		ld r26,Z
  27 0008 B181      		ldd r27,Z+1
  28 000a 6C93      		st X,r22
 162:Lib/LightweightRingBuff.h **** 			
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
  29               		.loc 1 163 0
  30 000c A081      		ld r26,Z
  31 000e B181      		ldd r27,Z+1
  32 0010 9D01      		movw r18,r26
  33 0012 2F5F      		subi r18,-1
  34 0014 3F4F      		sbci r19,-1
  35 0016 3183      		std Z+1,r19
  36 0018 2083      		st Z,r18
  37 001a 2E17      		cp r18,r30
  38 001c 3F07      		cpc r19,r31
  39 001e 01F4      		brne .L2
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
  40               		.loc 1 164 0
  41 0020 1296      		adiw r26,1+1
  42 0022 9C93      		st X,r25
  43 0024 8E93      		st -X,r24
  44 0026 1197      		sbiw r26,1
  45               	.L2:
  46               	.LBB31:
 165:Lib/LightweightRingBuff.h **** 
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  47               		.loc 1 166 0
  48 0028 2FB7      		in r18,__SREG__
  49               	.LVL1:
  50               	.LBB32:
  51               	.LBB33:
  52               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  53               		.loc 2 50 0
  54               	/* #APP */
  55               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  56 002a F894      		cli
  57               	 ;  0 "" 2
  58               	.LVL2:
  59               	/* #NOAPP */
  60               	.LBE33:
  61               	.LBE32:
 167:Lib/LightweightRingBuff.h **** 			{
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
  62               		.loc 1 168 0
  63 002c FC01      		movw r30,r24
  64 002e EC57      		subi r30,124
  65 0030 FF4F      		sbci r31,-1
  66 0032 8081      		ld r24,Z
  67               	.LVL3:
  68 0034 8F5F      		subi r24,lo8(-(1))
  69 0036 8083      		st Z,r24
  70               	.LVL4:
  71               	.LBB34:
  72               	.LBB35:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  73               		.loc 2 70 0
  74 0038 2FBF      		out __SREG__,r18
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  75               		.loc 2 71 0
  76 003a 0895      		ret
  77               	.LBE35:
  78               	.LBE34:
  79               	.LBE31:
  80               		.cfi_endproc
  81               	.LFE71:
  83               		.section	.text.RingBuffer_Remove,"ax",@progbits
  85               	RingBuffer_Remove:
  86               	.LFB72:
 169:Lib/LightweightRingBuff.h **** 			}
 170:Lib/LightweightRingBuff.h **** 		}
 171:Lib/LightweightRingBuff.h **** 
 172:Lib/LightweightRingBuff.h **** 		/** Removes an element from the ring buffer.
 173:Lib/LightweightRingBuff.h **** 		 *
 174:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may remove from a single buff
 175:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 176:Lib/LightweightRingBuff.h **** 		 *        threads.
 177:Lib/LightweightRingBuff.h **** 		 *
 178:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
 179:Lib/LightweightRingBuff.h **** 		 *
 180:Lib/LightweightRingBuff.h **** 		 *  \return Next data element stored in the buffer
 181:Lib/LightweightRingBuff.h **** 		 */
 182:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
 183:Lib/LightweightRingBuff.h **** 		{
  87               		.loc 1 183 0
  88               		.cfi_startproc
  89               	.LVL5:
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
  94               		.loc 1 184 0
  95 0000 DC01      		movw r26,r24
  96 0002 AE57      		subi r26,126
  97 0004 BF4F      		sbci r27,-1
  98 0006 ED91      		ld r30,X+
  99 0008 FC91      		ld r31,X
 100 000a 1197      		sbiw r26,1
 101 000c 4191      		ld r20,Z+
 102               	.LVL6:
 185:Lib/LightweightRingBuff.h **** 			
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 103               		.loc 1 186 0
 104 000e 1196      		adiw r26,1
 105 0010 FC93      		st X,r31
 106 0012 EE93      		st -X,r30
 107 0014 9C01      		movw r18,r24
 108 0016 2058      		subi r18,-128
 109 0018 3F4F      		sbci r19,-1
 110 001a E217      		cp r30,r18
 111 001c F307      		cpc r31,r19
 112 001e 01F4      		brne .L5
 187:Lib/LightweightRingBuff.h **** 			  Buffer->Out = Buffer->Buffer;
 113               		.loc 1 187 0
 114 0020 8D93      		st X+,r24
 115 0022 9C93      		st X,r25
 116               	.L5:
 117               	.LBB36:
 188:Lib/LightweightRingBuff.h **** 
 189:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 118               		.loc 1 189 0
 119 0024 2FB7      		in r18,__SREG__
 120               	.LVL7:
 121               	.LBB37:
 122               	.LBB38:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 123               		.loc 2 50 0
 124               	/* #APP */
 125               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 126 0026 F894      		cli
 127               	 ;  0 "" 2
 128               	.LVL8:
 129               	/* #NOAPP */
 130               	.LBE38:
 131               	.LBE37:
 190:Lib/LightweightRingBuff.h **** 			{
 191:Lib/LightweightRingBuff.h **** 				Buffer->Count--;
 132               		.loc 1 191 0
 133 0028 FC01      		movw r30,r24
 134 002a EC57      		subi r30,124
 135 002c FF4F      		sbci r31,-1
 136 002e 9081      		ld r25,Z
 137 0030 9150      		subi r25,lo8(-(-1))
 138 0032 9083      		st Z,r25
 139               	.LVL9:
 140               	.LBB39:
 141               	.LBB40:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 142               		.loc 2 70 0
 143 0034 2FBF      		out __SREG__,r18
 144               		.loc 2 71 0
 145               	.LBE40:
 146               	.LBE39:
 147               	.LBE36:
 192:Lib/LightweightRingBuff.h **** 			}
 193:Lib/LightweightRingBuff.h **** 			
 194:Lib/LightweightRingBuff.h **** 			return Data;
 195:Lib/LightweightRingBuff.h **** 		}
 148               		.loc 1 195 0
 149 0036 842F      		mov r24,r20
 150               	.LVL10:
 151 0038 0895      		ret
 152               		.cfi_endproc
 153               	.LFE72:
 155               		.section	.text.Serial_Init.constprop.2,"ax",@progbits
 157               	Serial_Init.constprop.2:
 158               	.LFB98:
 159               		.file 3 "../../LUFA/Drivers/Peripheral/Serial.h"
   1:../../LUFA/Drivers/Peripheral/Serial.h **** /*
   2:../../LUFA/Drivers/Peripheral/Serial.h ****              LUFA Library
   3:../../LUFA/Drivers/Peripheral/Serial.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/Peripheral/Serial.h ****               
   5:../../LUFA/Drivers/Peripheral/Serial.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Peripheral/Serial.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/Peripheral/Serial.h **** */
   8:../../LUFA/Drivers/Peripheral/Serial.h **** 
   9:../../LUFA/Drivers/Peripheral/Serial.h **** /*
  10:../../LUFA/Drivers/Peripheral/Serial.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Peripheral/Serial.h **** 
  12:../../LUFA/Drivers/Peripheral/Serial.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/Peripheral/Serial.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Peripheral/Serial.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/Peripheral/Serial.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Peripheral/Serial.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/Peripheral/Serial.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/Peripheral/Serial.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/Peripheral/Serial.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Peripheral/Serial.h **** 
  21:../../LUFA/Drivers/Peripheral/Serial.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Peripheral/Serial.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Peripheral/Serial.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Peripheral/Serial.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Peripheral/Serial.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Peripheral/Serial.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Peripheral/Serial.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Peripheral/Serial.h ****   this software.
  29:../../LUFA/Drivers/Peripheral/Serial.h **** */
  30:../../LUFA/Drivers/Peripheral/Serial.h **** 
  31:../../LUFA/Drivers/Peripheral/Serial.h **** /** \file
  32:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \brief Master include file for the USART peripheral driver.
  33:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  34:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Driver for the USART subsystem on supported USB AVRs.
  35:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  36:../../LUFA/Drivers/Peripheral/Serial.h ****  
  37:../../LUFA/Drivers/Peripheral/Serial.h **** /** \ingroup Group_PeripheralDrivers
  38:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @defgroup Group_Serial Serial USART Driver - LUFA/Drivers/Peripheral/Serial.h
  39:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  40:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Sec_Dependencies Module Source Dependencies
  41:../../LUFA/Drivers/Peripheral/Serial.h ****  *  The following files must be built with any user project that uses this module:
  42:../../LUFA/Drivers/Peripheral/Serial.h ****  *    - LUFA/Drivers/Peripheral/Serial.c <i>(Makefile source module name: LUFA_SRC_SERIAL)</i>
  43:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  44:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Module Description
  45:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Hardware serial USART driver. This module provides an easy to use driver for
  46:../../LUFA/Drivers/Peripheral/Serial.h ****  *  the setup of and transfer of data over the AVR's USART port.
  47:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  48:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @{
  49:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  50:../../LUFA/Drivers/Peripheral/Serial.h ****  
  51:../../LUFA/Drivers/Peripheral/Serial.h **** #ifndef __SERIAL_H__
  52:../../LUFA/Drivers/Peripheral/Serial.h **** #define __SERIAL_H__
  53:../../LUFA/Drivers/Peripheral/Serial.h **** 
  54:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Includes: */
  55:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/io.h>
  56:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/pgmspace.h>
  57:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <stdbool.h>
  58:../../LUFA/Drivers/Peripheral/Serial.h **** 		
  59:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../../Common/Common.h"
  60:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../Misc/TerminalCodes.h"
  61:../../LUFA/Drivers/Peripheral/Serial.h **** 
  62:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/Peripheral/Serial.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/Peripheral/Serial.h **** 			extern "C" {
  65:../../LUFA/Drivers/Peripheral/Serial.h **** 		#endif
  66:../../LUFA/Drivers/Peripheral/Serial.h **** 
  67:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Public Interface - May be used in end-application: */
  68:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Macros: */
  69:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  70:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  not set.
  71:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  72:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_UBBRVAL(baud)    ((((F_CPU / 16) + (baud / 2)) / (baud)) - 1)
  73:../../LUFA/Drivers/Peripheral/Serial.h **** 
  74:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  75:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  set.
  76:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  77:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_2X_UBBRVAL(baud) ((((F_CPU / 8) + (baud / 2)) / (baud)) - 1)
  78:../../LUFA/Drivers/Peripheral/Serial.h **** 
  79:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Function Prototypes: */
  80:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in program space (FLASH) through the USART.
  81:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  82:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] FlashStringPtr  Pointer to a string located in program space.
  83:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  84:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString_P(const char* FlashStringPtr) ATTR_NON_NULL_PTR_ARG(1);
  85:../../LUFA/Drivers/Peripheral/Serial.h **** 
  86:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in SRAM memory through the USART.
  87:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  88:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] StringPtr  Pointer to a string located in SRAM space.
  89:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  90:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString(const char* StringPtr) ATTR_NON_NULL_PTR_ARG(1);
  91:../../LUFA/Drivers/Peripheral/Serial.h **** 
  92:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Inline Functions: */
  93:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Initializes the USART, ready for serial data transmission and reception. This initializes th
  94:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  standard 8-bit, no parity, 1 stop bit settings suitable for most applications.
  95:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  96:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] BaudRate     Serial baud rate, in bits per second.
  97:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to doubl
  98:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  99:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_Init(const uint32_t BaudRate,
 160               		.loc 3 99 0
 161               		.cfi_startproc
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 166               	.LVL11:
 100:../../LUFA/Drivers/Peripheral/Serial.h **** 			                               const bool DoubleSpeed)
 101:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 102:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 167               		.loc 3 102 0
 168 0000 87E6      		ldi r24,lo8(103)
 169 0002 90E0      		ldi r25,0
 170 0004 9093 CD00 		sts 204+1,r25
 171 0008 8093 CC00 		sts 204,r24
 103:../../LUFA/Drivers/Peripheral/Serial.h **** 
 104:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 172               		.loc 3 104 0
 173 000c 86E0      		ldi r24,lo8(6)
 174 000e 8093 CA00 		sts 202,r24
 105:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 175               		.loc 3 105 0
 176 0012 1092 C800 		sts 200,__zero_reg__
 106:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 177               		.loc 3 106 0
 178 0016 88E1      		ldi r24,lo8(24)
 179 0018 8093 C900 		sts 201,r24
 107:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 108:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  |= (1 << 3);
 180               		.loc 3 108 0
 181 001c 539A      		sbi 0xa,3
 109:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD |= (1 << 2);
 182               		.loc 3 109 0
 183 001e 5A9A      		sbi 0xb,2
 184 0020 0895      		ret
 185               		.cfi_endproc
 186               	.LFE98:
 188               		.section	.text.setResetPin,"ax",@progbits
 189               	.global	setResetPin
 191               	setResetPin:
 192               	.LFB85:
 193               		.file 4 "Arduino-usbserial.c"
   1:Arduino-usbserial.c **** /*
   2:Arduino-usbserial.c **** 
   3:Arduino-usbserial.c ****              LUFA Library
   4:Arduino-usbserial.c **** 
   5:Arduino-usbserial.c ****      Copyright (C) Dean Camera, 2010.
   6:Arduino-usbserial.c **** 
   7:Arduino-usbserial.c ****               
   8:Arduino-usbserial.c **** 
   9:Arduino-usbserial.c ****   dean [at] fourwalledcubicle [dot] com
  10:Arduino-usbserial.c **** 
  11:Arduino-usbserial.c ****       www.fourwalledcubicle.com
  12:Arduino-usbserial.c **** 
  13:Arduino-usbserial.c **** */
  14:Arduino-usbserial.c **** 
  15:Arduino-usbserial.c **** 
  16:Arduino-usbserial.c **** 
  17:Arduino-usbserial.c **** /*
  18:Arduino-usbserial.c **** 
  19:Arduino-usbserial.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  20:Arduino-usbserial.c **** 
  21:Arduino-usbserial.c **** 
  22:Arduino-usbserial.c **** 
  23:Arduino-usbserial.c ****   Permission to use, copy, modify, distribute, and sell this 
  24:Arduino-usbserial.c **** 
  25:Arduino-usbserial.c ****   software and its documentation for any purpose is hereby granted
  26:Arduino-usbserial.c **** 
  27:Arduino-usbserial.c ****   without fee, provided that the above copyright notice appear in 
  28:Arduino-usbserial.c **** 
  29:Arduino-usbserial.c ****   all copies and that both that the copyright notice and this
  30:Arduino-usbserial.c **** 
  31:Arduino-usbserial.c ****   permission notice and warranty disclaimer appear in supporting 
  32:Arduino-usbserial.c **** 
  33:Arduino-usbserial.c ****   documentation, and that the name of the author not be used in 
  34:Arduino-usbserial.c **** 
  35:Arduino-usbserial.c ****   advertising or publicity pertaining to distribution of the 
  36:Arduino-usbserial.c **** 
  37:Arduino-usbserial.c ****   software without specific, written prior permission.
  38:Arduino-usbserial.c **** 
  39:Arduino-usbserial.c **** 
  40:Arduino-usbserial.c **** 
  41:Arduino-usbserial.c ****   The author disclaim all warranties with regard to this
  42:Arduino-usbserial.c **** 
  43:Arduino-usbserial.c ****   software, including all implied warranties of merchantability
  44:Arduino-usbserial.c **** 
  45:Arduino-usbserial.c ****   and fitness.  In no event shall the author be liable for any
  46:Arduino-usbserial.c **** 
  47:Arduino-usbserial.c ****   special, indirect or consequential damages or any damages
  48:Arduino-usbserial.c **** 
  49:Arduino-usbserial.c ****   whatsoever resulting from loss of use, data or profits, whether
  50:Arduino-usbserial.c **** 
  51:Arduino-usbserial.c ****   in an action of contract, negligence or other tortious action,
  52:Arduino-usbserial.c **** 
  53:Arduino-usbserial.c ****   arising out of or in connection with the use or performance of
  54:Arduino-usbserial.c **** 
  55:Arduino-usbserial.c ****   this software.
  56:Arduino-usbserial.c **** 
  57:Arduino-usbserial.c **** */
  58:Arduino-usbserial.c **** 
  59:Arduino-usbserial.c **** 
  60:Arduino-usbserial.c **** 
  61:Arduino-usbserial.c **** /** \file
  62:Arduino-usbserial.c **** 
  63:Arduino-usbserial.c ****  *
  64:Arduino-usbserial.c **** 
  65:Arduino-usbserial.c ****  *  Main source file for the Arduino-usbserial project. This file contains the main tasks of
  66:Arduino-usbserial.c **** 
  67:Arduino-usbserial.c ****  *  the project and is responsible for the initial application hardware configuration.
  68:Arduino-usbserial.c **** 
  69:Arduino-usbserial.c ****  */
  70:Arduino-usbserial.c **** 
  71:Arduino-usbserial.c **** 
  72:Arduino-usbserial.c **** 
  73:Arduino-usbserial.c **** #include "Arduino-usbserial.h"
  74:Arduino-usbserial.c **** 
  75:Arduino-usbserial.c **** 
  76:Arduino-usbserial.c **** 
  77:Arduino-usbserial.c **** #define HIGH true
  78:Arduino-usbserial.c **** 
  79:Arduino-usbserial.c **** #define LOW false
  80:Arduino-usbserial.c **** 
  81:Arduino-usbserial.c **** #define UPLOAD_PER 4
  82:Arduino-usbserial.c **** 
  83:Arduino-usbserial.c **** #define UPLOAD_REQ 5
  84:Arduino-usbserial.c **** 
  85:Arduino-usbserial.c **** #define TX_IN 6 
  86:Arduino-usbserial.c **** 
  87:Arduino-usbserial.c **** #define ERASE_CMD 7
  88:Arduino-usbserial.c **** 
  89:Arduino-usbserial.c **** #define cmdread(pin) (!(0 == (PINB & _BV(pin))))
  90:Arduino-usbserial.c **** 
  91:Arduino-usbserial.c **** #define cmdwrite(pin, value) (PORTB = (value) ? (PORTB | _BV(pin)) : (PORTB & ~_BV(pin)))
  92:Arduino-usbserial.c **** 
  93:Arduino-usbserial.c **** #define txwrite(pin, value) (PORTD = (value) ? (PORTD | _BV(pin)) : (PORTD & ~_BV(pin)))
  94:Arduino-usbserial.c **** 
  95:Arduino-usbserial.c **** unsigned char ex_resettime = 0;
  96:Arduino-usbserial.c **** 
  97:Arduino-usbserial.c **** bool tmp_erase_cmd = false;
  98:Arduino-usbserial.c **** 
  99:Arduino-usbserial.c **** bool tmp_erase_cmd_last = false;
 100:Arduino-usbserial.c **** 
 101:Arduino-usbserial.c **** 
 102:Arduino-usbserial.c **** 
 103:Arduino-usbserial.c **** /** Circular buffer to hold data from the host before it is sent to the device via the serial port.
 104:Arduino-usbserial.c **** 
 105:Arduino-usbserial.c **** RingBuff_t USBtoUSART_Buffer;
 106:Arduino-usbserial.c **** 
 107:Arduino-usbserial.c **** 
 108:Arduino-usbserial.c **** 
 109:Arduino-usbserial.c **** /** Circular buffer to hold data from the serial port before it is sent to the host. */
 110:Arduino-usbserial.c **** 
 111:Arduino-usbserial.c **** RingBuff_t USARTtoUSB_Buffer;
 112:Arduino-usbserial.c **** 
 113:Arduino-usbserial.c **** 
 114:Arduino-usbserial.c **** 
 115:Arduino-usbserial.c **** /** Pulse generation counters to keep track of the number of milliseconds remaining for each pulse 
 116:Arduino-usbserial.c **** 
 117:Arduino-usbserial.c **** volatile struct
 118:Arduino-usbserial.c **** 
 119:Arduino-usbserial.c **** {
 120:Arduino-usbserial.c **** 
 121:Arduino-usbserial.c **** 	uint8_t TxLEDPulse; /**< Milliseconds remaining for data Tx LED pulse */
 122:Arduino-usbserial.c **** 
 123:Arduino-usbserial.c **** 	uint8_t RxLEDPulse; /**< Milliseconds remaining for data Rx LED pulse */
 124:Arduino-usbserial.c **** 
 125:Arduino-usbserial.c **** 	uint8_t PingPongLEDPulse; /**< Milliseconds remaining for enumeration Tx/Rx ping-pong LED pulse */
 126:Arduino-usbserial.c **** 
 127:Arduino-usbserial.c **** } PulseMSRemaining;
 128:Arduino-usbserial.c **** 
 129:Arduino-usbserial.c **** 
 130:Arduino-usbserial.c **** 
 131:Arduino-usbserial.c **** /** LUFA CDC Class driver interface configuration and state information. This structure is
 132:Arduino-usbserial.c **** 
 133:Arduino-usbserial.c ****  *  passed to all CDC Class driver functions, so that multiple instances of the same class
 134:Arduino-usbserial.c **** 
 135:Arduino-usbserial.c ****  *  within a device can be differentiated from one another.
 136:Arduino-usbserial.c **** 
 137:Arduino-usbserial.c ****  */
 138:Arduino-usbserial.c **** 
 139:Arduino-usbserial.c **** USB_ClassInfo_CDC_Device_t VirtualSerial_CDC_Interface =
 140:Arduino-usbserial.c **** 
 141:Arduino-usbserial.c **** 	{
 142:Arduino-usbserial.c **** 
 143:Arduino-usbserial.c **** 		.Config = 
 144:Arduino-usbserial.c **** 
 145:Arduino-usbserial.c **** 			{
 146:Arduino-usbserial.c **** 
 147:Arduino-usbserial.c **** 				.ControlInterfaceNumber         = 0,
 148:Arduino-usbserial.c **** 
 149:Arduino-usbserial.c **** 
 150:Arduino-usbserial.c **** 
 151:Arduino-usbserial.c **** 				.DataINEndpointNumber           = CDC_TX_EPNUM,
 152:Arduino-usbserial.c **** 
 153:Arduino-usbserial.c **** 				.DataINEndpointSize             = CDC_TXRX_EPSIZE,
 154:Arduino-usbserial.c **** 
 155:Arduino-usbserial.c **** 				.DataINEndpointDoubleBank       = false,
 156:Arduino-usbserial.c **** 
 157:Arduino-usbserial.c **** 
 158:Arduino-usbserial.c **** 
 159:Arduino-usbserial.c **** 				.DataOUTEndpointNumber          = CDC_RX_EPNUM,
 160:Arduino-usbserial.c **** 
 161:Arduino-usbserial.c **** 				.DataOUTEndpointSize            = CDC_TXRX_EPSIZE,
 162:Arduino-usbserial.c **** 
 163:Arduino-usbserial.c **** 				.DataOUTEndpointDoubleBank      = false,
 164:Arduino-usbserial.c **** 
 165:Arduino-usbserial.c **** 
 166:Arduino-usbserial.c **** 
 167:Arduino-usbserial.c **** 				.NotificationEndpointNumber     = CDC_NOTIFICATION_EPNUM,
 168:Arduino-usbserial.c **** 
 169:Arduino-usbserial.c **** 				.NotificationEndpointSize       = CDC_NOTIFICATION_EPSIZE,
 170:Arduino-usbserial.c **** 
 171:Arduino-usbserial.c **** 				.NotificationEndpointDoubleBank = false,
 172:Arduino-usbserial.c **** 
 173:Arduino-usbserial.c **** 			},
 174:Arduino-usbserial.c **** 
 175:Arduino-usbserial.c **** 	};
 176:Arduino-usbserial.c **** 
 177:Arduino-usbserial.c **** 
 178:Arduino-usbserial.c **** 
 179:Arduino-usbserial.c **** int ResetTimer = 0;
 180:Arduino-usbserial.c **** 
 181:Arduino-usbserial.c **** int tries = 20;
 182:Arduino-usbserial.c **** 
 183:Arduino-usbserial.c **** bool CurrentDTRState = false;
 184:Arduino-usbserial.c **** 
 185:Arduino-usbserial.c **** bool PreviousDTRState = false;
 186:Arduino-usbserial.c **** 
 187:Arduino-usbserial.c **** bool CurrentRTSState = false;
 188:Arduino-usbserial.c **** 
 189:Arduino-usbserial.c **** bool PreviousRTSState = false;
 190:Arduino-usbserial.c **** 
 191:Arduino-usbserial.c **** bool Selected1200BPS = false;
 192:Arduino-usbserial.c **** 
 193:Arduino-usbserial.c **** 
 194:Arduino-usbserial.c **** 
 195:Arduino-usbserial.c **** void setResetPin(bool v) {
 194               		.loc 4 195 0
 195               		.cfi_startproc
 196               	.LVL12:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 196:Arduino-usbserial.c **** 
 197:Arduino-usbserial.c **** 	/* Target /RESET line  */
 198:Arduino-usbserial.c **** 
 199:Arduino-usbserial.c **** 	if (v) {
 201               		.loc 4 199 0
 202 0000 8823      		tst r24
 203 0002 01F0      		breq .L8
 200:Arduino-usbserial.c **** 
 201:Arduino-usbserial.c **** 		/* ACTIVE   => OUTPUT LOW (0v on target /RESET) */
 202:Arduino-usbserial.c **** 
 203:Arduino-usbserial.c **** 		AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
 204               		.loc 4 203 0
 205 0004 3F9A      		sbi 0x7,7
 206 0006 00C0      		rjmp .L10
 207               	.L8:
 204:Arduino-usbserial.c **** 
 205:Arduino-usbserial.c **** 		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 206:Arduino-usbserial.c **** 
 207:Arduino-usbserial.c **** 		//LEDs_TurnOnLEDs(LEDMASK_RX);
 208:Arduino-usbserial.c **** 
 209:Arduino-usbserial.c **** 	} else {
 210:Arduino-usbserial.c **** 
 211:Arduino-usbserial.c **** 		/* INACTIVE => set as INPUT (internal pullup on target /RESET keep it at 3.3v) */
 212:Arduino-usbserial.c **** 
 213:Arduino-usbserial.c **** 		AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
 208               		.loc 4 213 0
 209 0008 3F98      		cbi 0x7,7
 210               	.L10:
 214:Arduino-usbserial.c **** 
 215:Arduino-usbserial.c **** 		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 211               		.loc 4 215 0
 212 000a 4798      		cbi 0x8,7
 213 000c 0895      		ret
 214               		.cfi_endproc
 215               	.LFE85:
 217               		.section	.text.setErasePin,"ax",@progbits
 218               	.global	setErasePin
 220               	setErasePin:
 221               	.LFB86:
 216:Arduino-usbserial.c **** 
 217:Arduino-usbserial.c **** 		//LEDs_TurnOffLEDs(LEDMASK_RX);
 218:Arduino-usbserial.c **** 
 219:Arduino-usbserial.c **** 	}
 220:Arduino-usbserial.c **** 
 221:Arduino-usbserial.c **** }
 222:Arduino-usbserial.c **** 
 223:Arduino-usbserial.c **** 
 224:Arduino-usbserial.c **** 
 225:Arduino-usbserial.c **** void setErasePin(bool v) {
 222               		.loc 4 225 0
 223               		.cfi_startproc
 224               	.LVL13:
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 226:Arduino-usbserial.c **** 
 227:Arduino-usbserial.c **** 	if (v) {
 229               		.loc 4 227 0
 230 0000 8823      		tst r24
 231 0002 01F0      		breq .L12
 228:Arduino-usbserial.c **** 
 229:Arduino-usbserial.c **** 		AVR_ERASE_LINE_PORT &= ~AVR_ERASE_LINE_MASK;
 232               		.loc 4 229 0
 233 0004 4698      		cbi 0x8,6
 234 0006 0895      		ret
 235               	.L12:
 230:Arduino-usbserial.c **** 
 231:Arduino-usbserial.c **** 		//LEDs_TurnOnLEDs(LEDMASK_TX);
 232:Arduino-usbserial.c **** 
 233:Arduino-usbserial.c **** 	} else {
 234:Arduino-usbserial.c **** 
 235:Arduino-usbserial.c **** 		AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
 236               		.loc 4 235 0
 237 0008 469A      		sbi 0x8,6
 238 000a 0895      		ret
 239               		.cfi_endproc
 240               	.LFE86:
 242               		.section	.text.SetupHardware,"ax",@progbits
 243               	.global	SetupHardware
 245               	SetupHardware:
 246               	.LFB88:
 236:Arduino-usbserial.c **** 
 237:Arduino-usbserial.c **** 		//LEDs_TurnOffLEDs(LEDMASK_TX);
 238:Arduino-usbserial.c **** 
 239:Arduino-usbserial.c **** 	}
 240:Arduino-usbserial.c **** 
 241:Arduino-usbserial.c **** }
 242:Arduino-usbserial.c **** 
 243:Arduino-usbserial.c **** 
 244:Arduino-usbserial.c **** 
 245:Arduino-usbserial.c **** 
 246:Arduino-usbserial.c **** 
 247:Arduino-usbserial.c **** /** Main program entry point. This routine contains the overall program flow, including initial
 248:Arduino-usbserial.c **** 
 249:Arduino-usbserial.c ****  *  setup of all components and the main program loop.
 250:Arduino-usbserial.c **** 
 251:Arduino-usbserial.c ****  */
 252:Arduino-usbserial.c **** 
 253:Arduino-usbserial.c **** int main(void)
 254:Arduino-usbserial.c **** 
 255:Arduino-usbserial.c **** {
 256:Arduino-usbserial.c **** 
 257:Arduino-usbserial.c **** 	SetupHardware();
 258:Arduino-usbserial.c **** 
 259:Arduino-usbserial.c **** 	
 260:Arduino-usbserial.c **** 
 261:Arduino-usbserial.c **** 	RingBuffer_InitBuffer(&USBtoUSART_Buffer);
 262:Arduino-usbserial.c **** 
 263:Arduino-usbserial.c **** 	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);
 264:Arduino-usbserial.c **** 
 265:Arduino-usbserial.c **** 
 266:Arduino-usbserial.c **** 
 267:Arduino-usbserial.c **** 	sei();
 268:Arduino-usbserial.c **** 
 269:Arduino-usbserial.c **** 	
 270:Arduino-usbserial.c **** 
 271:Arduino-usbserial.c **** 	DDRB &= ~_BV(TX_IN);
 272:Arduino-usbserial.c **** 
 273:Arduino-usbserial.c **** 	cmdwrite(TX_IN, HIGH);
 274:Arduino-usbserial.c **** 
 275:Arduino-usbserial.c **** 	DDRB &= ~_BV(ERASE_CMD);
 276:Arduino-usbserial.c **** 
 277:Arduino-usbserial.c **** 	cmdwrite(ERASE_CMD, HIGH);
 278:Arduino-usbserial.c **** 
 279:Arduino-usbserial.c **** 	DDRB |= _BV(UPLOAD_PER);
 280:Arduino-usbserial.c **** 
 281:Arduino-usbserial.c **** 	cmdwrite(UPLOAD_PER, LOW);
 282:Arduino-usbserial.c **** 
 283:Arduino-usbserial.c **** 	DDRB &= ~_BV(UPLOAD_REQ);
 284:Arduino-usbserial.c **** 
 285:Arduino-usbserial.c **** 	cmdwrite(UPLOAD_REQ, HIGH);
 286:Arduino-usbserial.c **** 
 287:Arduino-usbserial.c **** 
 288:Arduino-usbserial.c **** 
 289:Arduino-usbserial.c **** 	for (;;)
 290:Arduino-usbserial.c **** 
 291:Arduino-usbserial.c **** 	{
 292:Arduino-usbserial.c **** 
 293:Arduino-usbserial.c **** 
 294:Arduino-usbserial.c **** 
 295:Arduino-usbserial.c **** 		if(!cmdread(UPLOAD_REQ))
 296:Arduino-usbserial.c **** 
 297:Arduino-usbserial.c **** 		{
 298:Arduino-usbserial.c **** 
 299:Arduino-usbserial.c **** 			cli();
 300:Arduino-usbserial.c **** 
 301:Arduino-usbserial.c **** 			Serial_ShutDown();
 302:Arduino-usbserial.c **** 
 303:Arduino-usbserial.c **** 			DDRD |= _BV(3); //set PB3 to output
 304:Arduino-usbserial.c **** 
 305:Arduino-usbserial.c **** 			txwrite(5, cmdread(UPLOAD_REQ));
 306:Arduino-usbserial.c **** 
 307:Arduino-usbserial.c **** 			cmdwrite(UPLOAD_PER, HIGH);
 308:Arduino-usbserial.c **** 
 309:Arduino-usbserial.c **** 			while(!cmdread(UPLOAD_REQ))
 310:Arduino-usbserial.c **** 
 311:Arduino-usbserial.c **** 			{
 312:Arduino-usbserial.c **** 
 313:Arduino-usbserial.c **** 				setErasePin(!cmdread(ERASE_CMD));
 314:Arduino-usbserial.c **** 
 315:Arduino-usbserial.c **** 				txwrite(3, cmdread(TX_IN));
 316:Arduino-usbserial.c **** 
 317:Arduino-usbserial.c **** 				txwrite(4, cmdread(TX_IN));
 318:Arduino-usbserial.c **** 
 319:Arduino-usbserial.c **** 			}
 320:Arduino-usbserial.c **** 
 321:Arduino-usbserial.c **** 			cmdwrite(UPLOAD_PER, LOW);
 322:Arduino-usbserial.c **** 
 323:Arduino-usbserial.c **** 			txwrite(5, cmdread(UPLOAD_REQ));
 324:Arduino-usbserial.c **** 
 325:Arduino-usbserial.c **** 			Serial_Init(9600, false);
 326:Arduino-usbserial.c **** 
 327:Arduino-usbserial.c **** 			sei();
 328:Arduino-usbserial.c **** 
 329:Arduino-usbserial.c **** 		}
 330:Arduino-usbserial.c **** 
 331:Arduino-usbserial.c **** 		// Only try to read in bytes from the CDC interface if the transmit buffer is not full
 332:Arduino-usbserial.c **** 
 333:Arduino-usbserial.c **** 		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 334:Arduino-usbserial.c **** 
 335:Arduino-usbserial.c **** 		{
 336:Arduino-usbserial.c **** 
 337:Arduino-usbserial.c **** 			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 338:Arduino-usbserial.c **** 
 339:Arduino-usbserial.c **** 
 340:Arduino-usbserial.c **** 
 341:Arduino-usbserial.c **** 			// Read bytes from the USB OUT endpoint into the USART transmit buffer
 342:Arduino-usbserial.c **** 
 343:Arduino-usbserial.c **** 			if (!(ReceivedByte < 0))
 344:Arduino-usbserial.c **** 
 345:Arduino-usbserial.c **** 			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 346:Arduino-usbserial.c **** 
 347:Arduino-usbserial.c **** 		}
 348:Arduino-usbserial.c **** 
 349:Arduino-usbserial.c **** 		
 350:Arduino-usbserial.c **** 
 351:Arduino-usbserial.c **** 		// Check if the UART receive buffer flush timer has expired or the buffer is nearly full
 352:Arduino-usbserial.c **** 
 353:Arduino-usbserial.c **** 		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 354:Arduino-usbserial.c **** 
 355:Arduino-usbserial.c **** 		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 356:Arduino-usbserial.c **** 
 357:Arduino-usbserial.c **** 		{
 358:Arduino-usbserial.c **** 
 359:Arduino-usbserial.c **** 			TIFR0 |= (1 << TOV0);
 360:Arduino-usbserial.c **** 
 361:Arduino-usbserial.c **** 
 362:Arduino-usbserial.c **** 
 363:Arduino-usbserial.c **** 			if (USARTtoUSB_Buffer.Count) {
 364:Arduino-usbserial.c **** 
 365:Arduino-usbserial.c **** 				LEDs_TurnOnLEDs(LEDMASK_TX);
 366:Arduino-usbserial.c **** 
 367:Arduino-usbserial.c **** 				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 368:Arduino-usbserial.c **** 
 369:Arduino-usbserial.c **** 			}
 370:Arduino-usbserial.c **** 
 371:Arduino-usbserial.c **** 
 372:Arduino-usbserial.c **** 
 373:Arduino-usbserial.c **** 			// Read bytes from the USART receive buffer into the USB IN endpoint
 374:Arduino-usbserial.c **** 
 375:Arduino-usbserial.c **** 			while (BufferCount--)
 376:Arduino-usbserial.c **** 
 377:Arduino-usbserial.c **** 			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 378:Arduino-usbserial.c **** 
 379:Arduino-usbserial.c **** 			  
 380:Arduino-usbserial.c **** 
 381:Arduino-usbserial.c **** 			// Turn off TX LED(s) once the TX pulse period has elapsed
 382:Arduino-usbserial.c **** 
 383:Arduino-usbserial.c **** 			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 384:Arduino-usbserial.c **** 
 385:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_TX);
 386:Arduino-usbserial.c **** 
 387:Arduino-usbserial.c **** 
 388:Arduino-usbserial.c **** 
 389:Arduino-usbserial.c **** 			// Turn off RX LED(s) once the RX pulse period has elapsed
 390:Arduino-usbserial.c **** 
 391:Arduino-usbserial.c **** 			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 392:Arduino-usbserial.c **** 
 393:Arduino-usbserial.c **** 			  LEDs_TurnOffLEDs(LEDMASK_RX);
 394:Arduino-usbserial.c **** 
 395:Arduino-usbserial.c **** 
 396:Arduino-usbserial.c **** 
 397:Arduino-usbserial.c **** 			if (ResetTimer > 0)
 398:Arduino-usbserial.c **** 
 399:Arduino-usbserial.c **** 			{
 400:Arduino-usbserial.c **** 
 401:Arduino-usbserial.c **** 				// SAM3X RESET/ERASE Sequence
 402:Arduino-usbserial.c **** 
 403:Arduino-usbserial.c **** 				// --------------------------
 404:Arduino-usbserial.c **** 
 405:Arduino-usbserial.c **** 				// Between 60 and 120: do erase
 406:Arduino-usbserial.c **** 
 407:Arduino-usbserial.c **** 				if (ResetTimer >= 60 && ResetTimer <= 120) {
 408:Arduino-usbserial.c **** 
 409:Arduino-usbserial.c **** 					setErasePin(true);
 410:Arduino-usbserial.c **** 
 411:Arduino-usbserial.c **** 				} else {
 412:Arduino-usbserial.c **** 
 413:Arduino-usbserial.c **** 					setErasePin(false);
 414:Arduino-usbserial.c **** 
 415:Arduino-usbserial.c **** 				}
 416:Arduino-usbserial.c **** 
 417:Arduino-usbserial.c **** 
 418:Arduino-usbserial.c **** 
 419:Arduino-usbserial.c **** 				// Between 1 and 50: do reset
 420:Arduino-usbserial.c **** 
 421:Arduino-usbserial.c **** 				if (ResetTimer >= 1 && ResetTimer <= 50) {
 422:Arduino-usbserial.c **** 
 423:Arduino-usbserial.c **** 					setResetPin(true);
 424:Arduino-usbserial.c **** 
 425:Arduino-usbserial.c **** 				} else {
 426:Arduino-usbserial.c **** 
 427:Arduino-usbserial.c **** 					setResetPin(false);
 428:Arduino-usbserial.c **** 
 429:Arduino-usbserial.c **** 				}
 430:Arduino-usbserial.c **** 
 431:Arduino-usbserial.c **** 				ResetTimer--;
 432:Arduino-usbserial.c **** 
 433:Arduino-usbserial.c **** 			} else {
 434:Arduino-usbserial.c **** 
 435:Arduino-usbserial.c **** 				setErasePin(false);
 436:Arduino-usbserial.c **** 
 437:Arduino-usbserial.c **** 				setResetPin(false);
 438:Arduino-usbserial.c **** 
 439:Arduino-usbserial.c **** 			}
 440:Arduino-usbserial.c **** 
 441:Arduino-usbserial.c **** 		}
 442:Arduino-usbserial.c **** 
 443:Arduino-usbserial.c **** 		
 444:Arduino-usbserial.c **** 
 445:Arduino-usbserial.c **** 		// Load the next byte from the USART transmit buffer into the USART
 446:Arduino-usbserial.c **** 
 447:Arduino-usbserial.c **** 		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
 448:Arduino-usbserial.c **** 
 449:Arduino-usbserial.c **** 			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 450:Arduino-usbserial.c **** 
 451:Arduino-usbserial.c **** 			LEDs_TurnOnLEDs(LEDMASK_RX);
 452:Arduino-usbserial.c **** 
 453:Arduino-usbserial.c **** 			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 454:Arduino-usbserial.c **** 
 455:Arduino-usbserial.c **** 		}
 456:Arduino-usbserial.c **** 
 457:Arduino-usbserial.c **** 		
 458:Arduino-usbserial.c **** 
 459:Arduino-usbserial.c **** 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 460:Arduino-usbserial.c **** 
 461:Arduino-usbserial.c **** 		USB_USBTask();
 462:Arduino-usbserial.c **** 
 463:Arduino-usbserial.c **** 	}
 464:Arduino-usbserial.c **** 
 465:Arduino-usbserial.c **** 
 466:Arduino-usbserial.c **** 
 467:Arduino-usbserial.c **** }
 468:Arduino-usbserial.c **** 
 469:Arduino-usbserial.c **** 
 470:Arduino-usbserial.c **** 
 471:Arduino-usbserial.c **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
 472:Arduino-usbserial.c **** 
 473:Arduino-usbserial.c **** void SetupHardware(void)
 474:Arduino-usbserial.c **** 
 475:Arduino-usbserial.c **** {
 247               		.loc 4 475 0
 248               		.cfi_startproc
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
 476:Arduino-usbserial.c **** 
 477:Arduino-usbserial.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 478:Arduino-usbserial.c **** 
 479:Arduino-usbserial.c **** 	MCUSR &= ~(1 << WDRF);
 253               		.loc 4 479 0
 254 0000 84B7      		in r24,0x34
 255 0002 877F      		andi r24,lo8(-9)
 256 0004 84BF      		out 0x34,r24
 480:Arduino-usbserial.c **** 
 481:Arduino-usbserial.c **** 	wdt_disable();
 257               		.loc 4 481 0
 258 0006 88E1      		ldi r24,lo8(24)
 259               	/* #APP */
 260               	 ;  481 "Arduino-usbserial.c" 1
 261 0008 0FB6      		in __tmp_reg__, __SREG__
 262 000a F894      		cli
 263 000c 8093 6000 		sts 96, r24
 264 0010 1092 6000 		sts 96, __zero_reg__
 265 0014 0FBE      		out __SREG__,__tmp_reg__
 266               		
 267               	 ;  0 "" 2
 482:Arduino-usbserial.c **** 
 483:Arduino-usbserial.c **** 
 484:Arduino-usbserial.c **** 
 485:Arduino-usbserial.c **** 	setResetPin(false);
 268               		.loc 4 485 0
 269               	/* #NOAPP */
 270 0016 80E0      		ldi r24,0
 271 0018 0E94 0000 		call setResetPin
 272               	.LVL14:
 486:Arduino-usbserial.c **** 
 487:Arduino-usbserial.c **** 
 488:Arduino-usbserial.c **** 
 489:Arduino-usbserial.c **** 	/* Target /ERASE line is active HIGH: there is a mosfet that inverts logic */
 490:Arduino-usbserial.c **** 
 491:Arduino-usbserial.c **** 	AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
 273               		.loc 4 491 0
 274 001c 469A      		sbi 0x8,6
 492:Arduino-usbserial.c **** 
 493:Arduino-usbserial.c **** 	AVR_ERASE_LINE_DDR  |= AVR_ERASE_LINE_MASK;	
 275               		.loc 4 493 0
 276 001e 3E9A      		sbi 0x7,6
 494:Arduino-usbserial.c **** 
 495:Arduino-usbserial.c **** 
 496:Arduino-usbserial.c **** 
 497:Arduino-usbserial.c **** 	/* Hardware Initialization */
 498:Arduino-usbserial.c **** 
 499:Arduino-usbserial.c **** 	Serial_Init(9600, false);
 277               		.loc 4 499 0
 278 0020 0E94 0000 		call Serial_Init.constprop.2
 279               	.LVL15:
 280               	.LBB43:
 281               	.LBB44:
 282               		.file 5 "./Board/LEDs.h"
   1:./Board/LEDs.h **** /*
   2:./Board/LEDs.h ****              LUFA Library
   3:./Board/LEDs.h ****      Copyright (C) Dean Camera, 2010.
   4:./Board/LEDs.h ****               
   5:./Board/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:./Board/LEDs.h ****       www.fourwalledcubicle.com
   7:./Board/LEDs.h **** */
   8:./Board/LEDs.h **** 
   9:./Board/LEDs.h **** /*
  10:./Board/LEDs.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./Board/LEDs.h **** 
  12:./Board/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:./Board/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:./Board/LEDs.h ****   without fee, provided that the above copyright notice appear in 
  15:./Board/LEDs.h ****   all copies and that both that the copyright notice and this
  16:./Board/LEDs.h ****   permission notice and warranty disclaimer appear in supporting 
  17:./Board/LEDs.h ****   documentation, and that the name of the author not be used in 
  18:./Board/LEDs.h ****   advertising or publicity pertaining to distribution of the 
  19:./Board/LEDs.h ****   software without specific, written prior permission.
  20:./Board/LEDs.h **** 
  21:./Board/LEDs.h ****   The author disclaim all warranties with regard to this
  22:./Board/LEDs.h ****   software, including all implied warranties of merchantability
  23:./Board/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:./Board/LEDs.h ****   special, indirect or consequential damages or any damages
  25:./Board/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./Board/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:./Board/LEDs.h ****   arising out of or in connection with the use or performance of
  28:./Board/LEDs.h ****   this software.
  29:./Board/LEDs.h **** */
  30:./Board/LEDs.h **** 
  31:./Board/LEDs.h **** /*
  32:./Board/LEDs.h ****    Board LEDs driver for the Benito board, from www.dorkbotpdx.org.
  33:./Board/LEDs.h **** */
  34:./Board/LEDs.h **** 
  35:./Board/LEDs.h **** #ifndef __LEDS_ARDUINOUNO_H__
  36:./Board/LEDs.h **** #define __LEDS_ARDUINOUNO_H__
  37:./Board/LEDs.h **** 
  38:./Board/LEDs.h **** 	/* Includes: */
  39:./Board/LEDs.h **** 		#include <avr/io.h>
  40:./Board/LEDs.h **** 
  41:./Board/LEDs.h **** /* Enable C linkage for C++ Compilers: */
  42:./Board/LEDs.h **** 		#if defined(__cplusplus)
  43:./Board/LEDs.h **** 			extern "C" {
  44:./Board/LEDs.h **** 		#endif
  45:./Board/LEDs.h **** 
  46:./Board/LEDs.h **** 	/* Preprocessor Checks: */
  47:./Board/LEDs.h **** 		#if !defined(INCLUDE_FROM_LEDS_H)
  48:./Board/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  49:./Board/LEDs.h **** 		#endif
  50:./Board/LEDs.h **** 
  51:./Board/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  52:./Board/LEDs.h **** 		/* Macros: */
  53:./Board/LEDs.h **** 			/** LED mask for the first LED on the board. */
  54:./Board/LEDs.h **** 			#define LEDS_LED1        (1 << 5)
  55:./Board/LEDs.h **** 
  56:./Board/LEDs.h **** 			/** LED mask for the second LED on the board. */
  57:./Board/LEDs.h **** 			#define LEDS_LED2        (1 << 4)
  58:./Board/LEDs.h **** 
  59:./Board/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  60:./Board/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2)
  61:./Board/LEDs.h **** 
  62:./Board/LEDs.h **** 			/** LED mask for the none of the board LEDs */
  63:./Board/LEDs.h **** 			#define LEDS_NO_LEDS     0
  64:./Board/LEDs.h **** 
  65:./Board/LEDs.h **** 		/* Inline Functions: */
  66:./Board/LEDs.h **** 		#if !defined(__DOXYGEN__)
  67:./Board/LEDs.h **** 			static inline void LEDs_Init(void)
  68:./Board/LEDs.h **** 			{
  69:./Board/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
 283               		.loc 5 69 0
 284 0024 8AB1      		in r24,0xa
 285 0026 8063      		ori r24,lo8(48)
 286 0028 8AB9      		out 0xa,r24
  70:./Board/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
 287               		.loc 5 70 0
 288 002a 8BB1      		in r24,0xb
 289 002c 8063      		ori r24,lo8(48)
 290 002e 8BB9      		out 0xb,r24
 291               	.LBE44:
 292               	.LBE43:
 500:Arduino-usbserial.c **** 
 501:Arduino-usbserial.c **** 	LEDs_Init();
 502:Arduino-usbserial.c **** 
 503:Arduino-usbserial.c **** 	USB_Init();
 293               		.loc 4 503 0
 294 0030 0E94 0000 		call USB_Init
 295               	.LVL16:
 504:Arduino-usbserial.c **** 
 505:Arduino-usbserial.c **** 
 506:Arduino-usbserial.c **** 
 507:Arduino-usbserial.c **** 	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interfa
 508:Arduino-usbserial.c **** 
 509:Arduino-usbserial.c **** 	TCCR0B = (1 << CS02);
 296               		.loc 4 509 0
 297 0034 84E0      		ldi r24,lo8(4)
 298 0036 85BD      		out 0x25,r24
 299 0038 0895      		ret
 300               		.cfi_endproc
 301               	.LFE88:
 303               		.section	.text.startup.main,"ax",@progbits
 304               	.global	main
 306               	main:
 307               	.LFB87:
 255:Arduino-usbserial.c **** 
 308               		.loc 4 255 0
 309               		.cfi_startproc
 310               	/* prologue: function */
 311               	/* frame size = 0 */
 312               	/* stack size = 0 */
 313               	.L__stack_usage = 0
 257:Arduino-usbserial.c **** 
 314               		.loc 4 257 0
 315 0000 0E94 0000 		call SetupHardware
 316               	.LVL17:
 317               	.LBB98:
 318               	.LBB99:
  87:Lib/LightweightRingBuff.h **** 			{
 319               		.loc 1 87 0
 320 0004 2FB7      		in r18,__SREG__
 321               	.LVL18:
 322               	.LBB100:
 323               	.LBB101:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 324               		.loc 2 50 0
 325               	/* #APP */
 326               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 327 0006 F894      		cli
 328               	 ;  0 "" 2
 329               	.LVL19:
 330               	/* #NOAPP */
 331               	.LBE101:
 332               	.LBE100:
  89:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 333               		.loc 1 89 0
 334 0008 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 335 000a 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 336 000c 9093 0000 		sts USBtoUSART_Buffer+128+1,r25
 337 0010 8093 0000 		sts USBtoUSART_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 			}
 338               		.loc 1 90 0
 339 0014 9093 0000 		sts USBtoUSART_Buffer+130+1,r25
 340 0018 8093 0000 		sts USBtoUSART_Buffer+130,r24
 341               	.LVL20:
 342               	.LBB102:
 343               	.LBB103:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 344               		.loc 2 70 0
 345 001c 2FBF      		out __SREG__,r18
 346               		.loc 2 71 0
 347               	.LVL21:
 348               	.LBE103:
 349               	.LBE102:
 350               	.LBE99:
 351               	.LBE98:
 352               	.LBB104:
 353               	.LBB105:
  87:Lib/LightweightRingBuff.h **** 			{
 354               		.loc 1 87 0
 355 001e 2FB7      		in r18,__SREG__
 356               	.LVL22:
 357               	.LBB106:
 358               	.LBB107:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 359               		.loc 2 50 0
 360               	/* #APP */
 361               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 362 0020 F894      		cli
 363               	 ;  0 "" 2
 364               	.LVL23:
 365               	/* #NOAPP */
 366               	.LBE107:
 367               	.LBE106:
  89:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 368               		.loc 1 89 0
 369 0022 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 370 0024 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 371 0026 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 372 002a 8093 0000 		sts USARTtoUSB_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 			}
 373               		.loc 1 90 0
 374 002e 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 375 0032 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 376               	.LVL24:
 377               	.LBB108:
 378               	.LBB109:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 379               		.loc 2 70 0
 380 0036 2FBF      		out __SREG__,r18
 381               	.LVL25:
 382               		.loc 2 71 0
 383               	.LBE109:
 384               	.LBE108:
 385               	.LBE105:
 386               	.LBE104:
 267:Arduino-usbserial.c **** 
 387               		.loc 4 267 0
 388               	/* #APP */
 389               	 ;  267 "Arduino-usbserial.c" 1
 390 0038 7894      		sei
 391               	 ;  0 "" 2
 271:Arduino-usbserial.c **** 
 392               		.loc 4 271 0
 393               	/* #NOAPP */
 394 003a 2698      		cbi 0x4,6
 273:Arduino-usbserial.c **** 
 395               		.loc 4 273 0
 396 003c 2E9A      		sbi 0x5,6
 275:Arduino-usbserial.c **** 
 397               		.loc 4 275 0
 398 003e 2798      		cbi 0x4,7
 277:Arduino-usbserial.c **** 
 399               		.loc 4 277 0
 400 0040 2F9A      		sbi 0x5,7
 279:Arduino-usbserial.c **** 
 401               		.loc 4 279 0
 402 0042 249A      		sbi 0x4,4
 281:Arduino-usbserial.c **** 
 403               		.loc 4 281 0
 404 0044 2C98      		cbi 0x5,4
 283:Arduino-usbserial.c **** 
 405               		.loc 4 283 0
 406 0046 2598      		cbi 0x4,5
 285:Arduino-usbserial.c **** 
 407               		.loc 4 285 0
 408 0048 2D9A      		sbi 0x5,5
 409               	.LBB110:
 367:Arduino-usbserial.c **** 
 410               		.loc 4 367 0
 411 004a D3E0      		ldi r29,lo8(3)
 412               	.LVL26:
 413               	.L49:
 295:Arduino-usbserial.c **** 
 414               		.loc 4 295 0
 415 004c 1D99      		sbic 0x3,5
 416 004e 00C0      		rjmp .L16
 299:Arduino-usbserial.c **** 
 417               		.loc 4 299 0
 418               	/* #APP */
 419               	 ;  299 "Arduino-usbserial.c" 1
 420 0050 F894      		cli
 421               	 ;  0 "" 2
 422               	/* #NOAPP */
 423               	.LBB111:
 424               	.LBB112:
 110:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 111:../../LUFA/Drivers/Peripheral/Serial.h **** 
 112:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Turns off the USART driver, disabling and returning used hardware to their default configura
 113:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_ShutDown(void)
 114:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 115:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = 0;
 425               		.loc 3 115 0
 426 0052 1092 C900 		sts 201,__zero_reg__
 116:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = 0;
 427               		.loc 3 116 0
 428 0056 1092 C800 		sts 200,__zero_reg__
 117:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = 0;
 429               		.loc 3 117 0
 430 005a 1092 CA00 		sts 202,__zero_reg__
 118:../../LUFA/Drivers/Peripheral/Serial.h **** 
 119:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = 0;
 431               		.loc 3 119 0
 432 005e 1092 CD00 		sts 204+1,__zero_reg__
 433 0062 1092 CC00 		sts 204,__zero_reg__
 120:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 121:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  &= ~(1 << 3);
 434               		.loc 3 121 0
 435 0066 5398      		cbi 0xa,3
 122:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD &= ~(1 << 2);
 436               		.loc 3 122 0
 437 0068 5A98      		cbi 0xb,2
 438               	.LBE112:
 439               	.LBE111:
 303:Arduino-usbserial.c **** 
 440               		.loc 4 303 0
 441 006a 539A      		sbi 0xa,3
 305:Arduino-usbserial.c **** 
 442               		.loc 4 305 0
 443 006c 1D9B      		sbis 0x3,5
 444 006e 00C0      		rjmp .L17
 305:Arduino-usbserial.c **** 
 445               		.loc 4 305 0 is_stmt 0 discriminator 1
 446 0070 8BB1      		in r24,0xb
 447 0072 8062      		ori r24,lo8(32)
 448 0074 00C0      		rjmp .L18
 449               	.L17:
 305:Arduino-usbserial.c **** 
 450               		.loc 4 305 0 discriminator 2
 451 0076 8BB1      		in r24,0xb
 452 0078 8F7D      		andi r24,lo8(-33)
 453               	.L18:
 305:Arduino-usbserial.c **** 
 454               		.loc 4 305 0 discriminator 3
 455 007a 8BB9      		out 0xb,r24
 307:Arduino-usbserial.c **** 
 456               		.loc 4 307 0 is_stmt 1 discriminator 3
 457 007c 2C9A      		sbi 0x5,4
 458               	.L19:
 309:Arduino-usbserial.c **** 
 459               		.loc 4 309 0 discriminator 1
 460 007e 1D99      		sbic 0x3,5
 461 0080 00C0      		rjmp .L58
 313:Arduino-usbserial.c **** 
 462               		.loc 4 313 0
 463 0082 83B1      		in r24,0x3
 464 0084 8095      		com r24
 465 0086 881F      		rol r24
 466 0088 8827      		clr r24
 467 008a 881F      		rol r24
 468 008c 0E94 0000 		call setErasePin
 469               	.LVL27:
 315:Arduino-usbserial.c **** 
 470               		.loc 4 315 0
 471 0090 1E9B      		sbis 0x3,6
 472 0092 00C0      		rjmp .L20
 315:Arduino-usbserial.c **** 
 473               		.loc 4 315 0 is_stmt 0 discriminator 1
 474 0094 8BB1      		in r24,0xb
 475 0096 8860      		ori r24,lo8(8)
 476 0098 00C0      		rjmp .L21
 477               	.L20:
 315:Arduino-usbserial.c **** 
 478               		.loc 4 315 0 discriminator 2
 479 009a 8BB1      		in r24,0xb
 480 009c 877F      		andi r24,lo8(-9)
 481               	.L21:
 315:Arduino-usbserial.c **** 
 482               		.loc 4 315 0 discriminator 3
 483 009e 8BB9      		out 0xb,r24
 317:Arduino-usbserial.c **** 
 484               		.loc 4 317 0 is_stmt 1 discriminator 3
 485 00a0 1E9B      		sbis 0x3,6
 486 00a2 00C0      		rjmp .L22
 317:Arduino-usbserial.c **** 
 487               		.loc 4 317 0 is_stmt 0 discriminator 1
 488 00a4 8BB1      		in r24,0xb
 489 00a6 8061      		ori r24,lo8(16)
 490 00a8 00C0      		rjmp .L23
 491               	.L22:
 317:Arduino-usbserial.c **** 
 492               		.loc 4 317 0 discriminator 2
 493 00aa 8BB1      		in r24,0xb
 494 00ac 8F7E      		andi r24,lo8(-17)
 495               	.L23:
 317:Arduino-usbserial.c **** 
 496               		.loc 4 317 0 discriminator 3
 497 00ae 8BB9      		out 0xb,r24
 498 00b0 00C0      		rjmp .L19
 499               	.L58:
 321:Arduino-usbserial.c **** 
 500               		.loc 4 321 0 is_stmt 1
 501 00b2 2C98      		cbi 0x5,4
 323:Arduino-usbserial.c **** 
 502               		.loc 4 323 0
 503 00b4 1D9B      		sbis 0x3,5
 504 00b6 00C0      		rjmp .L25
 323:Arduino-usbserial.c **** 
 505               		.loc 4 323 0 is_stmt 0 discriminator 1
 506 00b8 8BB1      		in r24,0xb
 507 00ba 8062      		ori r24,lo8(32)
 508 00bc 00C0      		rjmp .L26
 509               	.L25:
 323:Arduino-usbserial.c **** 
 510               		.loc 4 323 0 discriminator 2
 511 00be 8BB1      		in r24,0xb
 512 00c0 8F7D      		andi r24,lo8(-33)
 513               	.L26:
 323:Arduino-usbserial.c **** 
 514               		.loc 4 323 0 discriminator 3
 515 00c2 8BB9      		out 0xb,r24
 325:Arduino-usbserial.c **** 
 516               		.loc 4 325 0 is_stmt 1 discriminator 3
 517 00c4 0E94 0000 		call Serial_Init.constprop.2
 518               	.LVL28:
 327:Arduino-usbserial.c **** 
 519               		.loc 4 327 0 discriminator 3
 520               	/* #APP */
 521               	 ;  327 "Arduino-usbserial.c" 1
 522 00c8 7894      		sei
 523               	 ;  0 "" 2
 524               	/* #NOAPP */
 525               	.L16:
 526               	.LVL29:
 527               	.LBB113:
 528               	.LBB114:
 529               	.LBB115:
 530               	.LBB116:
 111:Lib/LightweightRingBuff.h **** 			{
 531               		.loc 1 111 0
 532 00ca 9FB7      		in r25,__SREG__
 533               	.LVL30:
 534               	.LBB117:
 535               	.LBB118:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 536               		.loc 2 50 0
 537               	/* #APP */
 538               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 539 00cc F894      		cli
 540               	 ;  0 "" 2
 541               	.LVL31:
 542               	/* #NOAPP */
 543               	.LBE118:
 544               	.LBE117:
 113:Lib/LightweightRingBuff.h **** 			}
 545               		.loc 1 113 0
 546 00ce 8091 0000 		lds r24,USBtoUSART_Buffer+132
 547               	.LVL32:
 548               	.LBB119:
 549               	.LBB120:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 550               		.loc 2 70 0
 551 00d2 9FBF      		out __SREG__,r25
 552               		.loc 2 71 0
 553               	.LBE120:
 554               	.LBE119:
 555               	.LBE116:
 556               	.LBE115:
 557               	.LBE114:
 558               	.LBE113:
 333:Arduino-usbserial.c **** 
 559               		.loc 4 333 0
 560 00d4 8038      		cpi r24,lo8(-128)
 561 00d6 01F0      		breq .L28
 562               	.LBB121:
 337:Arduino-usbserial.c **** 
 563               		.loc 4 337 0
 564 00d8 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 565 00da 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 566               	.LVL33:
 567 00dc 0E94 0000 		call CDC_Device_ReceiveByte
 568               	.LVL34:
 343:Arduino-usbserial.c **** 
 569               		.loc 4 343 0
 570 00e0 97FD      		sbrc r25,7
 571 00e2 00C0      		rjmp .L28
 345:Arduino-usbserial.c **** 
 572               		.loc 4 345 0
 573 00e4 682F      		mov r22,r24
 574 00e6 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 575 00e8 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 576               	.LVL35:
 577 00ea 0E94 0000 		call RingBuffer_Insert
 578               	.LVL36:
 579               	.L28:
 580               	.LBE121:
 581               	.LBB122:
 582               	.LBB123:
 583               	.LBB124:
 111:Lib/LightweightRingBuff.h **** 			{
 584               		.loc 1 111 0
 585 00ee 8FB7      		in r24,__SREG__
 586               	.LVL37:
 587               	.LBB125:
 588               	.LBB126:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 589               		.loc 2 50 0
 590               	/* #APP */
 591               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 592 00f0 F894      		cli
 593               	 ;  0 "" 2
 594               	.LVL38:
 595               	/* #NOAPP */
 596               	.LBE126:
 597               	.LBE125:
 113:Lib/LightweightRingBuff.h **** 			}
 598               		.loc 1 113 0
 599 00f2 C091 0000 		lds r28,USARTtoUSB_Buffer+132
 600               	.LVL39:
 601               	.LBB127:
 602               	.LBB128:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 603               		.loc 2 70 0
 604 00f6 8FBF      		out __SREG__,r24
 605               		.loc 2 71 0
 606               	.LBE128:
 607               	.LBE127:
 608               	.LBE124:
 609               	.LBE123:
 610               	.LBE122:
 355:Arduino-usbserial.c **** 
 611               		.loc 4 355 0
 612 00f8 A899      		sbic 0x15,0
 613 00fa 00C0      		rjmp .L30
 355:Arduino-usbserial.c **** 
 614               		.loc 4 355 0 is_stmt 0 discriminator 1
 615 00fc C136      		cpi r28,lo8(97)
 616 00fe 00F4      		brsh .+2
 617 0100 00C0      		rjmp .L31
 618               	.L30:
 359:Arduino-usbserial.c **** 
 619               		.loc 4 359 0 is_stmt 1
 620 0102 A89A      		sbi 0x15,0
 363:Arduino-usbserial.c **** 
 621               		.loc 4 363 0
 622 0104 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 623               	.LVL40:
 624 0108 8823      		tst r24
 625 010a 01F0      		breq .L33
 626               	.LVL41:
 627               	.LBB129:
 628               	.LBB130:
  71:./Board/LEDs.h **** 			}
  72:./Board/LEDs.h **** 			
  73:./Board/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  74:./Board/LEDs.h **** 			{
  75:./Board/LEDs.h **** 				PORTD &= ~LEDMask;
 629               		.loc 5 75 0
 630 010c 5D98      		cbi 0xb,5
 631               	.LBE130:
 632               	.LBE129:
 367:Arduino-usbserial.c **** 
 633               		.loc 4 367 0
 634 010e D093 0000 		sts PulseMSRemaining,r29
 635               	.LVL42:
 636               	.L33:
 375:Arduino-usbserial.c **** 
 637               		.loc 4 375 0 discriminator 1
 638 0112 CC23      		tst r28
 639 0114 01F0      		breq .L59
 377:Arduino-usbserial.c **** 
 640               		.loc 4 377 0
 641 0116 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 642 0118 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 643 011a 0E94 0000 		call RingBuffer_Remove
 644               	.LVL43:
 645 011e 682F      		mov r22,r24
 646 0120 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 647 0122 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 648 0124 0E94 0000 		call CDC_Device_SendByte
 649               	.LVL44:
 650 0128 C150      		subi r28,lo8(-(-1))
 651               	.LVL45:
 652 012a 00C0      		rjmp .L33
 653               	.LVL46:
 654               	.L59:
 383:Arduino-usbserial.c **** 
 655               		.loc 4 383 0
 656 012c 8091 0000 		lds r24,PulseMSRemaining
 657 0130 8823      		tst r24
 658 0132 01F0      		breq .L36
 383:Arduino-usbserial.c **** 
 659               		.loc 4 383 0 is_stmt 0 discriminator 1
 660 0134 8091 0000 		lds r24,PulseMSRemaining
 661 0138 8150      		subi r24,lo8(-(-1))
 662 013a 8093 0000 		sts PulseMSRemaining,r24
 663 013e 8111      		cpse r24,__zero_reg__
 664 0140 00C0      		rjmp .L36
 665               	.LVL47:
 666               	.LBB131:
 667               	.LBB132:
  76:./Board/LEDs.h **** 			}
  77:./Board/LEDs.h **** 
  78:./Board/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
  79:./Board/LEDs.h **** 			{
  80:./Board/LEDs.h **** 				PORTD |= LEDMask;
 668               		.loc 5 80 0 is_stmt 1
 669 0142 5D9A      		sbi 0xb,5
 670               	.LVL48:
 671               	.L36:
 672               	.LBE132:
 673               	.LBE131:
 391:Arduino-usbserial.c **** 
 674               		.loc 4 391 0
 675 0144 8091 0000 		lds r24,PulseMSRemaining+1
 676 0148 8823      		tst r24
 677 014a 01F0      		breq .L39
 391:Arduino-usbserial.c **** 
 678               		.loc 4 391 0 is_stmt 0 discriminator 1
 679 014c 8091 0000 		lds r24,PulseMSRemaining+1
 680 0150 8150      		subi r24,lo8(-(-1))
 681 0152 8093 0000 		sts PulseMSRemaining+1,r24
 682 0156 8111      		cpse r24,__zero_reg__
 683 0158 00C0      		rjmp .L39
 684               	.LVL49:
 685               	.LBB133:
 686               	.LBB134:
 687               		.loc 5 80 0 is_stmt 1
 688 015a 5C9A      		sbi 0xb,4
 689               	.LVL50:
 690               	.L39:
 691               	.LBE134:
 692               	.LBE133:
 397:Arduino-usbserial.c **** 
 693               		.loc 4 397 0
 694 015c 8091 0000 		lds r24,ResetTimer
 695 0160 9091 0000 		lds r25,ResetTimer+1
 696 0164 1816      		cp __zero_reg__,r24
 697 0166 1906      		cpc __zero_reg__,r25
 698 0168 04F4      		brge .L41
 407:Arduino-usbserial.c **** 
 699               		.loc 4 407 0
 700 016a CC97      		sbiw r24,60
 701 016c CD97      		sbiw r24,61
 702 016e 00F4      		brsh .L42
 409:Arduino-usbserial.c **** 
 703               		.loc 4 409 0
 704 0170 81E0      		ldi r24,lo8(1)
 705 0172 00C0      		rjmp .L56
 706               	.L42:
 413:Arduino-usbserial.c **** 
 707               		.loc 4 413 0
 708 0174 80E0      		ldi r24,0
 709               	.L56:
 710 0176 0E94 0000 		call setErasePin
 711               	.LVL51:
 421:Arduino-usbserial.c **** 
 712               		.loc 4 421 0
 713 017a 8091 0000 		lds r24,ResetTimer
 714 017e 9091 0000 		lds r25,ResetTimer+1
 715 0182 0197      		sbiw r24,1
 716 0184 C297      		sbiw r24,50
 717 0186 00F4      		brsh .L44
 423:Arduino-usbserial.c **** 
 718               		.loc 4 423 0
 719 0188 81E0      		ldi r24,lo8(1)
 720 018a 00C0      		rjmp .L57
 721               	.L44:
 427:Arduino-usbserial.c **** 
 722               		.loc 4 427 0
 723 018c 80E0      		ldi r24,0
 724               	.L57:
 725 018e 0E94 0000 		call setResetPin
 726               	.LVL52:
 431:Arduino-usbserial.c **** 
 727               		.loc 4 431 0
 728 0192 8091 0000 		lds r24,ResetTimer
 729 0196 9091 0000 		lds r25,ResetTimer+1
 730 019a 0197      		sbiw r24,1
 731 019c 9093 0000 		sts ResetTimer+1,r25
 732 01a0 8093 0000 		sts ResetTimer,r24
 733 01a4 00C0      		rjmp .L31
 734               	.L41:
 435:Arduino-usbserial.c **** 
 735               		.loc 4 435 0
 736 01a6 80E0      		ldi r24,0
 737 01a8 0E94 0000 		call setErasePin
 738               	.LVL53:
 437:Arduino-usbserial.c **** 
 739               		.loc 4 437 0
 740 01ac 80E0      		ldi r24,0
 741 01ae 0E94 0000 		call setResetPin
 742               	.LVL54:
 743               	.L31:
 744               	.LBB135:
 745               	.LBB136:
 746               	.LBB137:
 747               	.LBB138:
 111:Lib/LightweightRingBuff.h **** 			{
 748               		.loc 1 111 0
 749 01b2 9FB7      		in r25,__SREG__
 750               	.LVL55:
 751               	.LBB139:
 752               	.LBB140:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 753               		.loc 2 50 0
 754               	/* #APP */
 755               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 756 01b4 F894      		cli
 757               	 ;  0 "" 2
 758               	.LVL56:
 759               	/* #NOAPP */
 760               	.LBE140:
 761               	.LBE139:
 113:Lib/LightweightRingBuff.h **** 			}
 762               		.loc 1 113 0
 763 01b6 8091 0000 		lds r24,USBtoUSART_Buffer+132
 764               	.LVL57:
 765               	.LBB141:
 766               	.LBB142:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 767               		.loc 2 70 0
 768 01ba 9FBF      		out __SREG__,r25
 769               		.loc 2 71 0
 770               	.LBE142:
 771               	.LBE141:
 772               	.LBE138:
 773               	.LBE137:
 774               	.LBE136:
 775               	.LBE135:
 447:Arduino-usbserial.c **** 
 776               		.loc 4 447 0
 777 01bc 8823      		tst r24
 778 01be 01F0      		breq .L46
 449:Arduino-usbserial.c **** 
 779               		.loc 4 449 0
 780 01c0 80E0      		ldi r24,lo8(USBtoUSART_Buffer)
 781 01c2 90E0      		ldi r25,hi8(USBtoUSART_Buffer)
 782               	.LVL58:
 783 01c4 0E94 0000 		call RingBuffer_Remove
 784               	.LVL59:
 785               	.L48:
 786               	.LBB143:
 787               	.LBB144:
 123:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 124:../../LUFA/Drivers/Peripheral/Serial.h **** 
 125:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Indicates whether a character has been received through the USART.
 126:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
 127:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \return Boolean true if a character has been received, false otherwise.
 128:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
 129:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 130:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void)
 131:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 132:../../LUFA/Drivers/Peripheral/Serial.h **** 				return ((UCSR1A & (1 << RXC1)) ? true : false);
 133:../../LUFA/Drivers/Peripheral/Serial.h **** 			}
 134:../../LUFA/Drivers/Peripheral/Serial.h **** 			
 135:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given byte through the USART.
 136:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
 137:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DataByte  Byte to transmit through the USART.
 138:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
 139:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
 140:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte)
 141:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 142:../../LUFA/Drivers/Peripheral/Serial.h **** 				while (!(UCSR1A & (1 << UDRE1)));
 788               		.loc 3 142 0
 789 01c8 9091 C800 		lds r25,200
 790 01cc 95FF      		sbrs r25,5
 791 01ce 00C0      		rjmp .L48
 143:../../LUFA/Drivers/Peripheral/Serial.h **** 				UDR1 = DataByte;
 792               		.loc 3 143 0
 793 01d0 8093 CE00 		sts 206,r24
 794               	.LVL60:
 795               	.LBE144:
 796               	.LBE143:
 797               	.LBB145:
 798               	.LBB146:
  75:./Board/LEDs.h **** 			}
 799               		.loc 5 75 0
 800 01d4 5C98      		cbi 0xb,4
 801               	.LBE146:
 802               	.LBE145:
 453:Arduino-usbserial.c **** 
 803               		.loc 4 453 0
 804 01d6 D093 0000 		sts PulseMSRemaining+1,r29
 805               	.LVL61:
 806               	.L46:
 459:Arduino-usbserial.c **** 
 807               		.loc 4 459 0
 808 01da 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 809 01dc 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 810 01de 0E94 0000 		call CDC_Device_USBTask
 811               	.LVL62:
 461:Arduino-usbserial.c **** 
 812               		.loc 4 461 0
 813 01e2 0E94 0000 		call USB_USBTask
 814               	.LVL63:
 815               	.LBE110:
 463:Arduino-usbserial.c **** 
 816               		.loc 4 463 0
 817 01e6 00C0      		rjmp .L49
 818               		.cfi_endproc
 819               	.LFE87:
 821               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 822               	.global	EVENT_USB_Device_ConfigurationChanged
 824               	EVENT_USB_Device_ConfigurationChanged:
 825               	.LFB89:
 510:Arduino-usbserial.c **** 
 511:Arduino-usbserial.c **** }
 512:Arduino-usbserial.c **** 
 513:Arduino-usbserial.c **** 
 514:Arduino-usbserial.c **** 
 515:Arduino-usbserial.c **** /** Event handler for the library USB Configuration Changed event. */
 516:Arduino-usbserial.c **** 
 517:Arduino-usbserial.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 518:Arduino-usbserial.c **** 
 519:Arduino-usbserial.c **** {
 826               		.loc 4 519 0
 827               		.cfi_startproc
 828               	/* prologue: function */
 829               	/* frame size = 0 */
 830               	/* stack size = 0 */
 831               	.L__stack_usage = 0
 520:Arduino-usbserial.c **** 
 521:Arduino-usbserial.c **** 	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 832               		.loc 4 521 0
 833 0000 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 834 0002 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 835 0004 0C94 0000 		jmp CDC_Device_ConfigureEndpoints
 836               	.LVL64:
 837               		.cfi_endproc
 838               	.LFE89:
 840               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 841               	.global	EVENT_USB_Device_UnhandledControlRequest
 843               	EVENT_USB_Device_UnhandledControlRequest:
 844               	.LFB90:
 522:Arduino-usbserial.c **** 
 523:Arduino-usbserial.c **** }
 524:Arduino-usbserial.c **** 
 525:Arduino-usbserial.c **** 
 526:Arduino-usbserial.c **** 
 527:Arduino-usbserial.c **** /** Event handler for the library USB Unhandled Control Request event. */
 528:Arduino-usbserial.c **** 
 529:Arduino-usbserial.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 530:Arduino-usbserial.c **** 
 531:Arduino-usbserial.c **** {
 845               		.loc 4 531 0
 846               		.cfi_startproc
 847               	/* prologue: function */
 848               	/* frame size = 0 */
 849               	/* stack size = 0 */
 850               	.L__stack_usage = 0
 532:Arduino-usbserial.c **** 
 533:Arduino-usbserial.c **** 	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 851               		.loc 4 533 0
 852 0000 80E0      		ldi r24,lo8(VirtualSerial_CDC_Interface)
 853 0002 90E0      		ldi r25,hi8(VirtualSerial_CDC_Interface)
 854 0004 0C94 0000 		jmp CDC_Device_ProcessControlRequest
 855               	.LVL65:
 856               		.cfi_endproc
 857               	.LFE90:
 859               		.section	.text.EVENT_CDC_Device_LineEncodingChanged,"ax",@progbits
 860               	.global	EVENT_CDC_Device_LineEncodingChanged
 862               	EVENT_CDC_Device_LineEncodingChanged:
 863               	.LFB91:
 534:Arduino-usbserial.c **** 
 535:Arduino-usbserial.c **** }
 536:Arduino-usbserial.c **** 
 537:Arduino-usbserial.c **** 
 538:Arduino-usbserial.c **** 
 539:Arduino-usbserial.c **** /** Event handler for the CDC Class driver Line Encoding Changed event.
 540:Arduino-usbserial.c **** 
 541:Arduino-usbserial.c ****  *
 542:Arduino-usbserial.c **** 
 543:Arduino-usbserial.c ****  *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being r
 544:Arduino-usbserial.c **** 
 545:Arduino-usbserial.c ****  */
 546:Arduino-usbserial.c **** 
 547:Arduino-usbserial.c **** void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
 548:Arduino-usbserial.c **** 
 549:Arduino-usbserial.c **** {
 864               		.loc 4 549 0
 865               		.cfi_startproc
 866               	.LVL66:
 867 0000 CF92      		push r12
 868               	.LCFI0:
 869               		.cfi_def_cfa_offset 3
 870               		.cfi_offset 12, -2
 871 0002 DF92      		push r13
 872               	.LCFI1:
 873               		.cfi_def_cfa_offset 4
 874               		.cfi_offset 13, -3
 875 0004 EF92      		push r14
 876               	.LCFI2:
 877               		.cfi_def_cfa_offset 5
 878               		.cfi_offset 14, -4
 879 0006 FF92      		push r15
 880               	.LCFI3:
 881               		.cfi_def_cfa_offset 6
 882               		.cfi_offset 15, -5
 883 0008 CF93      		push r28
 884               	.LCFI4:
 885               		.cfi_def_cfa_offset 7
 886               		.cfi_offset 28, -6
 887               	/* prologue: function */
 888               	/* frame size = 0 */
 889               	/* stack size = 5 */
 890               	.L__stack_usage = 5
 891 000a FC01      		movw r30,r24
 892               	.LVL67:
 550:Arduino-usbserial.c **** 
 551:Arduino-usbserial.c **** 	uint8_t ConfigMask = 0;
 552:Arduino-usbserial.c **** 
 553:Arduino-usbserial.c **** 
 554:Arduino-usbserial.c **** 
 555:Arduino-usbserial.c **** 	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 893               		.loc 4 555 0
 894 000c 8489      		ldd r24,Z+20
 895               	.LVL68:
 896 000e 8130      		cpi r24,lo8(1)
 897 0010 01F0      		breq .L72
 898 0012 8230      		cpi r24,lo8(2)
 899 0014 01F0      		breq .L65
 551:Arduino-usbserial.c **** 
 900               		.loc 4 551 0
 901 0016 C0E0      		ldi r28,0
 902 0018 00C0      		rjmp .L64
 903               	.L65:
 904               	.LVL69:
 556:Arduino-usbserial.c **** 
 557:Arduino-usbserial.c **** 	{
 558:Arduino-usbserial.c **** 
 559:Arduino-usbserial.c **** 		case CDC_PARITY_Odd:
 560:Arduino-usbserial.c **** 
 561:Arduino-usbserial.c **** 			ConfigMask = ((1 << UPM11) | (1 << UPM10));		
 562:Arduino-usbserial.c **** 
 563:Arduino-usbserial.c **** 			break;
 564:Arduino-usbserial.c **** 
 565:Arduino-usbserial.c **** 		case CDC_PARITY_Even:
 566:Arduino-usbserial.c **** 
 567:Arduino-usbserial.c **** 			ConfigMask = (1 << UPM11);		
 905               		.loc 4 567 0
 906 001a C0E2      		ldi r28,lo8(32)
 568:Arduino-usbserial.c **** 
 569:Arduino-usbserial.c **** 			break;
 907               		.loc 4 569 0
 908 001c 00C0      		rjmp .L64
 909               	.LVL70:
 910               	.L72:
 561:Arduino-usbserial.c **** 
 911               		.loc 4 561 0
 912 001e C0E3      		ldi r28,lo8(48)
 913               	.LVL71:
 914               	.L64:
 570:Arduino-usbserial.c **** 
 571:Arduino-usbserial.c **** 	}
 572:Arduino-usbserial.c **** 
 573:Arduino-usbserial.c **** 
 574:Arduino-usbserial.c **** 
 575:Arduino-usbserial.c **** 	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 915               		.loc 4 575 0
 916 0020 8389      		ldd r24,Z+19
 917 0022 8230      		cpi r24,lo8(2)
 918 0024 01F4      		brne .L66
 576:Arduino-usbserial.c **** 
 577:Arduino-usbserial.c **** 	  ConfigMask |= (1 << USBS1);
 919               		.loc 4 577 0
 920 0026 C860      		ori r28,lo8(8)
 921               	.LVL72:
 922               	.L66:
 578:Arduino-usbserial.c **** 
 579:Arduino-usbserial.c **** 
 580:Arduino-usbserial.c **** 
 581:Arduino-usbserial.c **** 	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 923               		.loc 4 581 0
 924 0028 8589      		ldd r24,Z+21
 925 002a 8730      		cpi r24,lo8(7)
 926 002c 01F0      		breq .L68
 927 002e 8830      		cpi r24,lo8(8)
 928 0030 01F0      		breq .L69
 929 0032 8630      		cpi r24,lo8(6)
 930 0034 01F4      		brne .L67
 582:Arduino-usbserial.c **** 
 583:Arduino-usbserial.c **** 	{
 584:Arduino-usbserial.c **** 
 585:Arduino-usbserial.c **** 		case 6:
 586:Arduino-usbserial.c **** 
 587:Arduino-usbserial.c **** 			ConfigMask |= (1 << UCSZ10);
 931               		.loc 4 587 0
 932 0036 C260      		ori r28,lo8(2)
 933               	.LVL73:
 588:Arduino-usbserial.c **** 
 589:Arduino-usbserial.c **** 			break;
 934               		.loc 4 589 0
 935 0038 00C0      		rjmp .L67
 936               	.L68:
 590:Arduino-usbserial.c **** 
 591:Arduino-usbserial.c **** 		case 7:
 592:Arduino-usbserial.c **** 
 593:Arduino-usbserial.c **** 			ConfigMask |= (1 << UCSZ11);
 937               		.loc 4 593 0
 938 003a C460      		ori r28,lo8(4)
 939               	.LVL74:
 594:Arduino-usbserial.c **** 
 595:Arduino-usbserial.c **** 			break;
 940               		.loc 4 595 0
 941 003c 00C0      		rjmp .L67
 942               	.L69:
 596:Arduino-usbserial.c **** 
 597:Arduino-usbserial.c **** 		case 8:
 598:Arduino-usbserial.c **** 
 599:Arduino-usbserial.c **** 			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 943               		.loc 4 599 0
 944 003e C660      		ori r28,lo8(6)
 945               	.LVL75:
 946               	.L67:
 600:Arduino-usbserial.c **** 
 601:Arduino-usbserial.c **** 			break;
 602:Arduino-usbserial.c **** 
 603:Arduino-usbserial.c **** 	}
 604:Arduino-usbserial.c **** 
 605:Arduino-usbserial.c **** 
 606:Arduino-usbserial.c **** 
 607:Arduino-usbserial.c **** 	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
 608:Arduino-usbserial.c **** 
 609:Arduino-usbserial.c **** 	UCSR1B = 0;
 947               		.loc 4 609 0
 948 0040 1092 C900 		sts 201,__zero_reg__
 610:Arduino-usbserial.c **** 
 611:Arduino-usbserial.c **** 	UCSR1A = 0;
 949               		.loc 4 611 0
 950 0044 1092 C800 		sts 200,__zero_reg__
 612:Arduino-usbserial.c **** 
 613:Arduino-usbserial.c **** 	UCSR1C = 0;
 951               		.loc 4 613 0
 952 0048 1092 CA00 		sts 202,__zero_reg__
 614:Arduino-usbserial.c **** 
 615:Arduino-usbserial.c **** 
 616:Arduino-usbserial.c **** 
 617:Arduino-usbserial.c **** 	long bps = CDCInterfaceInfo->State.LineEncoding.BaudRateBPS;
 953               		.loc 4 617 0
 954 004c C784      		ldd r12,Z+15
 955 004e D088      		ldd r13,Z+16
 956 0050 E188      		ldd r14,Z+17
 957 0052 F288      		ldd r15,Z+18
 958               	.LVL76:
 618:Arduino-usbserial.c **** 
 619:Arduino-usbserial.c **** 	Selected1200BPS = (bps == 1200);
 959               		.loc 4 619 0
 960 0054 81E0      		ldi r24,lo8(1)
 961 0056 90EB      		ldi r25,-80
 962 0058 C916      		cp r12,r25
 963 005a 94E0      		ldi r25,4
 964 005c D906      		cpc r13,r25
 965 005e E104      		cpc r14,__zero_reg__
 966 0060 F104      		cpc r15,__zero_reg__
 967 0062 01F0      		breq .L71
 968 0064 80E0      		ldi r24,0
 969               	.L71:
 970 0066 8093 0000 		sts Selected1200BPS,r24
 620:Arduino-usbserial.c **** 
 621:Arduino-usbserial.c **** 
 622:Arduino-usbserial.c **** 
 623:Arduino-usbserial.c **** 	UBRR1  = SERIAL_2X_UBBRVAL(bps);
 971               		.loc 4 623 0
 972 006a C701      		movw r24,r14
 973 006c B601      		movw r22,r12
 974 006e 22E0      		ldi r18,lo8(2)
 975 0070 30E0      		ldi r19,0
 976 0072 40E0      		ldi r20,0
 977 0074 50E0      		ldi r21,0
 978 0076 0E94 0000 		call __divmodsi4
 979               	.LVL77:
 980 007a 2058      		subi r18,-128
 981 007c 3B47      		sbci r19,123
 982 007e 414E      		sbci r20,-31
 983 0080 5F4F      		sbci r21,-1
 984 0082 CA01      		movw r24,r20
 985 0084 B901      		movw r22,r18
 986 0086 A701      		movw r20,r14
 987 0088 9601      		movw r18,r12
 988 008a 0E94 0000 		call __udivmodsi4
 989 008e 2150      		subi r18,1
 990 0090 3109      		sbc r19,__zero_reg__
 991 0092 3093 CD00 		sts 204+1,r19
 992 0096 2093 CC00 		sts 204,r18
 624:Arduino-usbserial.c **** 
 625:Arduino-usbserial.c **** 	UCSR1C = ConfigMask;
 993               		.loc 4 625 0
 994 009a C093 CA00 		sts 202,r28
 626:Arduino-usbserial.c **** 
 627:Arduino-usbserial.c **** 	UCSR1A = (1 << U2X1);
 995               		.loc 4 627 0
 996 009e 82E0      		ldi r24,lo8(2)
 997 00a0 8093 C800 		sts 200,r24
 628:Arduino-usbserial.c **** 
 629:Arduino-usbserial.c **** 	UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
 998               		.loc 4 629 0
 999 00a4 88E9      		ldi r24,lo8(-104)
 1000 00a6 8093 C900 		sts 201,r24
 1001               	/* epilogue start */
 630:Arduino-usbserial.c **** 
 631:Arduino-usbserial.c **** }
 1002               		.loc 4 631 0
 1003 00aa CF91      		pop r28
 1004               	.LVL78:
 1005 00ac FF90      		pop r15
 1006 00ae EF90      		pop r14
 1007 00b0 DF90      		pop r13
 1008 00b2 CF90      		pop r12
 1009               	.LVL79:
 1010 00b4 0895      		ret
 1011               		.cfi_endproc
 1012               	.LFE91:
 1014               		.section	.text.__vector_23,"ax",@progbits
 1015               	.global	__vector_23
 1017               	__vector_23:
 1018               	.LFB92:
 632:Arduino-usbserial.c **** 
 633:Arduino-usbserial.c **** 
 634:Arduino-usbserial.c **** 
 635:Arduino-usbserial.c **** /** ISR to manage the reception of data from the serial port, placing received bytes into a circula
 636:Arduino-usbserial.c **** 
 637:Arduino-usbserial.c ****  *  for later transmission to the host.
 638:Arduino-usbserial.c **** 
 639:Arduino-usbserial.c ****  */
 640:Arduino-usbserial.c **** 
 641:Arduino-usbserial.c **** ISR(USART1_RX_vect, ISR_BLOCK)
 642:Arduino-usbserial.c **** 
 643:Arduino-usbserial.c **** {
 1019               		.loc 4 643 0
 1020               		.cfi_startproc
 1021 0000 1F92      		push r1
 1022               	.LCFI5:
 1023               		.cfi_def_cfa_offset 3
 1024               		.cfi_offset 1, -2
 1025 0002 0F92      		push r0
 1026               	.LCFI6:
 1027               		.cfi_def_cfa_offset 4
 1028               		.cfi_offset 0, -3
 1029 0004 0FB6      		in r0,__SREG__
 1030 0006 0F92      		push r0
 1031 0008 1124      		clr __zero_reg__
 1032 000a 2F93      		push r18
 1033               	.LCFI7:
 1034               		.cfi_def_cfa_offset 5
 1035               		.cfi_offset 18, -4
 1036 000c 3F93      		push r19
 1037               	.LCFI8:
 1038               		.cfi_def_cfa_offset 6
 1039               		.cfi_offset 19, -5
 1040 000e 4F93      		push r20
 1041               	.LCFI9:
 1042               		.cfi_def_cfa_offset 7
 1043               		.cfi_offset 20, -6
 1044 0010 5F93      		push r21
 1045               	.LCFI10:
 1046               		.cfi_def_cfa_offset 8
 1047               		.cfi_offset 21, -7
 1048 0012 6F93      		push r22
 1049               	.LCFI11:
 1050               		.cfi_def_cfa_offset 9
 1051               		.cfi_offset 22, -8
 1052 0014 7F93      		push r23
 1053               	.LCFI12:
 1054               		.cfi_def_cfa_offset 10
 1055               		.cfi_offset 23, -9
 1056 0016 8F93      		push r24
 1057               	.LCFI13:
 1058               		.cfi_def_cfa_offset 11
 1059               		.cfi_offset 24, -10
 1060 0018 9F93      		push r25
 1061               	.LCFI14:
 1062               		.cfi_def_cfa_offset 12
 1063               		.cfi_offset 25, -11
 1064 001a AF93      		push r26
 1065               	.LCFI15:
 1066               		.cfi_def_cfa_offset 13
 1067               		.cfi_offset 26, -12
 1068 001c BF93      		push r27
 1069               	.LCFI16:
 1070               		.cfi_def_cfa_offset 14
 1071               		.cfi_offset 27, -13
 1072 001e EF93      		push r30
 1073               	.LCFI17:
 1074               		.cfi_def_cfa_offset 15
 1075               		.cfi_offset 30, -14
 1076 0020 FF93      		push r31
 1077               	.LCFI18:
 1078               		.cfi_def_cfa_offset 16
 1079               		.cfi_offset 31, -15
 1080               	/* prologue: Signal */
 1081               	/* frame size = 0 */
 1082               	/* stack size = 15 */
 1083               	.L__stack_usage = 15
 644:Arduino-usbserial.c **** 
 645:Arduino-usbserial.c **** 	uint8_t ReceivedByte = UDR1;
 1084               		.loc 4 645 0
 1085 0022 6091 CE00 		lds r22,206
 1086               	.LVL80:
 646:Arduino-usbserial.c **** 
 647:Arduino-usbserial.c **** 
 648:Arduino-usbserial.c **** 
 649:Arduino-usbserial.c **** 	if (USB_DeviceState == DEVICE_STATE_Configured)
 1087               		.loc 4 649 0
 1088 0026 8EB3      		in r24,0x1e
 1089 0028 8430      		cpi r24,lo8(4)
 1090 002a 01F4      		brne .L76
 650:Arduino-usbserial.c **** 
 651:Arduino-usbserial.c **** 	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 1091               		.loc 4 651 0
 1092 002c 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 1093 002e 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 1094 0030 0E94 0000 		call RingBuffer_Insert
 1095               	.LVL81:
 1096               	.L76:
 1097               	/* epilogue start */
 652:Arduino-usbserial.c **** 
 653:Arduino-usbserial.c **** }
 1098               		.loc 4 653 0
 1099 0034 FF91      		pop r31
 1100 0036 EF91      		pop r30
 1101 0038 BF91      		pop r27
 1102 003a AF91      		pop r26
 1103 003c 9F91      		pop r25
 1104 003e 8F91      		pop r24
 1105 0040 7F91      		pop r23
 1106 0042 6F91      		pop r22
 1107 0044 5F91      		pop r21
 1108 0046 4F91      		pop r20
 1109 0048 3F91      		pop r19
 1110 004a 2F91      		pop r18
 1111 004c 0F90      		pop r0
 1112 004e 0FBE      		out __SREG__,r0
 1113 0050 0F90      		pop r0
 1114 0052 1F90      		pop r1
 1115 0054 1895      		reti
 1116               		.cfi_endproc
 1117               	.LFE92:
 1119               		.section	.text.EVENT_CDC_Device_ControLineStateChanged,"ax",@progbits
 1120               	.global	EVENT_CDC_Device_ControLineStateChanged
 1122               	EVENT_CDC_Device_ControLineStateChanged:
 1123               	.LFB93:
 654:Arduino-usbserial.c **** 
 655:Arduino-usbserial.c **** 
 656:Arduino-usbserial.c **** 
 657:Arduino-usbserial.c **** /** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 658:Arduino-usbserial.c **** 
 659:Arduino-usbserial.c ****  *
 660:Arduino-usbserial.c **** 
 661:Arduino-usbserial.c ****  *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being r
 662:Arduino-usbserial.c **** 
 663:Arduino-usbserial.c ****  */
 664:Arduino-usbserial.c **** 
 665:Arduino-usbserial.c **** void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
 666:Arduino-usbserial.c **** 
 667:Arduino-usbserial.c **** {
 1124               		.loc 4 667 0
 1125               		.cfi_startproc
 1126               	.LVL82:
 1127               	/* prologue: function */
 1128               	/* frame size = 0 */
 1129               	/* stack size = 0 */
 1130               	.L__stack_usage = 0
 668:Arduino-usbserial.c **** 
 669:Arduino-usbserial.c **** 	PreviousDTRState = CurrentDTRState;
 1131               		.loc 4 669 0
 1132 0000 2091 0000 		lds r18,CurrentDTRState
 1133 0004 2093 0000 		sts PreviousDTRState,r18
 670:Arduino-usbserial.c **** 
 671:Arduino-usbserial.c **** 	PreviousRTSState = CurrentRTSState;
 1134               		.loc 4 671 0
 1135 0008 3091 0000 		lds r19,CurrentRTSState
 1136 000c 3093 0000 		sts PreviousRTSState,r19
 672:Arduino-usbserial.c **** 
 673:Arduino-usbserial.c **** 	CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_D
 1137               		.loc 4 673 0
 1138 0010 FC01      		movw r30,r24
 1139 0012 9585      		ldd r25,Z+13
 1140 0014 892F      		mov r24,r25
 1141               	.LVL83:
 1142 0016 8170      		andi r24,lo8(1)
 1143 0018 8093 0000 		sts CurrentDTRState,r24
 674:Arduino-usbserial.c **** 
 675:Arduino-usbserial.c **** 	CurrentRTSState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_R
 1144               		.loc 4 675 0
 1145 001c 9695      		lsr r25
 1146 001e 9170      		andi r25,1
 1147 0020 9093 0000 		sts CurrentRTSState,r25
 676:Arduino-usbserial.c **** 
 677:Arduino-usbserial.c **** 
 678:Arduino-usbserial.c **** 
 679:Arduino-usbserial.c **** 	if (Selected1200BPS) {
 1148               		.loc 4 679 0
 1149 0024 9091 0000 		lds r25,Selected1200BPS
 1150 0028 9923      		tst r25
 1151 002a 01F0      		breq .L79
 680:Arduino-usbserial.c **** 
 681:Arduino-usbserial.c **** 		/* Start Erase / Reset procedure when receiving the magic "1200" baudrate */
 682:Arduino-usbserial.c **** 
 683:Arduino-usbserial.c **** 		ResetTimer = 120;
 1152               		.loc 4 683 0
 1153 002c 88E7      		ldi r24,lo8(120)
 1154 002e 90E0      		ldi r25,0
 1155 0030 00C0      		rjmp .L84
 1156               	.L79:
 684:Arduino-usbserial.c **** 
 685:Arduino-usbserial.c **** 	} else if (!PreviousDTRState && CurrentDTRState) {
 1157               		.loc 4 685 0
 1158 0032 2111      		cpse r18,__zero_reg__
 1159 0034 00C0      		rjmp .L78
 1160               		.loc 4 685 0 is_stmt 0 discriminator 1
 1161 0036 8823      		tst r24
 1162 0038 01F0      		breq .L78
 686:Arduino-usbserial.c **** 
 687:Arduino-usbserial.c **** 		/* Reset on rising edge of DTR */
 688:Arduino-usbserial.c **** 
 689:Arduino-usbserial.c **** 		ResetTimer = 50;
 1163               		.loc 4 689 0 is_stmt 1
 1164 003a 82E3      		ldi r24,lo8(50)
 1165 003c 90E0      		ldi r25,0
 1166               	.L84:
 1167 003e 9093 0000 		sts ResetTimer+1,r25
 1168 0042 8093 0000 		sts ResetTimer,r24
 1169               	.L78:
 1170 0046 0895      		ret
 1171               		.cfi_endproc
 1172               	.LFE93:
 1174               	.global	Selected1200BPS
 1175               		.section .bss
 1178               	Selected1200BPS:
 1179 0000 00        		.zero	1
 1180               	.global	PreviousRTSState
 1183               	PreviousRTSState:
 1184 0001 00        		.zero	1
 1185               	.global	CurrentRTSState
 1188               	CurrentRTSState:
 1189 0002 00        		.zero	1
 1190               	.global	PreviousDTRState
 1193               	PreviousDTRState:
 1194 0003 00        		.zero	1
 1195               	.global	CurrentDTRState
 1198               	CurrentDTRState:
 1199 0004 00        		.zero	1
 1200               	.global	tries
 1201               		.data
 1204               	tries:
 1205 0000 1400      		.word	20
 1206               	.global	ResetTimer
 1207               		.section .bss
 1210               	ResetTimer:
 1211 0005 0000      		.zero	2
 1212               	.global	VirtualSerial_CDC_Interface
 1213               		.data
 1216               	VirtualSerial_CDC_Interface:
 1217 0002 00        		.byte	0
 1218 0003 03        		.byte	3
 1219 0004 4000      		.word	64
 1220 0006 00        		.byte	0
 1221 0007 04        		.byte	4
 1222 0008 4000      		.word	64
 1223 000a 00        		.byte	0
 1224 000b 02        		.byte	2
 1225 000c 0800      		.word	8
 1226 000e 00        		.byte	0
 1227 000f 0000 0000 		.zero	9
 1227      0000 0000 
 1227      00
 1228               		.comm	PulseMSRemaining,3,1
 1229               		.comm	USARTtoUSB_Buffer,133,1
 1230               		.comm	USBtoUSART_Buffer,133,1
 1231               	.global	tmp_erase_cmd_last
 1232               		.section .bss
 1235               	tmp_erase_cmd_last:
 1236 0007 00        		.zero	1
 1237               	.global	tmp_erase_cmd
 1240               	tmp_erase_cmd:
 1241 0008 00        		.zero	1
 1242               	.global	ex_resettime
 1245               	ex_resettime:
 1246 0009 00        		.zero	1
 1247               		.text
 1248               	.Letext0:
 1249               		.file 6 "/usr/lib/avr/include/stdint.h"
 1250               		.file 7 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
 1251               		.file 8 "../../LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 1252               		.file 9 "../../LUFA/Drivers/USB/Class/Device/CDC.h"
 1253               		.file 10 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 1254               		.file 11 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Arduino-usbserial.c
     /tmp/ccAz0QEc.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccAz0QEc.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccAz0QEc.s:4      *ABS*:0000003f __SREG__
     /tmp/ccAz0QEc.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccAz0QEc.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccAz0QEc.s:12     .text.RingBuffer_Insert:00000000 RingBuffer_Insert
     /tmp/ccAz0QEc.s:85     .text.RingBuffer_Remove:00000000 RingBuffer_Remove
     /tmp/ccAz0QEc.s:157    .text.Serial_Init.constprop.2:00000000 Serial_Init.constprop.2
     /tmp/ccAz0QEc.s:191    .text.setResetPin:00000000 setResetPin
     /tmp/ccAz0QEc.s:220    .text.setErasePin:00000000 setErasePin
     /tmp/ccAz0QEc.s:245    .text.SetupHardware:00000000 SetupHardware
     /tmp/ccAz0QEc.s:306    .text.startup.main:00000000 main
                            *COM*:00000085 USBtoUSART_Buffer
                            *COM*:00000085 USARTtoUSB_Buffer
     /tmp/ccAz0QEc.s:1216   .data:00000002 VirtualSerial_CDC_Interface
                            *COM*:00000003 PulseMSRemaining
     /tmp/ccAz0QEc.s:1210   .bss:00000005 ResetTimer
     /tmp/ccAz0QEc.s:824    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccAz0QEc.s:843    .text.EVENT_USB_Device_UnhandledControlRequest:00000000 EVENT_USB_Device_UnhandledControlRequest
     /tmp/ccAz0QEc.s:862    .text.EVENT_CDC_Device_LineEncodingChanged:00000000 EVENT_CDC_Device_LineEncodingChanged
     /tmp/ccAz0QEc.s:1178   .bss:00000000 Selected1200BPS
     /tmp/ccAz0QEc.s:1017   .text.__vector_23:00000000 __vector_23
     /tmp/ccAz0QEc.s:1122   .text.EVENT_CDC_Device_ControLineStateChanged:00000000 EVENT_CDC_Device_ControLineStateChanged
     /tmp/ccAz0QEc.s:1198   .bss:00000004 CurrentDTRState
     /tmp/ccAz0QEc.s:1193   .bss:00000003 PreviousDTRState
     /tmp/ccAz0QEc.s:1188   .bss:00000002 CurrentRTSState
     /tmp/ccAz0QEc.s:1183   .bss:00000001 PreviousRTSState
     /tmp/ccAz0QEc.s:1204   .data:00000000 tries
     /tmp/ccAz0QEc.s:1235   .bss:00000007 tmp_erase_cmd_last
     /tmp/ccAz0QEc.s:1240   .bss:00000008 tmp_erase_cmd
     /tmp/ccAz0QEc.s:1245   .bss:00000009 ex_resettime

UNDEFINED SYMBOLS
USB_Init
CDC_Device_ReceiveByte
CDC_Device_SendByte
CDC_Device_USBTask
USB_USBTask
CDC_Device_ConfigureEndpoints
CDC_Device_ProcessControlRequest
__divmodsi4
__udivmodsi4
__do_copy_data
__do_clear_bss
