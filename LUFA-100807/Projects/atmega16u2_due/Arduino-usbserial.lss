
Arduino-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000010bc  00001150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000123  00800118  00800118  00001168  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000428  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008220  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020cf  00000000  00000000  000097c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f58  00000000  00000000  0000b890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c94  00000000  00000000  0000e7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002cc4  00000000  00000000  0000f47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004efb  00000000  00000000  00012140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004b0  00000000  00000000  0001703b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
       0:	9f c0       	rjmp	.+318    	; 0x140 <__ctors_end>
       2:	00 00       	nop
				PLLCSR |= (1 << PLLE);
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
	while (!(UDCON & (1 << RMWKUP)));
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
}
      2c:	97 c4       	rjmp	.+2350   	; 0x95c <__vector_11>
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
      2e:	00 00       	nop
				
				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
      30:	3c c5       	rjmp	.+2680   	; 0xaaa <__vector_12>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
				*BytesRem      -= CurrDescriptorSize;
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	98 c0       	rjmp	.+304    	; 0x176 <__bad_interrupt>
      46:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
				
		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c2       	rjmp	.+1162   	; 0x4e8 <__vector_23>
				*BytesRem      = PrevBytesRem;
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
		
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
}
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 05       	cpc	r27, r1
      76:	d3 05       	cpc	r29, r3
      78:	bd 06       	cpc	r11, r29
      7a:	d3 05       	cpc	r29, r3
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
      7c:	bd 06       	cpc	r11, r29
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
      7e:	15 06       	cpc	r1, r21
      80:	32 06       	cpc	r3, r18
      82:	bd 06       	cpc	r11, r29
      84:	85 06       	cpc	r8, r21
      86:	97 06       	cpc	r9, r23

00000088 <ProductString>:
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
      88:	2e 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
      98:	20 00 44 00 75 00 65 00 20 00 50 00 72 00 6f 00      .D.u.e. .P.r.o.
      a8:	67 00 2e 00 20 00 50 00 6f 00 72 00 74 00 00 00     g... .P.o.r.t...

000000b8 <ManufacturerString>:

				memset(ReportData, 0, sizeof(ReportData));
      b8:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
      c8:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
      d8:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
      e8:	29 00 00 00                                         )...

000000ec <LanguageString>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
      ec:	04 03 09 04                                         ....

000000f0 <ConfigurationDescriptor>:

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
      f0:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     100:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     110:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     120:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

0000012e <DeviceDescriptor>:
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     12e:	12 01 10 01 02 00 00 08 41 23 3d 00 01 00 01 02     ........A#=.....
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     13e:	dc 01                                               ..

00000140 <__ctors_end>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf ef       	ldi	r28, 0xFF	; 255
     146:	d2 e0       	ldi	r29, 0x02	; 2
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_copy_data>:
     14c:	11 e0       	ldi	r17, 0x01	; 1

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b1 e0       	ldi	r27, 0x01	; 1
     152:	ec eb       	ldi	r30, 0xBC	; 188
     154:	f0 e1       	ldi	r31, 0x10	; 16
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     156:	02 c0       	rjmp	.+4      	; 0x15c <__do_copy_data+0x10>
     158:	05 90       	lpm	r0, Z+
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
     15a:	0d 92       	st	X+, r0
     15c:	a8 31       	cpi	r26, 0x18	; 24
     15e:	b1 07       	cpc	r27, r17
     160:	d9 f7       	brne	.-10     	; 0x158 <__do_copy_data+0xc>

00000162 <__do_clear_bss>:
     162:	22 e0       	ldi	r18, 0x02	; 2
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     164:	a8 e1       	ldi	r26, 0x18	; 24
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	01 c0       	rjmp	.+2      	; 0x16c <.do_clear_bss_start>

0000016a <.do_clear_bss_loop>:
     16a:	1d 92       	st	X+, r1

0000016c <.do_clear_bss_start>:
     16c:	ab 33       	cpi	r26, 0x3B	; 59
     16e:	b2 07       	cpc	r27, r18
     170:	e1 f7       	brne	.-8      	; 0x16a <.do_clear_bss_loop>
     172:	75 d0       	rcall	.+234    	; 0x25e <main>
     174:	a1 c7       	rjmp	.+3906   	; 0x10b8 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <RingBuffer_Insert>:
     178:	fc 01       	movw	r30, r24
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     17a:	e0 58       	subi	r30, 0x80	; 128
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	a0 81       	ld	r26, Z
     180:	b1 81       	ldd	r27, Z+1	; 0x01
     182:	6c 93       	st	X, r22
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     184:	a0 81       	ld	r26, Z
     186:	b1 81       	ldd	r27, Z+1	; 0x01
     188:	9d 01       	movw	r18, r26
     18a:	2f 5f       	subi	r18, 0xFF	; 255
     18c:	3f 4f       	sbci	r19, 0xFF	; 255
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
     18e:	31 83       	std	Z+1, r19	; 0x01
     190:	20 83       	st	Z, r18
     192:	2e 17       	cp	r18, r30
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     194:	3f 07       	cpc	r19, r31
     196:	21 f4       	brne	.+8      	; 0x1a0 <RingBuffer_Insert+0x28>
     198:	12 96       	adiw	r26, 0x02	; 2
     19a:	9c 93       	st	X, r25
     19c:	8e 93       	st	-X, r24
     19e:	11 97       	sbiw	r26, 0x01	; 1
     1a0:	2f b7       	in	r18, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	fc 01       	movw	r30, r24
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     1a6:	ec 57       	subi	r30, 0x7C	; 124
     1a8:	ff 4f       	sbci	r31, 0xFF	; 255
     1aa:	80 81       	ld	r24, Z
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 83       	st	Z, r24
     1b0:	2f bf       	out	0x3f, r18	; 63
     1b2:	08 95       	ret

000001b4 <RingBuffer_Remove>:
     1b4:	dc 01       	movw	r26, r24
     1b6:	ae 57       	subi	r26, 0x7E	; 126
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     1b8:	bf 4f       	sbci	r27, 0xFF	; 255
     1ba:	ed 91       	ld	r30, X+
     1bc:	fc 91       	ld	r31, X
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	41 91       	ld	r20, Z+
     1c2:	11 96       	adiw	r26, 0x01	; 1
     1c4:	fc 93       	st	X, r31
     1c6:	ee 93       	st	-X, r30
     1c8:	9c 01       	movw	r18, r24
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     1ca:	20 58       	subi	r18, 0x80	; 128
     1cc:	3f 4f       	sbci	r19, 0xFF	; 255
     1ce:	e2 17       	cp	r30, r18
     1d0:	f3 07       	cpc	r31, r19
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <RingBuffer_Remove+0x24>
     1d4:	8d 93       	st	X+, r24
     1d6:	9c 93       	st	X, r25
     1d8:	2f b7       	in	r18, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	fc 01       	movw	r30, r24
     1de:	ec 57       	subi	r30, 0x7C	; 124
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	90 81       	ld	r25, Z
     1e4:	91 50       	subi	r25, 0x01	; 1
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     1e6:	90 83       	st	Z, r25
     1e8:	2f bf       	out	0x3f, r18	; 63
     1ea:	84 2f       	mov	r24, r20
     1ec:	08 95       	ret

000001ee <Serial_Init.constprop.2>:
     1ee:	87 e6       	ldi	r24, 0x67	; 103
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	90 93 cd 00 	sts	0x00CD, r25
     1f6:	80 93 cc 00 	sts	0x00CC, r24
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	80 93 ca 00 	sts	0x00CA, r24
     200:	10 92 c8 00 	sts	0x00C8, r1
     204:	88 e1       	ldi	r24, 0x18	; 24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     206:	80 93 c9 00 	sts	0x00C9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     20a:	53 9a       	sbi	0x0a, 3	; 10
     20c:	5a 9a       	sbi	0x0b, 2	; 11
     20e:	08 95       	ret

00000210 <setResetPin>:
     210:	88 23       	and	r24, r24
     212:	11 f0       	breq	.+4      	; 0x218 <setResetPin+0x8>
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
     214:	3f 9a       	sbi	0x07, 7	; 7
     216:	01 c0       	rjmp	.+2      	; 0x21a <setResetPin+0xa>
			}

			break;
	}
}
     218:	3f 98       	cbi	0x07, 7	; 7
     21a:	47 98       	cbi	0x08, 7	; 8
     21c:	08 95       	ret

0000021e <setErasePin>:
     21e:	88 23       	and	r24, r24
     220:	11 f0       	breq	.+4      	; 0x226 <setErasePin+0x8>
     222:	46 98       	cbi	0x08, 6	; 8
     224:	08 95       	ret
     226:	46 9a       	sbi	0x08, 6	; 8
     228:	08 95       	ret

0000022a <SetupHardware>:
     22a:	84 b7       	in	r24, 0x34	; 52
     22c:	87 7f       	andi	r24, 0xF7	; 247
     22e:	84 bf       	out	0x34, r24	; 52
     230:	88 e1       	ldi	r24, 0x18	; 24
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	80 93 60 00 	sts	0x0060, r24
     23a:	10 92 60 00 	sts	0x0060, r1
     23e:	0f be       	out	0x3f, r0	; 63
     240:	80 e0       	ldi	r24, 0x00	; 0

	wdt_disable();



	setResetPin(false);
     242:	e6 df       	rcall	.-52     	; 0x210 <setResetPin>
     244:	46 9a       	sbi	0x08, 6	; 8



	/* Target /ERASE line is active HIGH: there is a mosfet that inverts logic */

	AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
     246:	3e 9a       	sbi	0x07, 6	; 7

	AVR_ERASE_LINE_DDR  |= AVR_ERASE_LINE_MASK;	
     248:	d2 df       	rcall	.-92     	; 0x1ee <Serial_Init.constprop.2>



	/* Hardware Initialization */

	Serial_Init(9600, false);
     24a:	8a b1       	in	r24, 0x0a	; 10
     24c:	80 63       	ori	r24, 0x30	; 48

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     24e:	8a b9       	out	0x0a, r24	; 10
     250:	8b b1       	in	r24, 0x0b	; 11
     252:	80 63       	ori	r24, 0x30	; 48
				PORTD |= LEDS_ALL_LEDS;
     254:	8b b9       	out	0x0b, r24	; 11
     256:	77 d3       	rcall	.+1774   	; 0x946 <USB_Init>
     258:	84 e0       	ldi	r24, 0x04	; 4

	LEDs_Init();

	USB_Init();
     25a:	85 bd       	out	0x25, r24	; 37
     25c:	08 95       	ret

0000025e <main>:



	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */

	TCCR0B = (1 << CS02);
     25e:	e5 df       	rcall	.-54     	; 0x22a <SetupHardware>
     260:	2f b7       	in	r18, 0x3f	; 63
     262:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     264:	8a ea       	ldi	r24, 0xAA	; 170
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->In  = Buffer->Buffer;
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	90 93 2b 02 	sts	0x022B, r25
     26c:	80 93 2a 02 	sts	0x022A, r24
     270:	90 93 2d 02 	sts	0x022D, r25
				Buffer->Out = Buffer->Buffer;
     274:	80 93 2c 02 	sts	0x022C, r24
     278:	2f bf       	out	0x3f, r18	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27a:	2f b7       	in	r18, 0x3f	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     27c:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     27e:	85 e2       	ldi	r24, 0x25	; 37
			{
				Buffer->In  = Buffer->Buffer;
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	90 93 a6 01 	sts	0x01A6, r25
     286:	80 93 a5 01 	sts	0x01A5, r24
     28a:	90 93 a8 01 	sts	0x01A8, r25
				Buffer->Out = Buffer->Buffer;
     28e:	80 93 a7 01 	sts	0x01A7, r24
     292:	2f bf       	out	0x3f, r18	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     294:	78 94       	sei

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);



	sei();
     296:	26 98       	cbi	0x04, 6	; 4

	

	DDRB &= ~_BV(TX_IN);
     298:	2e 9a       	sbi	0x05, 6	; 5

	cmdwrite(TX_IN, HIGH);
     29a:	27 98       	cbi	0x04, 7	; 4

	DDRB &= ~_BV(ERASE_CMD);
     29c:	2f 9a       	sbi	0x05, 7	; 5

	cmdwrite(ERASE_CMD, HIGH);
     29e:	24 9a       	sbi	0x04, 4	; 4

	DDRB |= _BV(UPLOAD_PER);
     2a0:	2c 98       	cbi	0x05, 4	; 5

	cmdwrite(UPLOAD_PER, LOW);
     2a2:	25 98       	cbi	0x04, 5	; 4

	DDRB &= ~_BV(UPLOAD_REQ);
     2a4:	2d 9a       	sbi	0x05, 5	; 5

	cmdwrite(UPLOAD_REQ, HIGH);
     2a6:	d3 e0       	ldi	r29, 0x03	; 3

			if (USARTtoUSB_Buffer.Count) {

				LEDs_TurnOnLEDs(LEDMASK_TX);

				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     2a8:	1d 99       	sbic	0x03, 5	; 3

	{



		if(!cmdread(UPLOAD_REQ))
     2aa:	3b c0       	rjmp	.+118    	; 0x322 <__stack+0x23>
     2ac:	f8 94       	cli

		{

			cli();
     2ae:	10 92 c9 00 	sts	0x00C9, r1
			}

			/** Turns off the USART driver, disabling and returning used hardware to their default configuration. */
			static inline void Serial_ShutDown(void)
			{
				UCSR1B = 0;
     2b2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1A = 0;
     2b6:	10 92 ca 00 	sts	0x00CA, r1
				UCSR1C = 0;
     2ba:	10 92 cd 00 	sts	0x00CD, r1

				UBRR1  = 0;
     2be:	10 92 cc 00 	sts	0x00CC, r1
     2c2:	53 98       	cbi	0x0a, 3	; 10
				
				DDRD  &= ~(1 << 3);
     2c4:	5a 98       	cbi	0x0b, 2	; 11
				PORTD &= ~(1 << 2);
     2c6:	53 9a       	sbi	0x0a, 3	; 10

			Serial_ShutDown();

			DDRD |= _BV(3); //set PB3 to output
     2c8:	1d 9b       	sbis	0x03, 5	; 3

			txwrite(5, cmdread(UPLOAD_REQ));
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <main+0x74>
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	80 62       	ori	r24, 0x20	; 32
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <main+0x78>
     2d2:	8b b1       	in	r24, 0x0b	; 11
     2d4:	8f 7d       	andi	r24, 0xDF	; 223
     2d6:	8b b9       	out	0x0b, r24	; 11
     2d8:	2c 9a       	sbi	0x05, 4	; 5

			cmdwrite(UPLOAD_PER, HIGH);
     2da:	1d 99       	sbic	0x03, 5	; 3

			while(!cmdread(UPLOAD_REQ))
     2dc:	17 c0       	rjmp	.+46     	; 0x30c <__stack+0xd>
     2de:	83 b1       	in	r24, 0x03	; 3

			{

				setErasePin(!cmdread(ERASE_CMD));
     2e0:	80 95       	com	r24
     2e2:	88 1f       	adc	r24, r24
     2e4:	88 27       	eor	r24, r24
     2e6:	88 1f       	adc	r24, r24
     2e8:	9a df       	rcall	.-204    	; 0x21e <setErasePin>
     2ea:	1e 9b       	sbis	0x03, 6	; 3
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <main+0x96>

				txwrite(3, cmdread(TX_IN));
     2ee:	8b b1       	in	r24, 0x0b	; 11
     2f0:	88 60       	ori	r24, 0x08	; 8
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <main+0x9a>
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	1e 9b       	sbis	0x03, 6	; 3
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <__stack+0x5>

				txwrite(4, cmdread(TX_IN));
     2fe:	8b b1       	in	r24, 0x0b	; 11
     300:	80 61       	ori	r24, 0x10	; 16
     302:	02 c0       	rjmp	.+4      	; 0x308 <__stack+0x9>
     304:	8b b1       	in	r24, 0x0b	; 11
     306:	8f 7e       	andi	r24, 0xEF	; 239
     308:	8b b9       	out	0x0b, r24	; 11
     30a:	e7 cf       	rjmp	.-50     	; 0x2da <main+0x7c>
     30c:	2c 98       	cbi	0x05, 4	; 5
     30e:	1d 9b       	sbis	0x03, 5	; 3

			}

			cmdwrite(UPLOAD_PER, LOW);
     310:	03 c0       	rjmp	.+6      	; 0x318 <__stack+0x19>

			txwrite(5, cmdread(UPLOAD_REQ));
     312:	8b b1       	in	r24, 0x0b	; 11
     314:	80 62       	ori	r24, 0x20	; 32
     316:	02 c0       	rjmp	.+4      	; 0x31c <__stack+0x1d>
     318:	8b b1       	in	r24, 0x0b	; 11
     31a:	8f 7d       	andi	r24, 0xDF	; 223
     31c:	8b b9       	out	0x0b, r24	; 11
     31e:	67 df       	rcall	.-306    	; 0x1ee <Serial_Init.constprop.2>
     320:	78 94       	sei

			Serial_Init(9600, false);
     322:	9f b7       	in	r25, 0x3f	; 63
     324:	f8 94       	cli

			sei();
     326:	80 91 2e 02 	lds	r24, 0x022E
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32a:	9f bf       	out	0x3f, r25	; 63
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Count = Buffer->Count;
     32c:	80 38       	cpi	r24, 0x80	; 128
     32e:	49 f0       	breq	.+18     	; 0x342 <__stack+0x43>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     330:	82 e0       	ldi	r24, 0x02	; 2

		}

		// Only try to read in bytes from the CDC interface if the transmit buffer is not full

		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	52 d6       	rcall	.+3236   	; 0xfda <CDC_Device_ReceiveByte>

		{

			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     336:	97 fd       	sbrc	r25, 7
     338:	04 c0       	rjmp	.+8      	; 0x342 <__stack+0x43>
     33a:	68 2f       	mov	r22, r24
     33c:	8a ea       	ldi	r24, 0xAA	; 170



			// Read bytes from the USB OUT endpoint into the USART transmit buffer

			if (!(ReceivedByte < 0))
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	1b df       	rcall	.-458    	; 0x178 <RingBuffer_Insert>

			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     342:	8f b7       	in	r24, 0x3f	; 63
     344:	f8 94       	cli
     346:	c0 91 a9 01 	lds	r28, 0x01A9
     34a:	8f bf       	out	0x3f, r24	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     34c:	a8 99       	sbic	0x15, 0	; 21
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34e:	03 c0       	rjmp	.+6      	; 0x356 <__stack+0x57>
			{
				Count = Buffer->Count;
     350:	c1 36       	cpi	r28, 0x61	; 97
     352:	08 f4       	brcc	.+2      	; 0x356 <__stack+0x57>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     354:	52 c0       	rjmp	.+164    	; 0x3fa <__stack+0xfb>

		// Check if the UART receive buffer flush timer has expired or the buffer is nearly full

		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
     356:	a8 9a       	sbi	0x15, 0	; 21
     358:	80 91 a9 01 	lds	r24, 0x01A9
     35c:	88 23       	and	r24, r24
     35e:	19 f0       	breq	.+6      	; 0x366 <__stack+0x67>

		{

			TIFR0 |= (1 << TOV0);
     360:	5d 98       	cbi	0x0b, 5	; 11



			if (USARTtoUSB_Buffer.Count) {
     362:	d0 93 22 01 	sts	0x0122, r29
     366:	cc 23       	and	r28, r28
     368:	49 f0       	breq	.+18     	; 0x37c <__stack+0x7d>
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     36a:	85 e2       	ldi	r24, 0x25	; 37

				LEDs_TurnOnLEDs(LEDMASK_TX);

				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	22 df       	rcall	.-444    	; 0x1b4 <RingBuffer_Remove>



			// Read bytes from the USART receive buffer into the USB IN endpoint

			while (BufferCount--)
     370:	68 2f       	mov	r22, r24
     372:	82 e0       	ldi	r24, 0x02	; 2

			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	d6 d5       	rcall	.+2988   	; 0xf24 <CDC_Device_SendByte>
     378:	c1 50       	subi	r28, 0x01	; 1
     37a:	f5 cf       	rjmp	.-22     	; 0x366 <__stack+0x67>
     37c:	80 91 22 01 	lds	r24, 0x0122
     380:	88 23       	and	r24, r24
     382:	41 f0       	breq	.+16     	; 0x394 <__stack+0x95>
     384:	80 91 22 01 	lds	r24, 0x0122
     388:	81 50       	subi	r24, 0x01	; 1

			  

			// Turn off TX LED(s) once the TX pulse period has elapsed

			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     38a:	80 93 22 01 	sts	0x0122, r24
     38e:	81 11       	cpse	r24, r1
     390:	01 c0       	rjmp	.+2      	; 0x394 <__stack+0x95>
     392:	5d 9a       	sbi	0x0b, 5	; 11
     394:	80 91 23 01 	lds	r24, 0x0123
     398:	88 23       	and	r24, r24
     39a:	41 f0       	breq	.+16     	; 0x3ac <__stack+0xad>
     39c:	80 91 23 01 	lds	r24, 0x0123
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
     3a0:	81 50       	subi	r24, 0x01	; 1



			// Turn off RX LED(s) once the RX pulse period has elapsed

			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     3a2:	80 93 23 01 	sts	0x0123, r24
     3a6:	81 11       	cpse	r24, r1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <__stack+0xad>
     3aa:	5c 9a       	sbi	0x0b, 4	; 11
     3ac:	80 91 1d 01 	lds	r24, 0x011D
     3b0:	90 91 1e 01 	lds	r25, 0x011E
     3b4:	18 16       	cp	r1, r24
     3b6:	19 06       	cpc	r1, r25
     3b8:	e4 f4       	brge	.+56     	; 0x3f2 <__stack+0xf3>

			  LEDs_TurnOffLEDs(LEDMASK_RX);



			if (ResetTimer > 0)
     3ba:	cc 97       	sbiw	r24, 0x3c	; 60
     3bc:	cd 97       	sbiw	r24, 0x3d	; 61
     3be:	10 f4       	brcc	.+4      	; 0x3c4 <__stack+0xc5>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <__stack+0xc7>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	2b df       	rcall	.-426    	; 0x21e <setErasePin>

				// --------------------------

				// Between 60 and 120: do erase

				if (ResetTimer >= 60 && ResetTimer <= 120) {
     3c8:	80 91 1d 01 	lds	r24, 0x011D
     3cc:	90 91 1e 01 	lds	r25, 0x011E

					setErasePin(true);
     3d0:	01 97       	sbiw	r24, 0x01	; 1

				} else {

					setErasePin(false);
     3d2:	c2 97       	sbiw	r24, 0x32	; 50
     3d4:	10 f4       	brcc	.+4      	; 0x3da <__stack+0xdb>
     3d6:	81 e0       	ldi	r24, 0x01	; 1



				// Between 1 and 50: do reset

				if (ResetTimer >= 1 && ResetTimer <= 50) {
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <__stack+0xdd>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	19 df       	rcall	.-462    	; 0x210 <setResetPin>
     3de:	80 91 1d 01 	lds	r24, 0x011D
     3e2:	90 91 1e 01 	lds	r25, 0x011E

					setResetPin(true);
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	90 93 1e 01 	sts	0x011E, r25

				} else {

					setResetPin(false);
     3ec:	80 93 1d 01 	sts	0x011D, r24

				}

				ResetTimer--;
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <__stack+0xfb>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	14 df       	rcall	.-472    	; 0x21e <setErasePin>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0b df       	rcall	.-490    	; 0x210 <setResetPin>
     3fa:	9f b7       	in	r25, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	80 91 2e 02 	lds	r24, 0x022E
     402:	9f bf       	out	0x3f, r25	; 63

			} else {

				setErasePin(false);
     404:	88 23       	and	r24, r24
     406:	61 f0       	breq	.+24     	; 0x420 <__stack+0x121>
     408:	8a ea       	ldi	r24, 0xAA	; 170

				setResetPin(false);
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	d3 de       	rcall	.-602    	; 0x1b4 <RingBuffer_Remove>
     40e:	90 91 c8 00 	lds	r25, 0x00C8
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     412:	95 ff       	sbrs	r25, 5
     414:	fc cf       	rjmp	.-8      	; 0x40e <__stack+0x10f>
     416:	80 93 ce 00 	sts	0x00CE, r24

		

		// Load the next byte from the USART transmit buffer into the USART

		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
     41a:	5c 98       	cbi	0x0b, 4	; 11
     41c:	d0 93 23 01 	sts	0x0123, r29

			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	cc d5       	rcall	.+2968   	; 0xfbe <CDC_Device_USBTask>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     426:	b6 d4       	rcall	.+2412   	; 0xd94 <USB_USBTask>
     428:	3f cf       	rjmp	.-386    	; 0x2a8 <main+0x4a>

0000042a <EVENT_USB_Device_ConfigurationChanged>:
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	91 e0       	ldi	r25, 0x01	; 1
				UDR1 = DataByte;
     42e:	2d c5       	rjmp	.+2650   	; 0xe8a <CDC_Device_ConfigureEndpoints>

00000430 <EVENT_USB_Device_UnhandledControlRequest>:
     430:	82 e0       	ldi	r24, 0x02	; 2
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     432:	91 e0       	ldi	r25, 0x01	; 1

			LEDs_TurnOnLEDs(LEDMASK_RX);

			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     434:	c1 c4       	rjmp	.+2434   	; 0xdb8 <CDC_Device_ProcessControlRequest>

00000436 <EVENT_CDC_Device_LineEncodingChanged>:
     436:	cf 92       	push	r12

		}

		

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	cf 93       	push	r28

		USB_USBTask();
     440:	fc 01       	movw	r30, r24
     442:	84 89       	ldd	r24, Z+20	; 0x14

	}
     444:	81 30       	cpi	r24, 0x01	; 1

	uint8_t ConfigMask = 0;



	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     446:	31 f0       	breq	.+12     	; 0x454 <EVENT_CDC_Device_LineEncodingChanged+0x1e>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	11 f0       	breq	.+4      	; 0x450 <EVENT_CDC_Device_LineEncodingChanged+0x1a>

void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)

{

	uint8_t ConfigMask = 0;
     44c:	c0 e0       	ldi	r28, 0x00	; 0
     44e:	03 c0       	rjmp	.+6      	; 0x456 <EVENT_CDC_Device_LineEncodingChanged+0x20>

			break;

		case CDC_PARITY_Even:

			ConfigMask = (1 << UPM11);		
     450:	c0 e2       	ldi	r28, 0x20	; 32

			break;
     452:	01 c0       	rjmp	.+2      	; 0x456 <EVENT_CDC_Device_LineEncodingChanged+0x20>

	{

		case CDC_PARITY_Odd:

			ConfigMask = ((1 << UPM11) | (1 << UPM10));		
     454:	c0 e3       	ldi	r28, 0x30	; 48

	}



	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     456:	83 89       	ldd	r24, Z+19	; 0x13
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	09 f4       	brne	.+2      	; 0x45e <EVENT_CDC_Device_LineEncodingChanged+0x28>

	  ConfigMask |= (1 << USBS1);
     45c:	c8 60       	ori	r28, 0x08	; 8



	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     45e:	85 89       	ldd	r24, Z+21	; 0x15
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	31 f0       	breq	.+12     	; 0x470 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	31 f0       	breq	.+12     	; 0x474 <EVENT_CDC_Device_LineEncodingChanged+0x3e>
     468:	86 30       	cpi	r24, 0x06	; 6
     46a:	29 f4       	brne	.+10     	; 0x476 <EVENT_CDC_Device_LineEncodingChanged+0x40>

	{

		case 6:

			ConfigMask |= (1 << UCSZ10);
     46c:	c2 60       	ori	r28, 0x02	; 2

			break;
     46e:	03 c0       	rjmp	.+6      	; 0x476 <EVENT_CDC_Device_LineEncodingChanged+0x40>

		case 7:

			ConfigMask |= (1 << UCSZ11);
     470:	c4 60       	ori	r28, 0x04	; 4

			break;
     472:	01 c0       	rjmp	.+2      	; 0x476 <EVENT_CDC_Device_LineEncodingChanged+0x40>

		case 8:

			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     474:	c6 60       	ori	r28, 0x06	; 6



	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */

	UCSR1B = 0;
     476:	10 92 c9 00 	sts	0x00C9, r1

	UCSR1A = 0;
     47a:	10 92 c8 00 	sts	0x00C8, r1

	UCSR1C = 0;
     47e:	10 92 ca 00 	sts	0x00CA, r1



	long bps = CDCInterfaceInfo->State.LineEncoding.BaudRateBPS;
     482:	c7 84       	ldd	r12, Z+15	; 0x0f
     484:	d0 88       	ldd	r13, Z+16	; 0x10
     486:	e1 88       	ldd	r14, Z+17	; 0x11
     488:	f2 88       	ldd	r15, Z+18	; 0x12

	Selected1200BPS = (bps == 1200);
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 eb       	ldi	r25, 0xB0	; 176
     48e:	c9 16       	cp	r12, r25
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	d9 06       	cpc	r13, r25
     494:	e1 04       	cpc	r14, r1
     496:	f1 04       	cpc	r15, r1
     498:	09 f0       	breq	.+2      	; 0x49c <EVENT_CDC_Device_LineEncodingChanged+0x66>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	80 93 18 01 	sts	0x0118, r24



	UBRR1  = SERIAL_2X_UBBRVAL(bps);
     4a0:	c7 01       	movw	r24, r14
     4a2:	b6 01       	movw	r22, r12
     4a4:	22 e0       	ldi	r18, 0x02	; 2
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	e3 d5       	rcall	.+3014   	; 0x1074 <__divmodsi4>
     4ae:	20 58       	subi	r18, 0x80	; 128
     4b0:	3b 47       	sbci	r19, 0x7B	; 123
     4b2:	41 4e       	sbci	r20, 0xE1	; 225
     4b4:	5f 4f       	sbci	r21, 0xFF	; 255
     4b6:	ca 01       	movw	r24, r20
     4b8:	b9 01       	movw	r22, r18
     4ba:	a7 01       	movw	r20, r14
     4bc:	96 01       	movw	r18, r12
     4be:	b8 d5       	rcall	.+2928   	; 0x1030 <__udivmodsi4>
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	31 09       	sbc	r19, r1
     4c4:	30 93 cd 00 	sts	0x00CD, r19
     4c8:	20 93 cc 00 	sts	0x00CC, r18
     4cc:	c0 93 ca 00 	sts	0x00CA, r28

	UCSR1C = ConfigMask;
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1A = (1 << U2X1);
     4d6:	88 e9       	ldi	r24, 0x98	; 152
     4d8:	80 93 c9 00 	sts	0x00C9, r24

	UCSR1B = (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
     4dc:	cf 91       	pop	r28
     4de:	ff 90       	pop	r15

}
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	08 95       	ret

000004e8 <__vector_23>:
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0

 */

ISR(USART1_RX_vect, ISR_BLOCK)

{
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31

	uint8_t ReceivedByte = UDR1;
     50a:	60 91 ce 00 	lds	r22, 0x00CE



	if (USB_DeviceState == DEVICE_STATE_Configured)
     50e:	8e b3       	in	r24, 0x1e	; 30
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	19 f4       	brne	.+6      	; 0x51a <__vector_23+0x32>

	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	2f de       	rcall	.-930    	; 0x178 <RingBuffer_Insert>
     51a:	ff 91       	pop	r31

}
     51c:	ef 91       	pop	r30
     51e:	bf 91       	pop	r27
     520:	af 91       	pop	r26
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	7f 91       	pop	r23
     528:	6f 91       	pop	r22
     52a:	5f 91       	pop	r21
     52c:	4f 91       	pop	r20
     52e:	3f 91       	pop	r19
     530:	2f 91       	pop	r18
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <EVENT_CDC_Device_ControLineStateChanged>:
     53c:	20 91 1c 01 	lds	r18, 0x011C

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)

{

	PreviousDTRState = CurrentDTRState;
     540:	20 93 1b 01 	sts	0x011B, r18

	PreviousRTSState = CurrentRTSState;
     544:	30 91 1a 01 	lds	r19, 0x011A
     548:	30 93 19 01 	sts	0x0119, r19

	CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     54c:	fc 01       	movw	r30, r24
     54e:	95 85       	ldd	r25, Z+13	; 0x0d
     550:	89 2f       	mov	r24, r25
     552:	81 70       	andi	r24, 0x01	; 1
     554:	80 93 1c 01 	sts	0x011C, r24

	CurrentRTSState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_RTS);
     558:	96 95       	lsr	r25
     55a:	91 70       	andi	r25, 0x01	; 1
     55c:	90 93 1a 01 	sts	0x011A, r25



	if (Selected1200BPS) {
     560:	90 91 18 01 	lds	r25, 0x0118
     564:	99 23       	and	r25, r25
     566:	19 f0       	breq	.+6      	; 0x56e <EVENT_CDC_Device_ControLineStateChanged+0x32>

		/* Start Erase / Reset procedure when receiving the magic "1200" baudrate */

		ResetTimer = 120;
     568:	88 e7       	ldi	r24, 0x78	; 120
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	06 c0       	rjmp	.+12     	; 0x57a <EVENT_CDC_Device_ControLineStateChanged+0x3e>

	} else if (!PreviousDTRState && CurrentDTRState) {
     56e:	21 11       	cpse	r18, r1
     570:	08 c0       	rjmp	.+16     	; 0x582 <EVENT_CDC_Device_ControLineStateChanged+0x46>
     572:	88 23       	and	r24, r24
     574:	31 f0       	breq	.+12     	; 0x582 <EVENT_CDC_Device_ControLineStateChanged+0x46>

		/* Reset on rising edge of DTR */

		ResetTimer = 50;
     576:	82 e3       	ldi	r24, 0x32	; 50
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	90 93 1e 01 	sts	0x011E, r25
     57e:	80 93 1d 01 	sts	0x011D, r24
     582:	08 95       	ret

00000584 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     584:	29 2f       	mov	r18, r25
     586:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     588:	22 30       	cpi	r18, 0x02	; 2
     58a:	31 05       	cpc	r19, r1
     58c:	59 f0       	breq	.+22     	; 0x5a4 <CALLBACK_USB_GetDescriptor+0x20>
     58e:	23 30       	cpi	r18, 0x03	; 3
     590:	31 05       	cpc	r19, r1
     592:	69 f0       	breq	.+26     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x2a>
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	f9 f4       	brne	.+62     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     59a:	82 e1       	ldi	r24, 0x12	; 18
     59c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     59e:	2e e2       	ldi	r18, 0x2E	; 46
     5a0:	31 e0       	ldi	r19, 0x01	; 1
     5a2:	1e c0       	rjmp	.+60     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     5a4:	8e e3       	ldi	r24, 0x3E	; 62
     5a6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     5a8:	20 ef       	ldi	r18, 0xF0	; 240
     5aa:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
     5ae:	99 27       	eor	r25, r25
		case DTYPE_String: 
			switch (DescriptorNumber)
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	91 05       	cpc	r25, r1
     5b4:	41 f0       	breq	.+16     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x42>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	41 f0       	breq	.+16     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x48>
     5bc:	89 2b       	or	r24, r25
     5be:	61 f4       	brne	.+24     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5c0:	ec ee       	ldi	r30, 0xEC	; 236
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     5c6:	e8 eb       	ldi	r30, 0xB8	; 184
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     5cc:	e8 e8       	ldi	r30, 0x88	; 136
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	84 91       	lpm	r24, Z
     5d2:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     5d4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
     5e0:	fa 01       	movw	r30, r20
     5e2:	31 83       	std	Z+1, r19	; 0x01
     5e4:	20 83       	st	Z, r18
	return Size;
}
     5e6:	08 95       	ret

000005e8 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     5ec:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     5ee:	28 17       	cp	r18, r24
     5f0:	39 07       	cpc	r19, r25
     5f2:	20 f4       	brcc	.+8      	; 0x5fc <Endpoint_BytesToEPSizeMaskDynamic+0x14>
				{
					MaskVal++;
     5f4:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	f9 cf       	rjmp	.-14     	; 0x5ee <Endpoint_BytesToEPSizeMaskDynamic+0x6>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
     5fc:	84 2f       	mov	r24, r20
     5fe:	82 95       	swap	r24
     600:	80 7f       	andi	r24, 0xF0	; 240
     602:	08 95       	ret

00000604 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     604:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     608:	eb ee       	ldi	r30, 0xEB	; 235
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     612:	ed ee       	ldi	r30, 0xED	; 237
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
     618:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     61c:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     61e:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     622:	88 1f       	adc	r24, r24
     624:	88 27       	eor	r24, r24
     626:	88 1f       	adc	r24, r24
     628:	08 95       	ret

0000062a <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     62a:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     62e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     630:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     634:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     638:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     63c:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     640:	90 91 eb 00 	lds	r25, 0x00EB
     644:	9e 7f       	andi	r25, 0xFE	; 254
     646:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	85 30       	cpi	r24, 0x05	; 5
     64e:	81 f7       	brne	.-32     	; 0x630 <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     650:	08 95       	ret

00000652 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     652:	80 91 33 02 	lds	r24, 0x0233
     656:	87 fd       	sbrc	r24, 7
     658:	05 c0       	rjmp	.+10     	; 0x664 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     65a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     65e:	80 ff       	sbrs	r24, 0
     660:	0d c0       	rjmp	.+26     	; 0x67c <Endpoint_ClearStatusStage+0x2a>
     662:	10 c0       	rjmp	.+32     	; 0x684 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     664:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     668:	82 fd       	sbrc	r24, 2
     66a:	04 c0       	rjmp	.+8      	; 0x674 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     66c:	8e b3       	in	r24, 0x1e	; 30
     66e:	81 11       	cpse	r24, r1
     670:	f9 cf       	rjmp	.-14     	; 0x664 <Endpoint_ClearStatusStage+0x12>
     672:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     674:	80 91 e8 00 	lds	r24, 0x00E8
     678:	8b 77       	andi	r24, 0x7B	; 123
     67a:	07 c0       	rjmp	.+14     	; 0x68a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     67c:	8e b3       	in	r24, 0x1e	; 30
     67e:	81 11       	cpse	r24, r1
     680:	ec cf       	rjmp	.-40     	; 0x65a <Endpoint_ClearStatusStage+0x8>
     682:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     684:	80 91 e8 00 	lds	r24, 0x00E8
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24
     68e:	08 95       	ret

00000690 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     690:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     692:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     696:	90 ff       	sbrs	r25, 0
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     69a:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
     69e:	90 ff       	sbrs	r25, 0
     6a0:	05 c0       	rjmp	.+10     	; 0x6ac <Endpoint_WaitUntilReady+0x1c>
     6a2:	1b c0       	rjmp	.+54     	; 0x6da <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6a4:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     6a8:	92 fd       	sbrc	r25, 2
     6aa:	17 c0       	rjmp	.+46     	; 0x6da <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     6ac:	9e b3       	in	r25, 0x1e	; 30
     6ae:	99 23       	and	r25, r25
     6b0:	b1 f0       	breq	.+44     	; 0x6de <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     6b2:	9e b3       	in	r25, 0x1e	; 30
     6b4:	95 30       	cpi	r25, 0x05	; 5
     6b6:	a9 f0       	breq	.+42     	; 0x6e2 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     6b8:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     6bc:	95 fd       	sbrc	r25, 5
     6be:	13 c0       	rjmp	.+38     	; 0x6e6 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
     6c0:	90 91 e1 00 	lds	r25, 0x00E1
     6c4:	92 ff       	sbrs	r25, 2
     6c6:	e5 cf       	rjmp	.-54     	; 0x692 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
     6c8:	90 91 e1 00 	lds	r25, 0x00E1
     6cc:	9b 7f       	andi	r25, 0xFB	; 251
     6ce:	90 93 e1 00 	sts	0x00E1, r25
     6d2:	81 50       	subi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
     6d4:	f1 f6       	brne	.-68     	; 0x692 <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
     6d8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	08 95       	ret
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	08 95       	ret

000006ea <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     6ea:	20 91 39 02 	lds	r18, 0x0239
     6ee:	30 91 3a 02 	lds	r19, 0x023A
     6f2:	26 17       	cp	r18, r22
     6f4:	37 07       	cpc	r19, r23
     6f6:	48 f0       	brcs	.+18     	; 0x70a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6f8:	61 15       	cp	r22, r1
     6fa:	71 05       	cpc	r23, r1
     6fc:	39 f4       	brne	.+14     	; 0x70c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fe:	20 91 e8 00 	lds	r18, 0x00E8
     702:	2e 77       	andi	r18, 0x7E	; 126
     704:	20 93 e8 00 	sts	0x00E8, r18
     708:	01 c0       	rjmp	.+2      	; 0x70c <Endpoint_Write_Control_Stream_LE+0x22>
     70a:	b9 01       	movw	r22, r18
     70c:	30 e0       	ldi	r19, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     70e:	61 15       	cp	r22, r1
     710:	71 05       	cpc	r23, r1
     712:	91 f1       	breq	.+100    	; 0x778 <Endpoint_Write_Control_Stream_LE+0x8e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     714:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
     718:	23 fd       	sbrc	r18, 3
     71a:	38 c0       	rjmp	.+112    	; 0x78c <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     71c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     720:	22 ff       	sbrs	r18, 2
     722:	06 c0       	rjmp	.+12     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x46>
     724:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     728:	82 ff       	sbrs	r24, 2
     72a:	29 c0       	rjmp	.+82     	; 0x77e <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     730:	2e b3       	in	r18, 0x1e	; 30
     732:	22 23       	and	r18, r18
     734:	69 f1       	breq	.+90     	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     736:	2e b3       	in	r18, 0x1e	; 30
     738:	25 30       	cpi	r18, 0x05	; 5
     73a:	61 f1       	breq	.+88     	; 0x794 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     73c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     740:	20 ff       	sbrs	r18, 0
     742:	e5 cf       	rjmp	.-54     	; 0x70e <Endpoint_Write_Control_Stream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     744:	20 91 f2 00 	lds	r18, 0x00F2
     748:	fc 01       	movw	r30, r24
     74a:	cf 01       	movw	r24, r30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     74c:	61 15       	cp	r22, r1
     74e:	71 05       	cpc	r23, r1
     750:	49 f0       	breq	.+18     	; 0x764 <Endpoint_Write_Control_Stream_LE+0x7a>
     752:	28 30       	cpi	r18, 0x08	; 8
     754:	38 f4       	brcc	.+14     	; 0x764 <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     756:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     758:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     75c:	61 50       	subi	r22, 0x01	; 1
     75e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	f3 cf       	rjmp	.-26     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     764:	31 e0       	ldi	r19, 0x01	; 1
     766:	28 30       	cpi	r18, 0x08	; 8
     768:	09 f0       	breq	.+2      	; 0x76c <Endpoint_Write_Control_Stream_LE+0x82>
     76a:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     76c:	20 91 e8 00 	lds	r18, 0x00E8
     770:	2e 77       	andi	r18, 0x7E	; 126
     772:	20 93 e8 00 	sts	0x00E8, r18
     776:	cb cf       	rjmp	.-106    	; 0x70e <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     778:	31 11       	cpse	r19, r1
     77a:	cc cf       	rjmp	.-104    	; 0x714 <Endpoint_Write_Control_Stream_LE+0x2a>
     77c:	d3 cf       	rjmp	.-90     	; 0x724 <Endpoint_Write_Control_Stream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     77e:	8e b3       	in	r24, 0x1e	; 30
     780:	88 23       	and	r24, r24
     782:	31 f0       	breq	.+12     	; 0x790 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     784:	8e b3       	in	r24, 0x1e	; 30
     786:	85 30       	cpi	r24, 0x05	; 5
     788:	69 f6       	brne	.-102    	; 0x724 <Endpoint_Write_Control_Stream_LE+0x3a>
     78a:	04 c0       	rjmp	.+8      	; 0x794 <Endpoint_Write_Control_Stream_LE+0xaa>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     794:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     796:	08 95       	ret

00000798 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     798:	20 91 39 02 	lds	r18, 0x0239
     79c:	30 91 3a 02 	lds	r19, 0x023A
     7a0:	26 17       	cp	r18, r22
     7a2:	37 07       	cpc	r19, r23
     7a4:	48 f0       	brcs	.+18     	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7a6:	61 15       	cp	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <Endpoint_Write_Control_PStream_LE+0x22>
     7ac:	20 91 e8 00 	lds	r18, 0x00E8
     7b0:	2e 77       	andi	r18, 0x7E	; 126
     7b2:	20 93 e8 00 	sts	0x00E8, r18
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <Endpoint_Write_Control_PStream_LE+0x22>
     7b8:	b9 01       	movw	r22, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     7ba:	30 e0       	ldi	r19, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7bc:	61 15       	cp	r22, r1
     7be:	71 05       	cpc	r23, r1
     7c0:	99 f1       	breq	.+102    	; 0x828 <Endpoint_Write_Control_PStream_LE+0x90>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7c2:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
     7c6:	23 fd       	sbrc	r18, 3
     7c8:	39 c0       	rjmp	.+114    	; 0x83c <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7ca:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     7ce:	22 ff       	sbrs	r18, 2
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <Endpoint_Write_Control_PStream_LE+0x46>
     7d2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     7d6:	82 ff       	sbrs	r24, 2
     7d8:	2a c0       	rjmp	.+84     	; 0x82e <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     7de:	2e b3       	in	r18, 0x1e	; 30
     7e0:	22 23       	and	r18, r18
     7e2:	71 f1       	breq	.+92     	; 0x840 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     7e4:	2e b3       	in	r18, 0x1e	; 30
     7e6:	25 30       	cpi	r18, 0x05	; 5
     7e8:	69 f1       	breq	.+90     	; 0x844 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     7ea:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     7ee:	20 ff       	sbrs	r18, 0
     7f0:	e5 cf       	rjmp	.-54     	; 0x7bc <Endpoint_Write_Control_PStream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7f2:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     7f6:	fc 01       	movw	r30, r24
     7f8:	cf 01       	movw	r24, r30
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	51 f0       	breq	.+20     	; 0x814 <Endpoint_Write_Control_PStream_LE+0x7c>
     800:	28 30       	cpi	r18, 0x08	; 8
     802:	40 f4       	brcc	.+16     	; 0x814 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     804:	84 91       	lpm	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     806:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     80a:	61 50       	subi	r22, 0x01	; 1
     80c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	31 96       	adiw	r30, 0x01	; 1
     812:	f2 cf       	rjmp	.-28     	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     814:	31 e0       	ldi	r19, 0x01	; 1
     816:	28 30       	cpi	r18, 0x08	; 8
     818:	09 f0       	breq	.+2      	; 0x81c <Endpoint_Write_Control_PStream_LE+0x84>
     81a:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     81c:	20 91 e8 00 	lds	r18, 0x00E8
     820:	2e 77       	andi	r18, 0x7E	; 126
     822:	20 93 e8 00 	sts	0x00E8, r18
     826:	ca cf       	rjmp	.-108    	; 0x7bc <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     828:	31 11       	cpse	r19, r1
     82a:	cb cf       	rjmp	.-106    	; 0x7c2 <Endpoint_Write_Control_PStream_LE+0x2a>
     82c:	d2 cf       	rjmp	.-92     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     82e:	8e b3       	in	r24, 0x1e	; 30
     830:	88 23       	and	r24, r24
     832:	31 f0       	breq	.+12     	; 0x840 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     834:	8e b3       	in	r24, 0x1e	; 30
     836:	85 30       	cpi	r24, 0x05	; 5
     838:	61 f6       	brne	.-104    	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0x3a>
     83a:	04 c0       	rjmp	.+8      	; 0x844 <Endpoint_Write_Control_PStream_LE+0xac>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     844:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     846:	08 95       	ret

00000848 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
     848:	61 15       	cp	r22, r1
     84a:	71 05       	cpc	r23, r1
     84c:	29 f4       	brne	.+10     	; 0x858 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     84e:	20 91 e8 00 	lds	r18, 0x00E8
     852:	2b 77       	andi	r18, 0x7B	; 123
     854:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();
	
	while (Length)
     858:	61 15       	cp	r22, r1
     85a:	71 05       	cpc	r23, r1
     85c:	49 f1       	breq	.+82     	; 0x8b0 <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     85e:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
     862:	23 fd       	sbrc	r18, 3
     864:	2a c0       	rjmp	.+84     	; 0x8ba <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
     866:	2e b3       	in	r18, 0x1e	; 30
     868:	22 23       	and	r18, r18
     86a:	59 f1       	breq	.+86     	; 0x8c2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     86c:	2e b3       	in	r18, 0x1e	; 30
     86e:	25 30       	cpi	r18, 0x05	; 5
     870:	51 f1       	breq	.+84     	; 0x8c6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     872:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
     876:	22 ff       	sbrs	r18, 2
     878:	f2 cf       	rjmp	.-28     	; 0x85e <Endpoint_Read_Control_Stream_LE+0x16>
     87a:	fc 01       	movw	r30, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     87c:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
     880:	88 23       	and	r24, r24
     882:	71 f0       	breq	.+28     	; 0x8a0 <Endpoint_Read_Control_Stream_LE+0x58>
     884:	9f 01       	movw	r18, r30
     886:	2f 5f       	subi	r18, 0xFF	; 255
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	c9 01       	movw	r24, r18
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     88c:	40 91 f1 00 	lds	r20, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     890:	40 83       	st	Z, r20
				Length--;
     892:	61 50       	subi	r22, 0x01	; 1
     894:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     896:	61 15       	cp	r22, r1
     898:	71 05       	cpc	r23, r1
     89a:	c9 f2       	breq	.-78     	; 0x84e <Endpoint_Read_Control_Stream_LE+0x6>
     89c:	f9 01       	movw	r30, r18
     89e:	ee cf       	rjmp	.-36     	; 0x87c <Endpoint_Read_Control_Stream_LE+0x34>
     8a0:	cf 01       	movw	r24, r30
     8a2:	d5 cf       	rjmp	.-86     	; 0x84e <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     8a4:	8e b3       	in	r24, 0x1e	; 30
     8a6:	88 23       	and	r24, r24
     8a8:	61 f0       	breq	.+24     	; 0x8c2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     8aa:	8e b3       	in	r24, 0x1e	; 30
     8ac:	85 30       	cpi	r24, 0x05	; 5
     8ae:	59 f0       	breq	.+22     	; 0x8c6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     8b0:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	f6 cf       	rjmp	.-20     	; 0x8a4 <Endpoint_Read_Control_Stream_LE+0x5c>
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <Endpoint_Read_Control_Stream_LE+0x76>
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 95       	ret
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8c6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
     8c8:	08 95       	ret

000008ca <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     8ca:	42 d0       	rcall	.+132    	; 0x950 <USB_INT_DisableAllInterrupts>
     8cc:	44 d0       	rcall	.+136    	; 0x956 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8ce:	1e ba       	out	0x1e, r1	; 30
     8d0:	10 92 31 02 	sts	0x0231, r1
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
     8d4:	10 92 30 02 	sts	0x0230, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     8d8:	10 92 2f 02 	sts	0x022F, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	89 bd       	out	0x29, r24	; 41
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     8e0:	89 b5       	in	r24, 0x29	; 41
     8e2:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
     8e4:	89 bd       	out	0x29, r24	; 41
     8e6:	09 b4       	in	r0, 0x29	; 41
     8e8:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <USB_ResetInterface+0x1c>
     8ec:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     8f0:	98 2f       	mov	r25, r24
     8f2:	9f 77       	andi	r25, 0x7F	; 127
				
				USBCON = (Temp & ~(1 << USBE));
     8f4:	90 93 d8 00 	sts	0x00D8, r25
     8f8:	80 68       	ori	r24, 0x80	; 128
     8fa:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
     8fe:	80 91 63 00 	lds	r24, 0x0063
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	80 93 63 00 	sts	0x0063, r24
     908:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     90c:	8f 7d       	andi	r24, 0xDF	; 223
     90e:	80 93 d8 00 	sts	0x00D8, r24
     912:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     916:	8e 7f       	andi	r24, 0xFE	; 254
     918:	80 93 e0 00 	sts	0x00E0, r24
     91c:	80 91 e1 00 	lds	r24, 0x00E1
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 93 e1 00 	sts	0x00E1, r24
     926:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_SUSPEND);
     92a:	81 60       	ori	r24, 0x01	; 1
     92c:	80 93 e2 00 	sts	0x00E2, r24
     930:	80 91 e1 00 	lds	r24, 0x00E1
	USB_INT_Clear(USB_INT_EORSTI);
     934:	87 7f       	andi	r24, 0xF7	; 247
     936:	80 93 e1 00 	sts	0x00E1, r24
     93a:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_EORSTI);
     93e:	88 60       	ori	r24, 0x08	; 8
     940:	80 93 e2 00 	sts	0x00E2, r24
     944:	08 95       	ret

00000946 <USB_Init>:
     946:	c1 df       	rcall	.-126    	; 0x8ca <USB_ResetInterface>
     948:	81 e0       	ldi	r24, 0x01	; 1

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
     94a:	80 93 32 02 	sts	0x0232, r24
     94e:	08 95       	ret

00000950 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     950:	10 92 e2 00 	sts	0x00E2, r1
     954:	08 95       	ret

00000956 <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     956:	10 92 e1 00 	sts	0x00E1, r1
     95a:	08 95       	ret

0000095c <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     95c:	1f 92       	push	r1
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     97e:	80 91 e1 00 	lds	r24, 0x00E1
     982:	80 ff       	sbrs	r24, 0
     984:	1b c0       	rjmp	.+54     	; 0x9bc <__vector_11+0x60>
     986:	80 91 e2 00 	lds	r24, 0x00E2
     98a:	80 ff       	sbrs	r24, 0
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     98e:	80 91 e1 00 	lds	r24, 0x00E1
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     998:	80 91 e2 00 	lds	r24, 0x00E2
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     9a2:	80 91 e2 00 	lds	r24, 0x00E2
     9a6:	80 61       	ori	r24, 0x10	; 16
     9a8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     9ac:	80 91 d8 00 	lds	r24, 0x00D8
     9b0:	80 62       	ori	r24, 0x20	; 32
     9b2:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     9b6:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     9b8:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     9ba:	eb d1       	rcall	.+982    	; 0xd92 <USB_Event_Stub>
     9bc:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     9c0:	84 ff       	sbrs	r24, 4
     9c2:	29 c0       	rjmp	.+82     	; 0xa16 <__vector_11+0xba>
     9c4:	80 91 e2 00 	lds	r24, 0x00E2
     9c8:	84 ff       	sbrs	r24, 4
     9ca:	25 c0       	rjmp	.+74     	; 0xa16 <__vector_11+0xba>
     9cc:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     9ce:	89 bd       	out	0x29, r24	; 41
     9d0:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
     9d2:	82 60       	ori	r24, 0x02	; 2
     9d4:	89 bd       	out	0x29, r24	; 41
     9d6:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9d8:	00 fe       	sbrs	r0, 0
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <__vector_11+0x7a>
     9dc:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     9e0:	8f 7d       	andi	r24, 0xDF	; 223
     9e2:	80 93 d8 00 	sts	0x00D8, r24
     9e6:	80 91 e1 00 	lds	r24, 0x00E1
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
     9ea:	8f 7e       	andi	r24, 0xEF	; 239
     9ec:	80 93 e1 00 	sts	0x00E1, r24
     9f0:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_WAKEUP);
     9f4:	8f 7e       	andi	r24, 0xEF	; 239
     9f6:	80 93 e2 00 	sts	0x00E2, r24
     9fa:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_SUSPEND);
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 93 e2 00 	sts	0x00E2, r24
     a04:	80 91 31 02 	lds	r24, 0x0231
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a08:	88 23       	and	r24, r24
     a0a:	11 f0       	breq	.+4      	; 0xa10 <__vector_11+0xb4>
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__vector_11+0xb6>
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	8e bb       	out	0x1e, r24	; 30
     a14:	be d1       	rcall	.+892    	; 0xd92 <USB_Event_Stub>
		EVENT_USB_Device_Connect();
     a16:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a1a:	83 ff       	sbrs	r24, 3
     a1c:	27 c0       	rjmp	.+78     	; 0xa6c <__vector_11+0x110>
     a1e:	80 91 e2 00 	lds	r24, 0x00E2
     a22:	83 ff       	sbrs	r24, 3
     a24:	23 c0       	rjmp	.+70     	; 0xa6c <__vector_11+0x110>
     a26:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	80 93 e1 00 	sts	0x00E1, r24
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	8e bb       	out	0x1e, r24	; 30

		USB_DeviceState         = DEVICE_STATE_Default;
     a34:	10 92 31 02 	sts	0x0231, r1
		USB_ConfigurationNumber = 0;
     a38:	80 91 e1 00 	lds	r24, 0x00E1

		USB_INT_Clear(USB_INT_SUSPEND);
     a3c:	8e 7f       	andi	r24, 0xFE	; 254
     a3e:	80 93 e1 00 	sts	0x00E1, r24
     a42:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Disable(USB_INT_SUSPEND);
     a46:	8e 7f       	andi	r24, 0xFE	; 254
     a48:	80 93 e2 00 	sts	0x00E2, r24
     a4c:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUP);
     a50:	80 61       	ori	r24, 0x10	; 16
     a52:	80 93 e2 00 	sts	0x00E2, r24
     a56:	e9 dd       	rcall	.-1070   	; 0x62a <Endpoint_ClearEndpoints>
     a58:	42 e0       	ldi	r20, 0x02	; 2

		Endpoint_ClearEndpoints();
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     a5e:	d2 dd       	rcall	.-1116   	; 0x604 <Endpoint_ConfigureEndpoint_Prv>
     a60:	80 91 f0 00 	lds	r24, 0x00F0
     a64:	88 60       	ori	r24, 0x08	; 8
     a66:	80 93 f0 00 	sts	0x00F0, r24
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
     a6a:	93 d1       	rcall	.+806    	; 0xd92 <USB_Event_Stub>
     a6c:	80 91 e1 00 	lds	r24, 0x00E1
     a70:	82 ff       	sbrs	r24, 2
		#endif

		EVENT_USB_Device_Reset();
     a72:	0a c0       	rjmp	.+20     	; 0xa88 <__vector_11+0x12c>
     a74:	80 91 e2 00 	lds	r24, 0x00E2
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a78:	82 ff       	sbrs	r24, 2
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__vector_11+0x12c>
     a7c:	80 91 e1 00 	lds	r24, 0x00E1
     a80:	8b 7f       	andi	r24, 0xFB	; 251
     a82:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);
     a86:	85 d1       	rcall	.+778    	; 0xd92 <USB_Event_Stub>
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
		
		EVENT_USB_Device_StartOfFrame();
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <__vector_12>:
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	cf 93       	push	r28
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     ace:	e9 ee       	ldi	r30, 0xE9	; 233
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	c0 81       	ld	r28, Z
     ad4:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ad6:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     ad8:	e0 ef       	ldi	r30, 0xF0	; 240
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	87 7f       	andi	r24, 0xF7	; 247
     ae0:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     ae2:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     ae4:	1c d0       	rcall	.+56     	; 0xb1e <USB_Device_ProcessControlRequest>
     ae6:	f8 94       	cli
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     ae8:	e9 ee       	ldi	r30, 0xE9	; 233
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	10 82       	st	Z, r1
     aee:	a0 ef       	ldi	r26, 0xF0	; 240
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	8c 91       	ld	r24, X
     af4:	88 60       	ori	r24, 0x08	; 8
     af6:	8c 93       	st	X, r24
     af8:	c0 83       	st	Z, r28
     afa:	ff 91       	pop	r31
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     afc:	ef 91       	pop	r30
     afe:	cf 91       	pop	r28
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	aa 97       	sbiw	r28, 0x2a	; 42
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	e3 e3       	ldi	r30, 0x33	; 51
     b36:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     b38:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     b3c:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b3e:	22 e0       	ldi	r18, 0x02	; 2
     b40:	eb 33       	cpi	r30, 0x3B	; 59
     b42:	f2 07       	cpc	r31, r18
     b44:	c9 f7       	brne	.-14     	; 0xb38 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b46:	20 91 33 02 	lds	r18, 0x0233
	
	switch (USB_ControlRequest.bRequest)
     b4a:	30 91 34 02 	lds	r19, 0x0234
     b4e:	83 2f       	mov	r24, r19
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8a 30       	cpi	r24, 0x0A	; 10
     b54:	91 05       	cpc	r25, r1
     b56:	08 f0       	brcs	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x3c>
     b58:	10 c1       	rjmp	.+544    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     b5a:	fc 01       	movw	r30, r24
     b5c:	e6 5c       	subi	r30, 0xC6	; 198
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	a5 c2       	rjmp	.+1354   	; 0x10ac <__tablejump2__>
     b62:	20 38       	cpi	r18, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b64:	81 f0       	breq	.+32     	; 0xb86 <USB_Device_ProcessControlRequest+0x68>
     b66:	22 38       	cpi	r18, 0x82	; 130
     b68:	09 f0       	breq	.+2      	; 0xb6c <USB_Device_ProcessControlRequest+0x4e>
     b6a:	07 c1       	rjmp	.+526    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     b6c:	80 91 37 02 	lds	r24, 0x0237
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b76:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b7a:	85 fb       	bst	r24, 5
     b7c:	88 27       	eor	r24, r24
     b7e:	80 f9       	bld	r24, 0
     b80:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <USB_Device_ProcessControlRequest+0x74>
     b86:	80 91 2f 02 	lds	r24, 0x022F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b8a:	90 91 30 02 	lds	r25, 0x0230
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
     b8e:	91 11       	cpse	r25, r1
     b90:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b92:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b96:	97 7f       	andi	r25, 0xF7	; 247
     b98:	90 93 e8 00 	sts	0x00E8, r25
     b9c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     ba0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
     ba4:	bd c0       	rjmp	.+378    	; 0xd20 <USB_Device_ProcessControlRequest+0x202>
     ba6:	82 2f       	mov	r24, r18
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ba8:	8d 7f       	andi	r24, 0xFD	; 253
     baa:	09 f0       	breq	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x90>
     bac:	e6 c0       	rjmp	.+460    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     bae:	22 23       	and	r18, r18
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <USB_Device_ProcessControlRequest+0x9a>
     bb2:	22 30       	cpi	r18, 0x02	; 2
     bb4:	61 f0       	breq	.+24     	; 0xbce <USB_Device_ProcessControlRequest+0xb0>
     bb6:	d2 c0       	rjmp	.+420    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     bb8:	80 91 35 02 	lds	r24, 0x0235
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <USB_Device_ProcessControlRequest+0xa4>
     bc0:	cd c0       	rjmp	.+410    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     bc2:	33 30       	cpi	r19, 0x03	; 3
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0xaa>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	80 93 30 02 	sts	0x0230, r24
     bcc:	28 c0       	rjmp	.+80     	; 0xc1e <USB_Device_ProcessControlRequest+0x100>
     bce:	80 91 35 02 	lds	r24, 0x0235
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     bd2:	81 11       	cpse	r24, r1
     bd4:	24 c0       	rjmp	.+72     	; 0xc1e <USB_Device_ProcessControlRequest+0x100>
     bd6:	20 91 37 02 	lds	r18, 0x0237
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bda:	27 70       	andi	r18, 0x07	; 7
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0xc2>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bde:	be c0       	rjmp	.+380    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     be0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     be4:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     be8:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
     bea:	b8 c0       	rjmp	.+368    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     bec:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bf0:	33 30       	cpi	r19, 0x03	; 3
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <USB_Device_ProcessControlRequest+0xda>
     bf4:	80 62       	ori	r24, 0x20	; 32
     bf6:	11 c0       	rjmp	.+34     	; 0xc1a <USB_Device_ProcessControlRequest+0xfc>
     bf8:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     bfa:	80 93 eb 00 	sts	0x00EB, r24
     bfe:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0xea>
     c06:	88 0f       	add	r24, r24
     c08:	0a 94       	dec	r0
     c0a:	ea f7       	brpl	.-6      	; 0xc06 <USB_Device_ProcessControlRequest+0xe8>
     c0c:	80 93 ea 00 	sts	0x00EA, r24
     c10:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     c14:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c18:	88 60       	ori	r24, 0x08	; 8
     c1a:	80 93 eb 00 	sts	0x00EB, r24
     c1e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c22:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c26:	87 7f       	andi	r24, 0xF7	; 247
     c28:	7e c0       	rjmp	.+252    	; 0xd26 <USB_Device_ProcessControlRequest+0x208>
     c2a:	21 11       	cpse	r18, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c2c:	a6 c0       	rjmp	.+332    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     c2e:	10 91 35 02 	lds	r17, 0x0235
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c32:	80 91 e8 00 	lds	r24, 0x00E8
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	80 93 e8 00 	sts	0x00E8, r24
     c3c:	0a dd       	rcall	.-1516   	; 0x652 <Endpoint_ClearStatusStage>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     c42:	80 fd       	sbrc	r24, 0
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <USB_Device_ProcessControlRequest+0x130>
	
	while (!(Endpoint_IsINReady()))
     c46:	8e b3       	in	r24, 0x1e	; 30
     c48:	81 11       	cpse	r24, r1
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     c4a:	f9 cf       	rjmp	.-14     	; 0xc3e <USB_Device_ProcessControlRequest+0x120>
     c4c:	87 c0       	rjmp	.+270    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     c4e:	81 2f       	mov	r24, r17
     c50:	8f 77       	andi	r24, 0x7F	; 127
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c52:	11 f0       	breq	.+4      	; 0xc58 <USB_Device_ProcessControlRequest+0x13a>
     c54:	93 e0       	ldi	r25, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <USB_Device_ProcessControlRequest+0x13c>
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	9e bb       	out	0x1e, r25	; 30
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	80 93 e3 00 	sts	0x00E3, r24
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
     c62:	7c c0       	rjmp	.+248    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     c64:	20 58       	subi	r18, 0x80	; 128
     c66:	22 30       	cpi	r18, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c68:	08 f0       	brcs	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0x14e>
     c6a:	87 c0       	rjmp	.+270    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     c6c:	80 91 35 02 	lds	r24, 0x0235
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c70:	90 91 36 02 	lds	r25, 0x0236
     c74:	8c 3d       	cpi	r24, 0xDC	; 220
     c76:	23 e0       	ldi	r18, 0x03	; 3
     c78:	92 07       	cpc	r25, r18
     c7a:	81 f5       	brne	.+96     	; 0xcdc <USB_Device_ProcessControlRequest+0x1be>
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c80:	8a e2       	ldi	r24, 0x2A	; 42
     c82:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     c84:	4f b7       	in	r20, 0x3f	; 63
     c86:	f8 94       	cli
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     c88:	de 01       	movw	r26, r28
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	3e e0       	ldi	r19, 0x0E	; 14
     c90:	51 e2       	ldi	r21, 0x21	; 33
     c92:	e3 2f       	mov	r30, r19
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	50 93 57 00 	sts	0x0057, r21
     c9a:	e4 91       	lpm	r30, Z
     c9c:	20 ff       	sbrs	r18, 0
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <USB_Device_ProcessControlRequest+0x188>
			
			if (SerialCharNum & 0x01)
     ca0:	e2 95       	swap	r30
     ca2:	ef 70       	andi	r30, 0x0F	; 15
			{
				SerialByte >>= 4;
     ca4:	3f 5f       	subi	r19, 0xFF	; 255
     ca6:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
     ca8:	90 e3       	ldi	r25, 0x30	; 48
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     caa:	9e 0f       	add	r25, r30
     cac:	9a 33       	cpi	r25, 0x3A	; 58
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <USB_Device_ProcessControlRequest+0x196>
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     cb0:	e9 5c       	subi	r30, 0xC9	; 201
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <USB_Device_ProcessControlRequest+0x198>
     cb4:	e9 2f       	mov	r30, r25
     cb6:	8e 2f       	mov	r24, r30
     cb8:	90 e0       	ldi	r25, 0x00	; 0
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     cba:	8d 93       	st	X+, r24
     cbc:	9d 93       	st	X+, r25
     cbe:	2f 5f       	subi	r18, 0xFF	; 255
     cc0:	24 31       	cpi	r18, 0x14	; 20
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     cc2:	39 f7       	brne	.-50     	; 0xc92 <USB_Device_ProcessControlRequest+0x174>
     cc4:	4f bf       	out	0x3f, r20	; 63
     cc6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	80 93 e8 00 	sts	0x00E8, r24
     cd0:	6a e2       	ldi	r22, 0x2A	; 42
     cd2:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	08 dd       	rcall	.-1520   	; 0x6ea <Endpoint_Write_Control_Stream_LE>
     cda:	11 c0       	rjmp	.+34     	; 0xcfe <USB_Device_ProcessControlRequest+0x1e0>
     cdc:	ae 01       	movw	r20, r28
     cde:	4f 5f       	subi	r20, 0xFF	; 255
     ce0:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ce2:	60 91 37 02 	lds	r22, 0x0237
     ce6:	4e dc       	rcall	.-1892   	; 0x584 <CALLBACK_USB_GetDescriptor>
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	c1 f1       	breq	.+112    	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     cec:	20 91 e8 00 	lds	r18, 0x00E8
     cf0:	27 7f       	andi	r18, 0xF7	; 247
     cf2:	20 93 e8 00 	sts	0x00E8, r18
     cf6:	bc 01       	movw	r22, r24
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	4d dd       	rcall	.-1382   	; 0x798 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
     cfe:	80 91 e8 00 	lds	r24, 0x00E8
     d02:	8b 77       	andi	r24, 0x7B	; 123
     d04:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d08:	29 c0       	rjmp	.+82     	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     d0a:	20 38       	cpi	r18, 0x80	; 128
     d0c:	b1 f5       	brne	.+108    	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     d0e:	80 91 e8 00 	lds	r24, 0x00E8
     d12:	87 7f       	andi	r24, 0xF7	; 247
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d14:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d18:	80 91 31 02 	lds	r24, 0x0231
     d1c:	80 93 f1 00 	sts	0x00F1, r24
     d20:	80 91 e8 00 	lds	r24, 0x00E8

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     d24:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     d26:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d2a:	93 dc       	rcall	.-1754   	; 0x652 <Endpoint_ClearStatusStage>
     d2c:	17 c0       	rjmp	.+46     	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
     d2e:	21 11       	cpse	r18, r1
     d30:	24 c0       	rjmp	.+72     	; 0xd7a <USB_Device_ProcessControlRequest+0x25c>
     d32:	90 91 35 02 	lds	r25, 0x0235
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d36:	92 30       	cpi	r25, 0x02	; 2
     d38:	88 f4       	brcc	.+34     	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d3e:	87 7f       	andi	r24, 0xF7	; 247
     d40:	80 93 e8 00 	sts	0x00E8, r24
     d44:	90 93 31 02 	sts	0x0231, r25
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d48:	84 dc       	rcall	.-1784   	; 0x652 <Endpoint_ClearStatusStage>
     d4a:	80 91 31 02 	lds	r24, 0x0231
     d4e:	88 23       	and	r24, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d50:	11 f0       	breq	.+4      	; 0xd56 <USB_Device_ProcessControlRequest+0x238>
     d52:	84 e0       	ldi	r24, 0x04	; 4

	Endpoint_ClearStatusStage();
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <USB_Device_ProcessControlRequest+0x23a>
     d56:	83 e0       	ldi	r24, 0x03	; 3

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     d58:	8e bb       	out	0x1e, r24	; 30
     d5a:	67 db       	rcall	.-2354   	; 0x42a <EVENT_USB_Device_ConfigurationChanged>
     d5c:	80 91 e8 00 	lds	r24, 0x00E8
     d60:	83 ff       	sbrs	r24, 3
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <USB_Device_ProcessControlRequest+0x260>
     d64:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     d68:	80 62       	ori	r24, 0x20	; 32
     d6a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d6e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
     d72:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d74:	80 93 e8 00 	sts	0x00E8, r24
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <USB_Device_ProcessControlRequest+0x260>
     d7a:	5a db       	rcall	.-2380   	; 0x430 <EVENT_USB_Device_UnhandledControlRequest>
     d7c:	ef cf       	rjmp	.-34     	; 0xd5c <USB_Device_ProcessControlRequest+0x23e>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d7e:	aa 96       	adiw	r28, 0x2a	; 42
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
     d90:	08 95       	ret

00000d92 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     d92:	08 95       	ret

00000d94 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d94:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     d96:	8e b3       	in	r24, 0x1e	; 30
     d98:	88 23       	and	r24, r24
     d9a:	59 f0       	breq	.+22     	; 0xdb2 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d9c:	c0 91 e9 00 	lds	r28, 0x00E9
     da0:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     da2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     da6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     daa:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     dac:	b8 de       	rcall	.-656    	; 0xb1e <USB_Device_ProcessControlRequest>
     dae:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db2:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
     db4:	08 95       	ret

00000db6 <CDC_Device_Event_Stub>:
#define  __INCLUDE_FROM_CDC_CLASS_DEVICE_C
#define  __INCLUDE_FROM_CDC_DRIVER
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{
     db6:	08 95       	ret

00000db8 <CDC_Device_ProcessControlRequest>:

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dbe:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     dc2:	83 ff       	sbrs	r24, 3
     dc4:	5f c0       	rjmp	.+190    	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     dc6:	88 81       	ld	r24, Y
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	20 91 37 02 	lds	r18, 0x0237
     dce:	30 91 38 02 	lds	r19, 0x0238
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	09 f0       	breq	.+2      	; 0xdda <CDC_Device_ProcessControlRequest+0x22>
     dd8:	55 c0       	rjmp	.+170    	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
	  return;

	switch (USB_ControlRequest.bRequest)
     dda:	80 91 34 02 	lds	r24, 0x0234
     dde:	81 32       	cpi	r24, 0x21	; 33
     de0:	49 f0       	breq	.+18     	; 0xdf4 <CDC_Device_ProcessControlRequest+0x3c>
     de2:	18 f4       	brcc	.+6      	; 0xdea <CDC_Device_ProcessControlRequest+0x32>
     de4:	80 32       	cpi	r24, 0x20	; 32
     de6:	c9 f0       	breq	.+50     	; 0xe1a <CDC_Device_ProcessControlRequest+0x62>
     de8:	4d c0       	rjmp	.+154    	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
     dea:	82 32       	cpi	r24, 0x22	; 34
     dec:	61 f1       	breq	.+88     	; 0xe46 <CDC_Device_ProcessControlRequest+0x8e>
     dee:	83 32       	cpi	r24, 0x23	; 35
     df0:	c9 f1       	breq	.+114    	; 0xe64 <CDC_Device_ProcessControlRequest+0xac>
     df2:	48 c0       	rjmp	.+144    	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     df4:	80 91 33 02 	lds	r24, 0x0233
     df8:	81 3a       	cpi	r24, 0xA1	; 161
     dfa:	09 f0       	breq	.+2      	; 0xdfe <CDC_Device_ProcessControlRequest+0x46>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     e08:	67 e0       	ldi	r22, 0x07	; 7
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	0f 96       	adiw	r24, 0x0f	; 15
     e10:	6c dc       	rcall	.-1832   	; 0x6ea <Endpoint_Write_Control_Stream_LE>
     e12:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e16:	8b 77       	andi	r24, 0x7B	; 123
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <CDC_Device_ProcessControlRequest+0x88>
     e1a:	80 91 33 02 	lds	r24, 0x0233
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e1e:	81 32       	cpi	r24, 0x21	; 33
     e20:	89 f5       	brne	.+98     	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
     e22:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e26:	87 7f       	andi	r24, 0xF7	; 247
     e28:	80 93 e8 00 	sts	0x00E8, r24
     e2c:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	ce 01       	movw	r24, r28
     e32:	0f 96       	adiw	r24, 0x0f	; 15
     e34:	09 dd       	rcall	.-1518   	; 0x848 <Endpoint_Read_Control_Stream_LE>
     e36:	ce 01       	movw	r24, r28
     e38:	fe da       	rcall	.-2564   	; 0x436 <EVENT_CDC_Device_LineEncodingChanged>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e40:	80 93 e8 00 	sts	0x00E8, r24
     e44:	1f c0       	rjmp	.+62     	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
     e46:	80 91 33 02 	lds	r24, 0x0233
     e4a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e4c:	d9 f4       	brne	.+54     	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
     e4e:	80 91 e8 00 	lds	r24, 0x00E8
     e52:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e54:	80 93 e8 00 	sts	0x00E8, r24
     e58:	80 91 35 02 	lds	r24, 0x0235
     e5c:	8d 87       	std	Y+13, r24	; 0x0d
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e5e:	ce 01       	movw	r24, r28
     e60:	6d db       	rcall	.-2342   	; 0x53c <EVENT_CDC_Device_ControLineStateChanged>
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <CDC_Device_ProcessControlRequest+0xc6>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e64:	80 91 33 02 	lds	r24, 0x0233
     e68:	81 32       	cpi	r24, 0x21	; 33
     e6a:	61 f4       	brne	.+24     	; 0xe84 <CDC_Device_ProcessControlRequest+0xcc>
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e6c:	80 91 e8 00 	lds	r24, 0x00E8
     e70:	87 7f       	andi	r24, 0xF7	; 247
     e72:	80 93 e8 00 	sts	0x00E8, r24
     e76:	60 91 35 02 	lds	r22, 0x0235
     e7a:	ce 01       	movw	r24, r28
     e7c:	9c df       	rcall	.-200    	; 0xdb6 <CDC_Device_Event_Stub>
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	e7 cb       	rjmp	.-2098   	; 0x652 <Endpoint_ClearStatusStage>
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     e88:	08 95       	ret

00000e8a <CDC_Device_ConfigureEndpoints>:
     e8a:	0f 93       	push	r16
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);

				Endpoint_ClearStatusStage();
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
			}

			break;
	}
}
     e90:	df 93       	push	r29
     e92:	ec 01       	movw	r28, r24
     e94:	fc 01       	movw	r30, r24

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e96:	3d 96       	adiw	r30, 0x0d	; 13
     e98:	89 e0       	ldi	r24, 0x09	; 9
     e9a:	df 01       	movw	r26, r30
     e9c:	1d 92       	st	X+, r1
     e9e:	8a 95       	dec	r24
     ea0:	e9 f7       	brne	.-6      	; 0xe9c <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     ea2:	2a 81       	ldd	r18, Y+2	; 0x02
     ea4:	3b 81       	ldd	r19, Y+3	; 0x03
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	88 23       	and	r24, r24
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <CDC_Device_ConfigureEndpoints+0x26>
     eac:	14 e0       	ldi	r17, 0x04	; 4
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <CDC_Device_ConfigureEndpoints+0x28>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	09 81       	ldd	r16, Y+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
     eb4:	c9 01       	movw	r24, r18
     eb6:	98 db       	rcall	.-2256   	; 0x5e8 <Endpoint_BytesToEPSizeMaskDynamic>
     eb8:	41 2f       	mov	r20, r17
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     eba:	48 2b       	or	r20, r24
     ebc:	42 60       	ori	r20, 0x02	; 2
     ebe:	61 e8       	ldi	r22, 0x81	; 129
     ec0:	80 2f       	mov	r24, r16
     ec2:	a0 db       	rcall	.-2240   	; 0x604 <Endpoint_ConfigureEndpoint_Prv>
     ec4:	88 23       	and	r24, r24
     ec6:	41 f1       	breq	.+80     	; 0xf18 <CDC_Device_ConfigureEndpoints+0x8e>
     ec8:	2e 81       	ldd	r18, Y+6	; 0x06
     eca:	3f 81       	ldd	r19, Y+7	; 0x07
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	88 23       	and	r24, r24
     ed0:	11 f0       	breq	.+4      	; 0xed6 <CDC_Device_ConfigureEndpoints+0x4c>
     ed2:	14 e0       	ldi	r17, 0x04	; 4
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <CDC_Device_ConfigureEndpoints+0x4e>
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	0d 81       	ldd	r16, Y+5	; 0x05
     eda:	c9 01       	movw	r24, r18
     edc:	85 db       	rcall	.-2294   	; 0x5e8 <Endpoint_BytesToEPSizeMaskDynamic>
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
     ede:	41 2f       	mov	r20, r17
     ee0:	48 2b       	or	r20, r24
     ee2:	42 60       	ori	r20, 0x02	; 2
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     ee4:	60 e8       	ldi	r22, 0x80	; 128
     ee6:	80 2f       	mov	r24, r16
     ee8:	8d db       	rcall	.-2278   	; 0x604 <Endpoint_ConfigureEndpoint_Prv>
     eea:	88 23       	and	r24, r24
     eec:	a9 f0       	breq	.+42     	; 0xf18 <CDC_Device_ConfigureEndpoints+0x8e>
     eee:	2a 85       	ldd	r18, Y+10	; 0x0a
     ef0:	3b 85       	ldd	r19, Y+11	; 0x0b
     ef2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef4:	88 23       	and	r24, r24
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     ef6:	11 f0       	breq	.+4      	; 0xefc <CDC_Device_ConfigureEndpoints+0x72>
     ef8:	14 e0       	ldi	r17, 0x04	; 4
     efa:	01 c0       	rjmp	.+2      	; 0xefe <CDC_Device_ConfigureEndpoints+0x74>
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	c9 85       	ldd	r28, Y+9	; 0x09
     f00:	c9 01       	movw	r24, r18
     f02:	72 db       	rcall	.-2332   	; 0x5e8 <Endpoint_BytesToEPSizeMaskDynamic>
     f04:	41 2f       	mov	r20, r17
     f06:	48 2b       	or	r20, r24
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
     f08:	42 60       	ori	r20, 0x02	; 2
     f0a:	61 ec       	ldi	r22, 0xC1	; 193
     f0c:	8c 2f       	mov	r24, r28
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	76 cb       	rjmp	.-2324   	; 0x604 <Endpoint_ConfigureEndpoint_Prv>
	{
		return false;
	}

	return true;
}
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <CDC_Device_SendByte>:
     f24:	cf 93       	push	r28
     f26:	c6 2f       	mov	r28, r22
     f28:	2e b3       	in	r18, 0x1e	; 30
     f2a:	24 30       	cpi	r18, 0x04	; 4
     f2c:	e9 f4       	brne	.+58     	; 0xf68 <CDC_Device_SendByte+0x44>
     f2e:	fc 01       	movw	r30, r24
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f30:	47 85       	ldd	r20, Z+15	; 0x0f
     f32:	50 89       	ldd	r21, Z+16	; 0x10
     f34:	61 89       	ldd	r22, Z+17	; 0x11
     f36:	72 89       	ldd	r23, Z+18	; 0x12
     f38:	45 2b       	or	r20, r21
     f3a:	46 2b       	or	r20, r22
     f3c:	47 2b       	or	r20, r23
     f3e:	a1 f0       	breq	.+40     	; 0xf68 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     f40:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f42:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f46:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     f4a:	85 ff       	sbrs	r24, 5
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <CDC_Device_SendByte+0x32>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     f4e:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0a c0       	rjmp	.+20     	; 0xf6a <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	8e 77       	andi	r24, 0x7E	; 126
     f5c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f60:	97 db       	rcall	.-2258   	; 0x690 <Endpoint_WaitUntilReady>
     f62:	88 23       	and	r24, r24
     f64:	a1 f3       	breq	.-24     	; 0xf4e <CDC_Device_SendByte+0x2a>
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <CDC_Device_SendByte+0x46>
     f68:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f6a:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f6c:	08 95       	ret

00000f6e <CDC_Device_Flush>:
     f6e:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f70:	24 30       	cpi	r18, 0x04	; 4
     f72:	19 f5       	brne	.+70     	; 0xfba <CDC_Device_Flush+0x4c>
     f74:	fc 01       	movw	r30, r24
     f76:	47 85       	ldd	r20, Z+15	; 0x0f
     f78:	50 89       	ldd	r21, Z+16	; 0x10
     f7a:	61 89       	ldd	r22, Z+17	; 0x11
     f7c:	72 89       	ldd	r23, Z+18	; 0x12
     f7e:	45 2b       	or	r20, r21
     f80:	46 2b       	or	r20, r22
     f82:	47 2b       	or	r20, r23
     f84:	d1 f0       	breq	.+52     	; 0xfba <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     f86:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f88:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f8c:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
     f90:	88 23       	and	r24, r24
     f92:	89 f0       	breq	.+34     	; 0xfb6 <CDC_Device_Flush+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f94:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f98:	80 91 e8 00 	lds	r24, 0x00E8
     f9c:	8e 77       	andi	r24, 0x7E	; 126
     f9e:	80 93 e8 00 	sts	0x00E8, r24
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
     fa2:	95 fd       	sbrc	r25, 5
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <CDC_Device_Flush+0x48>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     fa6:	74 db       	rcall	.-2328   	; 0x690 <Endpoint_WaitUntilReady>
     fa8:	81 11       	cpse	r24, r1
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <CDC_Device_Flush+0x4e>
     fac:	80 91 e8 00 	lds	r24, 0x00E8
     fb0:	8e 77       	andi	r24, 0x7E	; 126
     fb2:	80 93 e8 00 	sts	0x00E8, r24
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	08 95       	ret
     fba:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     fbc:	08 95       	ret

00000fbe <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
     fbe:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fc0:	24 30       	cpi	r18, 0x04	; 4
     fc2:	51 f4       	brne	.+20     	; 0xfd8 <CDC_Device_USBTask+0x1a>
     fc4:	fc 01       	movw	r30, r24
     fc6:	47 85       	ldd	r20, Z+15	; 0x0f
     fc8:	50 89       	ldd	r21, Z+16	; 0x10
     fca:	61 89       	ldd	r22, Z+17	; 0x11
     fcc:	72 89       	ldd	r23, Z+18	; 0x12
     fce:	45 2b       	or	r20, r21
     fd0:	46 2b       	or	r20, r22
     fd2:	47 2b       	or	r20, r23
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <CDC_Device_USBTask+0x1a>
	  return;
	  
	CDC_Device_Flush(CDCInterfaceInfo);
     fd6:	cb cf       	rjmp	.-106    	; 0xf6e <CDC_Device_Flush>
     fd8:	08 95       	ret

00000fda <CDC_Device_ReceiveByte>:
     fda:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fdc:	24 30       	cpi	r18, 0x04	; 4
     fde:	19 f0       	breq	.+6      	; 0xfe6 <CDC_Device_ReceiveByte+0xc>
	  return -1;
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fe6:	fc 01       	movw	r30, r24
     fe8:	47 85       	ldd	r20, Z+15	; 0x0f
     fea:	50 89       	ldd	r21, Z+16	; 0x10
     fec:	61 89       	ldd	r22, Z+17	; 0x11
     fee:	72 89       	ldd	r23, Z+18	; 0x12
     ff0:	45 2b       	or	r20, r21
     ff2:	46 2b       	or	r20, r22
     ff4:	47 2b       	or	r20, r23
     ff6:	a1 f3       	breq	.-24     	; 0xfe0 <CDC_Device_ReceiveByte+0x6>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     ff8:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ffa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ffe:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
    1002:	82 ff       	sbrs	r24, 2
    1004:	ed cf       	rjmp	.-38     	; 0xfe0 <CDC_Device_ReceiveByte+0x6>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1006:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    100a:	88 23       	and	r24, r24
    100c:	21 f0       	breq	.+8      	; 0x1016 <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    100e:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <CDC_Device_ReceiveByte+0x40>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1016:	2f ef       	ldi	r18, 0xFF	; 255
    1018:	3f ef       	ldi	r19, 0xFF	; 255
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    101a:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
    101e:	81 11       	cpse	r24, r1
    1020:	05 c0       	rjmp	.+10     	; 0x102c <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1022:	80 91 e8 00 	lds	r24, 0x00E8
    1026:	8b 77       	andi	r24, 0x7B	; 123
    1028:	80 93 e8 00 	sts	0x00E8, r24
    102c:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
    102e:	08 95       	ret

00001030 <__udivmodsi4>:
    1030:	a1 e2       	ldi	r26, 0x21	; 33
    1032:	1a 2e       	mov	r1, r26
    1034:	aa 1b       	sub	r26, r26
    1036:	bb 1b       	sub	r27, r27
    1038:	fd 01       	movw	r30, r26
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <__udivmodsi4_ep>

0000103c <__udivmodsi4_loop>:
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	ee 1f       	adc	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	a2 17       	cp	r26, r18
    1046:	b3 07       	cpc	r27, r19
    1048:	e4 07       	cpc	r30, r20
    104a:	f5 07       	cpc	r31, r21
    104c:	20 f0       	brcs	.+8      	; 0x1056 <__udivmodsi4_ep>
    104e:	a2 1b       	sub	r26, r18
    1050:	b3 0b       	sbc	r27, r19
    1052:	e4 0b       	sbc	r30, r20
    1054:	f5 0b       	sbc	r31, r21

00001056 <__udivmodsi4_ep>:
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a 94       	dec	r1
    1060:	69 f7       	brne	.-38     	; 0x103c <__udivmodsi4_loop>
    1062:	60 95       	com	r22
    1064:	70 95       	com	r23
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	bd 01       	movw	r22, r26
    1070:	cf 01       	movw	r24, r30
    1072:	08 95       	ret

00001074 <__divmodsi4>:
    1074:	05 2e       	mov	r0, r21
    1076:	97 fb       	bst	r25, 7
    1078:	16 f4       	brtc	.+4      	; 0x107e <__divmodsi4+0xa>
    107a:	00 94       	com	r0
    107c:	0f d0       	rcall	.+30     	; 0x109c <__negsi2>
    107e:	57 fd       	sbrc	r21, 7
    1080:	05 d0       	rcall	.+10     	; 0x108c <__divmodsi4_neg2>
    1082:	d6 df       	rcall	.-84     	; 0x1030 <__udivmodsi4>
    1084:	07 fc       	sbrc	r0, 7
    1086:	02 d0       	rcall	.+4      	; 0x108c <__divmodsi4_neg2>
    1088:	46 f4       	brtc	.+16     	; 0x109a <__divmodsi4_exit>
    108a:	08 c0       	rjmp	.+16     	; 0x109c <__negsi2>

0000108c <__divmodsi4_neg2>:
    108c:	50 95       	com	r21
    108e:	40 95       	com	r20
    1090:	30 95       	com	r19
    1092:	21 95       	neg	r18
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	4f 4f       	sbci	r20, 0xFF	; 255
    1098:	5f 4f       	sbci	r21, 0xFF	; 255

0000109a <__divmodsi4_exit>:
    109a:	08 95       	ret

0000109c <__negsi2>:
    109c:	90 95       	com	r25
    109e:	80 95       	com	r24
    10a0:	70 95       	com	r23
    10a2:	61 95       	neg	r22
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	08 95       	ret

000010ac <__tablejump2__>:
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31

000010b0 <__tablejump__>:
    10b0:	05 90       	lpm	r0, Z+
    10b2:	f4 91       	lpm	r31, Z
    10b4:	e0 2d       	mov	r30, r0
    10b6:	09 94       	ijmp

000010b8 <_exit>:
    10b8:	f8 94       	cli

000010ba <__stop_program>:
    10ba:	ff cf       	rjmp	.-2      	; 0x10ba <__stop_program>
